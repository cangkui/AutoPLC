Natural Language Requirement:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis is a function named `TO_UPPER` designed to convert a character of type `BYTE` to its uppercase form. The function checks the ASCII value of the input character to determine if conversion is needed and returns the converted result.\n\n- Variable Definitions\nThe code defines two types of variables:\n1. **Input Variable**: `IN`, of type `BYTE`, representing the input character.\n2. **Output Variable**: `TO_UPPER`, of type `BYTE`, representing the converted uppercase character.\n\n- Main Logic Section\n-- REGION Main Logic\nThe function's logic is divided into three parts:\n   1. **Lowercase Letter Conversion**:\n      - If the input byte value is between 96 and 123 (the ASCII range for lowercase letters), it is converted to uppercase via a bitwise AND operation (`AND 16#DF`). `16#DF` is binary `11011111`, which clears the 6th bit (counting from 0) of the lowercase letter, converting it to uppercase.\n   2. **Extended ASCII Character Conversion**:\n      - If the input byte value is between 223 and 255 (the extended ASCII character range) and not equal to 247 or 255, and `setup.EXTENDED_ASCII` is true, the same bitwise AND operation (`AND 16#DF`) is applied to convert it to uppercase. This part handles lowercase letters in the extended ASCII character set.\n   3. **Other Cases**:\n      - If the input character does not meet the above conditions, it is returned unchanged.\n   **Summary**:\n   - The function efficiently performs case conversion using bitwise operations, applicable to both standard and extended ASCII character sets.\n   - For non-alphabetic characters or characters already in uppercase, the function returns the original value unchanged.", "name": "TO_UPPER"}