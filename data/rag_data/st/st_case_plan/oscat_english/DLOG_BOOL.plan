Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\nThis functional block is named `DLOG_BOOL` and is designed to handle Boolean-type data logging. It records data into a circular buffer based on input states and conditions. The block processes data using a state machine approach and writes data to the buffer under different conditions.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input/Output Variables: `X`, of type `DLOG_DATA`, used for interacting with an external data logging system.\n - Input Variables: `STATE` (Boolean state), `OFF` (string description when the state is false), `ON` (string description when the state is true), `COLUMN` (column name, with a maximum length of 40), `DELTA` (Boolean value indicating whether state changes need to be detected).\n - Internal Variables: `UCB` (circular buffer instance), `id` (ID for identifying data), `last_delta` (record of the last state change), `state_last` (previous state value).\n\n- Main Logic\nThe core logic of the functional block is implemented via a `CASE` statement that performs different operations based on the value of `X.ADD_COM`:\n -- CASE 01:\n    Increments the value of `X.ID_MAX` by 1 and sets `id` to a fixed value `WORD#16#0601`. This step generates a unique ID for data logging.\n -- CASE 02:\n    Writes the value of `COLUMN` to the `D_STRING` field of the circular buffer `UCB`, and writes `id` and mode value 1 to the `D_HEAD` and `D_MODE` fields of the buffer. It then calls the `UCB` functional block to write the data to the buffer. This step logs the column name.\n -- CASE 03:\n    Determines how to log the state based on the value of `X.STORE_TYPE`. If `X.STORE_TYPE` is `BYTE#05`, it converts the state value to a string '0' or '1'; otherwise, it selects the `OFF` or `ON` string based on the value of `state_last`. It then writes this data to the buffer. Finally, it updates `last_delta` to the current state value.\n -- CASE 04:\n    If `DELTA` is true and the current state differs from `last_delta`, it sets `X.ADD_DATA_REQ` to true, indicating that a data log entry needs to be added. It also updates `last_delta` to the current state value.\n\nAfter the `CASE` statement, it updates `state_last` to the current state value for use in the next cycle.\n\n- Summary\nThe `DLOG_BOOL` functional block is primarily used to log Boolean-type data and writes data to a circular buffer based on state changes and configuration conditions. It processes data logging logic via a state machine approach and supports dynamic selection of state description strings. This block is suitable for scenarios requiring logging of Boolean state changes, such as logging systems or monitoring systems.", "name": "DLOG_BOOL"}