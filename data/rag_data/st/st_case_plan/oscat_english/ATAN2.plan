Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code implements a function named `ATAN2`, which calculates the arctangent (i.e., four-quadrant arctangent) of two real numbers `Y` and `X`. Unlike the standard `ATAN` function, `ATAN2` can determine the correct angle quadrant based on the signs of `Y` and `X`, returning a value in the range of `-π` to `π`.\n\n- Variable Definitions\n  The code defines two types of variables:\n  - Input variables: `Y` and `X`, representing the vertical and horizontal coordinates in a Cartesian coordinate system, respectively.\n  - Return value: `ATAN2`, representing the calculated four-quadrant arctangent value.\n\n- Main Logic Section\n  -- REGION Main Logic\n     This region computes the four-quadrant arctangent based on the values of `X` and `Y`. The logic is divided into the following branches:\n    - If `X > 0.0`, it directly calculates `ATAN(Y/X)`, since when `X` is positive, the angle lies in the first or fourth quadrant, and the result from the `ATAN` function is correct.\n    - If `X < 0.0`, the result is adjusted based on the sign of `Y`:\n      - If `Y >= 0.0`, the result is `ATAN(Y/X) + π`, adjusting the angle to the second quadrant.\n      - If `Y < 0.0`, the result is `ATAN(Y/X) - π`, adjusting the angle to the third quadrant.\n    - If `X = 0.0`, it returns a fixed value based on the sign of `Y`:\n      - If `Y > 0.0`, the result is `π/2` (i.e., 90 degrees).\n      - If `Y < 0.0`, the result is `-π/2` (i.e., -90 degrees).\n      - If `Y = 0.0`, the result is `0.0`, representing the origin or an undefined case.\n\n     Through this branching logic, the `ATAN2` function can correctly handle all possible `(X, Y)` combinations and return the accurate angle value.", "name": "ATAN2"}