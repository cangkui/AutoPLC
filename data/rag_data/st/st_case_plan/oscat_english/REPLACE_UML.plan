Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code implements a function called 'REPLACE_UML', designed to replace special characters (such as German umlauts) in an input string with their corresponding standard characters. The function processes the input string character by character and performs replacements when encountering special characters.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variable: `str`, representing the input string.\n  - Internal variables:\n    - `L`: Stores the length of the input string.\n    - `pt`, `pto`, `ptm`, `pt1`, `pt2`: Pointer variables used to manipulate the byte data of the string.\n    - `su`: A 2-character string used to store the replaced characters.\n    - `pos`: Indicates the current character position being processed.\n\n- Main Logic\n  -- REGION Initialization\n     - `pt` points to the starting address of the input string.\n     - `pto` points to the starting address of the output string.\n     - `ptm` points to the ending address of the output string (based on `string_length`, assumed to be a predefined constant).\n     - `pt1` and `pt2` point to the first and second characters of `su`, respectively.\n     - `L` stores the length of the input string.\n\n  -- REGION Character Processing Loop\n     - A `WHILE` loop iterates through each character in the input string until all characters are processed or the `string_length` limit is reached.\n     - For each character:\n       - If the character's ASCII value is less than 127 (i.e., a standard ASCII character), it is directly copied to the output string.\n       - If the character's ASCII value is 127 or higher (i.e., a special character like a German umlaut), the `TO_UML` function is called to replace it with a standard character, and the result is written to the output string.\n       - If the replaced character consists of two bytes (e.g., replacement for an umlaut), the code ensures there is enough space in the output string and writes the second byte.\n     - After each iteration, the pointers `pt` and `pto` and the position counter `pos` are updated.\n\n  -- REGION Finalization\n     - After processing all characters, the last byte of the output string is set to 0 to mark the end of the string.\n\n- Key Points\n  - **Pointer Operations**: The code uses pointers to directly manipulate the byte data of the string, ensuring efficient processing.\n  - **Character Replacement**: Special characters are replaced by calling the `TO_UML` function. The exact implementation of this function is not shown but can be assumed to map special characters to their standard counterparts.\n  - **Boundary Checks**: The code ensures that operations do not exceed the predefined length (`string_length`) of the output string.\n  - **Loop Termination**: The loop terminates when either the end of the input string is reached or the maximum length of the output string is exceeded.\n\n- Summary\n  This code processes an input string character by character, replacing special characters with standard ones and storing the result in an output string. The core of the code lies in the character traversal and replacement logic, with efficient handling ensured through pointer operations.", "name": "REPLACE_UML"}