Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThe functional block is named 'HTTP_GET' and is used to fetch data from a specified URL via the HTTP protocol. It supports basic HTTP requests, including GET requests, authentication, HTTP/1.0 and HTTP/1.1 protocols, and can process response headers, response bodies, and error statuses.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input/Output Variables: URL data, IP configuration, send buffer, receive buffer\n - Input Variables: IP address, GET trigger signal, mode, unlock buffer\n - Output Variables: HTTP status, response header start and end positions, response body start and end positions, completion flag, error code\n - Internal Variables: Read HTTP, Base64 encoding, Base64 string, authentication flag, IP FIFO, IP state, IP ID, GET trigger signal record, stored IP address, state machine state, counters, HTTP/1.1 host flag, total size, text, delimiter, delimiter position, receive timeout, connection close flag\n\n- Main Logic Section\n-- REGION State Machine\nThe state machine is the core logic of the functional block, handling various stages of the HTTP request. Starting from state 0, the state machine progresses step-by-step based on input signals and internal conditions until the request is completed or an error occurs. Below is the detailed logic for each state:\n\n   - State 0: Initialization\n     - Set the `DONE` flag to `FALSE`, indicating the request is incomplete.\n     - Detect the rising edge of the `GET` signal (i.e., `GET` is true and `GET_LAST` is false), signaling the need to initiate a new HTTP request.\n     - If a rising edge is detected:\n       - Store the current IP address in `ip4_stored`.\n       - Initialize relevant variables, such as `total_size` (total data size), `HEADER_START` (response header start position), `HEADER_STOP` (response header end position), `BODY_START` (response body start position), `BODY_STOP` (response body end position), `HTTP_STATUS` (HTTP status code), `ERROR` (error code), etc.\n       - Set `ip_state` to 1, indicating the start of an IP connection.\n       - If the URL contains a username and password, perform Base64 encoding:\n         - Concatenate the username and password into `b64_str1`.\n         - Set `b64_start` to `TRUE` to initiate Base64 encoding.\n         - Set `authentication` to `TRUE`, indicating authentication is required.\n         - Transition to state 5 for Base64 encoding.\n       - If the URL does not contain a username and password, proceed directly to state 10.\n\n   - State 5: Base64 Encoding\n     - If `b64_start` is `TRUE` and `b64_done` is `TRUE`, indicating Base64 encoding is complete:\n       - Set `b64_start` to `FALSE`.\n       - Transition to state 10 to prepare for building the HTTP request.\n\n   - State 10: Building the HTTP Request\n     - If `ip_state` is 3, indicating the IP connection is established, begin constructing the HTTP GET request:\n       - Initialize `idx` to 0 to track the position in the send buffer.\n       - Write the GET request path to the send buffer and update `idx`.\n       - If the URL contains query parameters, write them to the send buffer and update `idx`.\n       - Based on the `MODE` value, select the HTTP protocol version (HTTP/1.0 or HTTP/1.1) and write it to the send buffer, updating `idx`.\n       - Based on the `MODE` value, set the `Connection` header (Keep-Alive or Close) and write it to the send buffer, updating `idx`.\n       - If the URL contains custom headers, write them to the send buffer and update `idx`.\n       - If authentication is required, write the `Authorization` header (containing the Base64-encoded username and password) to the send buffer and update `idx`.\n       - Write the `Host` header (containing the URL's domain name) to the send buffer and update `idx`.\n       - Set the IP configuration's port number based on the URL's protocol (HTTP as 80, HTTPS as 443).\n       - Configure other IP parameters, such as IP address, mode, enable flag, timeout reset flag, etc.\n       - Set the send buffer size to `idx`, indicating the amount of data written.\n       - Transition to state 30 to await the HTTP response.\n\n   - State 30: Processing the HTTP Response\n     - In this state, the functional block waits for and processes the HTTP response headers and body:\n       - Check for receive timeout (`rcv_timeout`) or connection closure (`con_rdce`).\n       - If the send buffer size is 0, indicating the request has been sent, begin processing the response:\n         - If `total_size` is 0, indicating the response headers have not yet been parsed:\n           - Search the receive buffer for the header end delimiter (`$0D$0A$0D$0A` or `$0A$0A`).\n           - If found, set `HEADER_START` and `HEADER_STOP` to mark the header's start and end positions.\n           - Parse the HTTP status code. If the status code is 200 (success), further parse the `Content-Length` header to calculate the total response body size.\n           - If the status code is not 200, set the error code to `DWORD#16#000000FC`.\n         - If `total_size` is greater than 0, indicating the headers have been parsed, wait for the response body:\n           - If the receive buffer data reaches `total_size`, or if a timeout or connection closure occurs, set `BODY_START` and `BODY_STOP` to mark the body's start and end positions.\n           - Set the `DONE` flag to `TRUE`, indicating the request is complete.\n           - Disable the IP connection and transition to state 40 to finalize the request.\n       - If an IP connection error occurs, set the error code and transition to state 40 to finalize the request.\n\n   - State 40: Finalizing the Request\n     - In this state, the functional block sets the completion flag and disables the IP connection based on whether the request succeeded or failed:\n       - If `UNLOCK_BUF` is `TRUE` or `DONE` is `FALSE`, indicating a state machine reset is needed:\n         - Set `ip_state` to 4, indicating the IP connection is closed.\n         - Set the `DONE` flag to `FALSE`.\n         - Reset the state machine to state 0 to prepare for the next request.\n\n-- REGION Additional Logic\n   Outside the state machine, the functional block also handles the following logic:\n   - Base64 Encoding: Performs Base64 encoding of usernames and passwords when authentication is required.\n   - IP FIFO: Manages the IP connection FIFO queue to ensure proper connection order and state.\n   - GET Signal Recording: Tracks the current state of the `GET` signal to detect rising edges.\n   - Error Handling: Sets error codes and transitions to state 40 if an IP connection error occurs.\n\n- Summary\nThis functional block implements the complete HTTP GET request workflow via a state machine, including request construction, authentication, response processing, and error handling. It supports HTTP/1.0 and HTTP/1.1 protocols, as well as HTTPS connections. Through Base64 encoding and IP FIFO management, the block efficiently handles complex HTTP request scenarios.", "name": "HTTP_GET"}