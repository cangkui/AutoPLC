Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis code implements a function block named `ONTIME`, designed to calculate the duration and cycle count while the input signal `IN` is `TRUE`. It accumulates seconds by recording time differences and counts cycles by detecting the rising edge of the input signal. The function block also supports resetting the timer and cycle counter via the `RST` signal.\n\n- Variable Definitions\nThe code defines the following types of variables:\n  - Input variables: `IN` (input signal), `RST` (reset signal)\n  - Input/output variables: `SECONDS` (accumulated seconds), `CYCLES` (accumulated cycle count)\n  - Internal variables: `tx` (current timestamp), `last` (previous timestamp), `edge` (rising edge flag of the input signal), `init` (initialization flag), `ms` (accumulated milliseconds)\n\n- Main Logic\n  -- REGION Initialization\n     - On the first run of the function block, `init` is `FALSE`, triggering the initialization logic. `init` is set to `TRUE`, and `last` and `ms` are initialized to the current timestamp and 0, respectively.\n     - This step ensures the function block correctly initializes time tracking during its first execution.\n\n  -- REGION Reset Handling\n     - If `RST` is `TRUE`, `SECONDS` and `CYCLES` are reset to 0, while `last` and `ms` are updated to the current timestamp and 0.\n     - This step ensures the timer and cycle counter are cleared when the reset signal is triggered.\n\n  -- REGION Time Calculation\n     - If `IN` is `TRUE`, the difference between the current timestamp `tx` and the previous timestamp `last` is calculated and added to `ms`.\n     - If `ms` reaches or exceeds 1000 milliseconds (i.e., 1 second), `SECONDS` is incremented by 1, and 1000 milliseconds are subtracted from `ms`.\n     - This step accumulates seconds while maintaining timing precision through millisecond subtraction.\n\n  -- REGION Cycle Counting\n     - If `IN` is `TRUE` and a rising edge of the input signal is detected (i.e., `edge` is `FALSE`), `CYCLES` is incremented by 1.\n     - This step counts cycles by detecting the rising edge of the input signal.\n\n  -- REGION State Update\n     - At the end of each cycle, `last` is updated to the current timestamp `tx`, and `edge` is set to the current value of `IN`.\n     - This step ensures accurate detection of input signal changes in the next cycle.\n\n- Summary\nThe `ONTIME` function block calculates the duration and cycle count of the input signal by recording time differences and detecting rising edges. It supports reset functionality, allowing the timer and cycle counter to be cleared when needed. This function block is suitable for scenarios requiring precise timing and cycle counting, such as monitoring device runtime or tracking signal trigger events.", "name": "ONTIME"}