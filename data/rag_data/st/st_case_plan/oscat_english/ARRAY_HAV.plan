Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code implements a function named `ARRAY_HAV` to calculate the harmonic average (Harmonic Average) of elements in an array. The harmonic average is the reciprocal of the average of reciprocals, commonly used for computing averages of ratios or speeds. The function takes a pointer to a real-number array and its size as input, then returns the harmonic average.\n\n- Variable Definitions\n  - Input Variables:\n    - `pt`: A pointer to a real-number array with a size range of `0..32000`.\n    - `size`: The size of the array, of type `UINT`.\n  - Internal Variables:\n    - `i`: Loop counter, of type `UINT`.\n    - `stop`: Loop termination condition, of type `UINT`, used to determine the number of array elements to process.\n\n- Main Logic\n  -- REGION Initialization:\n     - Calculate the loop termination condition `stop`. The value of `stop` is `size` right-shifted by 2 bits (equivalent to dividing by 4) minus 1. This operation is typically used to process specific parts of the array (e.g., the first element in every 4 elements).\n  -- REGION Harmonic Average Calculation:\n     - Use a `FOR` loop to iterate through array elements from `0` to `stop`.\n     - Inside the loop, check if the current element `pt^[i]` is `0.0`. If it is, the harmonic average is `0.0`, and the function returns immediately (since zero values are invalid in harmonic average calculations).\n     - If the current element is not `0.0`, accumulate its reciprocal into `ARRAY_HAV`.\n  -- REGION Result Calculation:\n     - After the loop, convert `stop + 1` (i.e., the number of processed elements) to a real number and divide it by the accumulated sum of reciprocals to obtain the harmonic average.\n     - Assign the result to `ARRAY_HAV` and return it.\n\n- Key Details\n  - The harmonic average calculation requires all elements to be non-zero. If any element in the array is zero, the function immediately returns `0.0`.\n  - The function accesses the array via a pointer, allowing direct manipulation of the original data and avoiding the overhead of array copying.\n  - The calculation of `stop` suggests the function may only process a subset of the array (e.g., the first element in every 4 elements), depending on the value of `size`.", "name": "ARRAY_HAV"}