Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis code defines a function named `BIT_OF_DWORD` that extracts the value of a specified bit from an input `DWORD` (32-bit unsigned integer) and returns the bit's boolean value (`TRUE` or `FALSE`).\n\n- Variable Definitions\nThe code defines two types of variables:\n  - Input variables:\n    - `in`: A `DWORD`-type variable representing the input 32-bit unsigned integer.\n    - `N`: An `INT`-type variable representing the index of the bit to extract (starting from 0).\n  - Output variable:\n    - `BIT_OF_DWORD`: A `BOOL`-type variable representing the extracted bit's value (`TRUE` or `FALSE`).\n\n- Main Logic\n  -- REGION Bit Extraction Logic:\n    The core logic of the function extracts the specified bit through the following steps:\n    1. **Shift Operation**: Uses the `SHR` (right shift) operation to shift the input `DWORD` value right by `N` bits. This moves the target bit to the least significant bit (bit 0).\n    2. **Mask Operation**: Performs an `AND` operation between the shifted value and `16#00000001` (binary `00000000 00000000 00000000 00000001`). This step masks all bits except the least significant bit.\n    3. **Comparison Operation**: Compares the result of the mask operation with `0`. If the result is greater than `0`, it means the least significant bit is `1`, so the function returns `TRUE`; otherwise, it returns `FALSE`.\n\n    Finally, the function assigns the extracted bit's boolean value to the output variable `BIT_OF_DWORD`.\n\n- Examples\n  - If `in = 16#00000008` (binary `00000000 00000000 00000000 00001000`) and `N = 3`:\n    1. `SHR(in, 3)` results in `16#00000001` (binary `00000000 00000000 00000000 00000001`).\n    2. The `AND` operation yields `16#00000001`.\n    3. The comparison result is `TRUE`, so `BIT_OF_DWORD = TRUE`.\n  - If `in = 16#00000004` (binary `00000000 00000000 00000000 00000100`) and `N = 2`:\n    1. `SHR(in, 2)` results in `16#00000001` (binary `00000000 00000000 00000000 00000001`).\n    2. The `AND` operation yields `16#00000001`.\n    3. The comparison result is `TRUE`, so `BIT_OF_DWORD = TRUE`.\n  - If `in = 16#00000004` and `N = 1`:\n    1. `SHR(in, 1)` results in `16#00000002` (binary `00000000 00000000 00000000 00000010`).\n    2. The `AND` operation yields `16#00000000`.\n    3. The comparison result is `FALSE`, so `BIT_OF_DWORD = FALSE`.\n\n- Summary\nThis function efficiently extracts the value of a specified bit from a `DWORD` using shift, mask, and comparison operations, returning a boolean result. It can be used for bit manipulation tasks, such as checking whether a specific flag is set.", "name": "BIT_OF_DWORD"}