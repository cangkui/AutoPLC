Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  The function named `FSTRING_TO_WEEK` converts a string representing weekdays into a byte value, where each bit corresponds to a specific weekday. The function supports multilingual input and parses each weekday in the string by identifying comma separators.\n\n- Variable Definitions\n  The code defines several types of variables:\n  - Input variables: `WEEK` is a string representing weekdays; `LANG` is an integer representing the language code.\n  - Internal variables: `pos` is an integer used to locate comma positions in the string.\n\n- Main Logic Section\n  -- REGION Main Logic\n    1. **Find Comma Position**: First, use the `FIND` function to locate the first comma in the string `WEEK` and store the result in the `pos` variable.\n    2. **Loop to Parse Weekdays**: Process each weekday in the string via a `WHILE` loop:\n       - **Extract Weekday**: Use the `MID` function to extract the substring before the comma (i.e., a weekday representation).\n       - **Convert to Byte Value**: Call the `FSTRING_TO_WEEKDAY` function to convert the extracted weekday into its corresponding bit value, then shift it to the correct position using the `SHR` function. Merge the result with the current `FSTRING_TO_WEEK` value via an `OR` operation.\n       - **Update String**: Use the `RIGHT` function to remove the processed portion (including the comma) and continue searching for the next comma position.\n    3. **Process Last Weekday**: After the loop ends, there might be one remaining weekday in the string. Convert it to a byte value using the same method and merge it into `FSTRING_TO_WEEK` via an `OR` operation.\n    4. **Limit Byte Range**: Finally, use the `AND BYTE#127` operation to ensure the `FSTRING_TO_WEEK` value stays within 0 to 127 (i.e., only the lower 7 bits are retained).\n  -- REGION End", "name": "FSTRING_TO_WEEK"}