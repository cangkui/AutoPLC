Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis code defines a function block named 'TN_SC_VIEWPORT' for displaying log messages on the screen. It reads log control information and writes log messages to the screen based on color attributes. The code uses a timer (TON) to control the update frequency and employs loops to handle multiple log messages.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Function block instances: `FB_TN_SC_WRITE` (for screen write operations), `FB_TON` (timer instance).\n - Input variables: `in_index` (index), `in_Color` (color value), `by_Attr` (attribute byte), `in_count` (counter).\n - Structure instances: `Xus_LOG_VIEWPORT` (log viewport information), `Xus_LOG_CONTROL` (log control information), `Xus_TN_SCREEN` (screen information).\n - Position and dimension variables: `Iin_X` (X-coordinate), `Iin_Y` (Y-coordinate), `Iin_Width` (width).\n - Attribute variables: `Idw_ATTR_1` and `Idw_ATTR_2` (attribute values).\n - Time variable: `Iti_TIME` (timer duration).\n\n- Main Logic Section\n-- REGION Log Update Handling\n   This section handles the updating and display of log messages. First, it checks if the `Xus_LOG_VIEWPORT.UPDATE` flag and the timer `FB_TON.Q` are true. If conditions are met, log update processing begins.\n   - Sets the `Xus_LOG_VIEWPORT.UPDATE` flag to `FALSE`, indicating the start of update processing.\n   - Uses a `FOR` loop to iterate through log messages from `1` to `Xus_LOG_VIEWPORT.COUNT`.\n   - Within the loop, retrieves the current log index `in_index` from `Xus_LOG_VIEWPORT.LINE_ARRAY`.\n   - Extracts the color value `in_Color` from `Xus_LOG_CONTROL.MSG_OPTION` and converts it to an integer.\n   - Uses a `CASE` statement to select the attribute byte `by_Attr` based on the color value:\n     - If the color value is in the range `0..3`, extracts the attribute byte from `Idw_ATTR_1`.\n     - If the color value is in the range `4..7`, extracts the attribute byte from `Idw_ATTR_2`.\n     - Otherwise, uses a default value (byte 0 of `Idw_ATTR_1`).\n   - Calls the `FB_TN_SC_WRITE` function block to write the log message to the screen. Parameters include Y-coordinate, X-coordinate, attribute byte, and the formatted log string.\n   - After the loop ends, resets the timer `FB_TON` and sets the timer duration to `Iti_TIME`.\n-- REGION Timer Control\n   This section controls the timer's start and operation.\n   - Sets the timer `FB_TON` input `IN` to `TRUE` to start the timer.\n   - Sets the timer duration to `Iti_TIME`.\n   - Calls the timer instance `FB_TON()` to run it.\n\n- Output Result\nThe primary function of the code is to display log messages on the screen. The update frequency is controlled by the timer, and different display attributes are selected based on the log's color attributes. Finally, the log messages are formatted and written to the specified screen positions.", "name": "TN_SC_VIEWPORT"}