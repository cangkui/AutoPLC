Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  The function block `TN_INPUT_MENU_BAR` is used to manage and display the menu bar and its submenus. It handles menu creation, updates, navigation, and destruction, and interacts with screen inputs. The core logic of the function block is based on a state machine, which manages different menu states (such as creation, activation, destruction, etc.) and drives state transitions through input events (e.g., button presses).\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Internal variables: Include instances of the menu bar and popup menu function blocks, the menu bar's title, row and column positions, menu item counts and indices, scroll offsets, attribute flags, etc.\n  - Input/output variables: Include global states for menus and screens, used to pass data between function blocks.\n\n- Main Logic Section\n  -- REGION Initialize Menu\n     When the menu state is `00` (uninitialized) and `bo_Create` is true, the function block enters the initialization logic:\n     - Set the menu state to `01` (created), indicating the menu has been initialized.\n     - Reset the `bo_Create` flag to prevent repeated initialization.\n     - Set the default menu selection `in_Menu_Selected` to `00`.\n     - Set `bo_Update` to true, indicating the menu display needs updating.\n     - Set `bo_Reset_Position` to true, indicating the menu item positions need resetting.\n     - Use the `ELEMENT_GET` function to extract the menu bar content from `st_MENU_TEXT` and store it in `st_MENU_BAR`.\n     - Use the `ELEMENT_COUNT` function to count the number of menu items in the menu bar and store it in `in_Menu_E_Count`.\n\n  -- REGION Handle Input Events\n     Process different button events based on the screen input's extended code (`by_Input_Exten_Code`):\n     - If the input code is `65` or `66`, it means the user pressed specific navigation keys (e.g., up/down keys), which are passed to the popup menu for processing and stored in `us_TN_MENU_POPUP.by_Input_Exten_Code`.\n     - If the input code is `27` (ESC key), it means the user pressed the cancel key:\n       - If the current state is `01` (created), transition to state `02` (menu bar activated) and set `bo_Update` to true, indicating the menu display needs updating. Also, set `bo_Menue_Bar_Dialog` to true, indicating the menu bar dialog is active.\n       - If the current state is `02` (menu bar activated), destroy the popup menu, set `bo_Destroy` to true, and return to state `01`. Also, reset `bo_Reset_Position` to true, indicating the menu item positions need resetting, and set `bo_Menue_Bar_Dialog` to false, indicating the menu bar dialog is closed.\n\n  -- REGION Handle Menu Bar Activation State\n     In state `02` (menu bar activated), process the following events:\n     - If the input code is `13` (Enter key), it means the user selected a menu item:\n       - Destroy the popup menu by setting `bo_Destroy` to true.\n       - Return to state `01` and set `bo_Update` to true, indicating the menu display needs updating.\n       - Set `bo_Reset_Position` to true, indicating the menu item positions need resetting.\n       - Calculate the currently selected menu item `in_Menu_Selected` and store it in `in_Menu_Selected`.\n       - Reset the screen input code `by_Input_Exten_Code` to `00`.\n       - Set `bo_Menue_Bar_Dialog` to false, indicating the menu bar dialog is closed.\n     - If `bo_Destroy` is true, it means the menu needs to be destroyed:\n       - Destroy the popup menu by setting `bo_Destroy` to true.\n       - Return to state `01` and set `bo_Update` to true, indicating the menu display needs updating.\n       - Set `bo_Reset_Position` to true, indicating the menu item positions need resetting.\n       - Reset `in_Menu_Selected` to `00`, indicating no menu item is selected.\n       - Reset the screen input code `by_Input_Exten_Code` to `00`.\n       - Set `bo_Menue_Bar_Dialog` to false, indicating the menu bar dialog is closed.\n     - If the input code is `67` or `68`, it means the user pressed scroll keys (e.g., left/right keys):\n       - Set the scroll offset `in_Scroll_Offset` to `1` or `-1` based on the input code.\n       - Set `bo_Update` to true, indicating the menu display needs updating.\n       - Reset the screen input code `by_Input_Exten_Code` to `00`.\n\n  -- REGION Reset Positions\n     If `bo_Reset_Position` is true, it means the menu item positions need resetting:\n     - Reset the screen position coordinates `in_X_SM_old` and `in_Y_SM_old` of the menu items to `-1`.\n     - Reset `bo_Reset_Position` to false, indicating the positions have been reset.\n\n  -- REGION Update Menu Display\n     When the menu state is greater than `00` and `bo_Update` is true, update the menu bar's display content:\n     - Reset `bo_Update` to false, indicating the update is complete.\n     - Retrieve the menu bar's display positions `in_ROW` and `in_COL`.\n     - If the scroll offset `in_Scroll_Offset` is not `00`, adjust the current menu item position `in_Cur_Menu_Item` and use the `OSCAT_BASIC.INC2` function to ensure it stays within valid bounds. Then reset `in_Scroll_Offset` to `00`.\n     - If `in_Cur_Menu_Item` is `00`, set it to `01`, indicating the first menu item is selected by default.\n     - Iterate through all menu items and set different attributes (e.g., color) based on the currently selected item:\n       - If the current menu item is the selected one and the state is greater than `01`, set the attribute `by_ATTR` to `by_Attr_mF` (highlighted) and update the screen positions `in_Y_SM_new` and `in_X_SM_new` of the menu item.\n       - Otherwise, set the attribute `by_ATTR` to `by_Attr_oF` (normal display).\n     - Use the `ELEMENT_GET` function to extract the title of the current menu item from the menu bar and store it in `st_MENU_TITLE`.\n     - Calculate the title length `in_TITLE_Length` and call the `FB_TN_SC_WRITE_C` function block to write the menu item to the screen.\n     - Update the display position `in_COL` of the menu item so the next item can be displayed correctly.\n\n  -- REGION Handle Popup Menu\n     If the screen position `in_X_SM_new` of a menu item changes, handle the popup menu display:\n     - If the popup menu is already active, set `bo_Destroy` to true, indicating the current popup menu needs to be destroyed.\n     - Call the `FB_TN_INPUT_MENU_POPUP` function block to update the popup menu's state.\n     - If the popup menu is inactive, create a new one:\n       - Set the popup menu's positions `in_Y` and `in_X` to `in_Y_SM_new` and `in_X_SM_new`.\n       - Set the popup menu's attributes `by_Attr_mF` and `by_Attr_oF`.\n       - Use the `ELEMENT_GET` function to extract the popup menu content from `st_MENU_TEXT` and store it in `st_Menu_Text`.\n       - Set `bo_Create` to true, indicating a new popup menu needs to be created.\n       - Update the screen positions `in_X_SM_old` and `in_Y_SM_old` of the menu item for detecting future position changes.\n\n  -- REGION Update Popup Menu\n     Call the `FB_TN_INPUT_MENU_POPUP` function block to update the popup menu's state and retrieve the currently selected submenu item `in_Cur_Item`, storing it in `in_Cur_Sub_Item`.\n\n  -- REGION Destroy Menu\n     If the current state is `01` (created) and `bo_Destroy` is true, destroy the menu:\n     - Reset the menu state to `00` (uninitialized).\n     - Reset `bo_Destroy` to false, indicating the destruction is complete.\n     - Reset the currently selected menu item `in_Cur_Menu_Item` and submenu item `in_Cur_Sub_Item` to `00`, indicating no items are selected.", "name": "TN_INPUT_MENU_BAR"}