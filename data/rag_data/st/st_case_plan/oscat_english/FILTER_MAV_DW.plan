Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\nThis code implements a Moving Average Filter (MAV) designed to smooth input signals. It maintains a fixed-size buffer to store recent input values and calculates their average as the output.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables: `X` (input signal, DWORD type), `N` (filter window size, UINT type), `RST` (reset signal, BOOL type).\n - Output variable: `Y` (filtered output signal, DWORD type).\n - Internal variables: `init` (initialization flag, BOOL type), `buffer` (buffer for storing input signals, DWORD array of size 32), `i` (index for traversing the buffer, INT type).\n - Temporary variable: `tmp` (temporary variable for intermediate calculations, INT type).\n\n- Main Logic\n-- REGION Initialization and Reset Handling\n   First, the code ensures the filter window size `N` does not exceed the buffer size (32) via `MIN(N, 32)`. If the `init` flag is false (indicating first run), `RST` is true (reset signal triggered), or `N` is 0 (window size is 0), initialization is performed. Initialization includes:\n   - Setting `init` to true, marking completion of initialization.\n   - Setting `tmp` to `N-1` for subsequent loops.\n   - Filling the buffer with the input signal `X` in each position.\n   - Setting output `Y` to the current input signal `X`.\n   This step ensures the filter starts correctly and reinitializes the buffer upon reset.\n\n-- REGION Moving Average Calculation\n   If the filter is initialized and no reset signal is present, the moving average is calculated:\n   - Set `tmp` to `N` for index calculation.\n   - Update index `i` using `INC1(i, tmp)` to cycle within buffer bounds.\n   - Compute new output `Y` with the formula: `Y = Y + (X - buffer[i]) / N`. This updates the average by removing the oldest value and adding the newest.\n   - Store the latest input `X` in the buffer at position `buffer[i]`.\n   This step implements the core functionality of the moving average filter via sliding window calculations.\n\n-- REGION Output Result\n   Finally, the filtered output `Y` is written to the output variable for external use.\n\n- Summary\nThis code efficiently implements a moving average filter by maintaining a fixed buffer and sliding window calculations to smooth input signals. Initialization and reset handling ensure correct filter states, while moving average calculations perform the filtering. The output `Y` reflects the smoothed input signal.", "name": "FILTER_MAV_DW"}