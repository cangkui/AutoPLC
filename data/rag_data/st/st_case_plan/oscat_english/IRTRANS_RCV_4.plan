Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code defines a function block named `IRTRANS_RCV_4`, designed to handle the signal decoding logic for an infrared receiver. It processes input device codes and key codes to output corresponding signal states.\n\n- Variable Definitions\n  The code includes the following types of variables:\n  - Input variables: `DEV_CODE` (device code), `KEY_CODE_0` to `KEY_CODE_3` (key codes), `CMD` (command signal).\n  - Input/output variables: `DEV` (device code), `KEY` (key code).\n  - Output variables: `Q0` to `Q3`, representing the decoded results of the key codes.\n  - Temporary variable: `decode`, used to store intermediate results of the decoding condition.\n\n- Main Logic Section\n  -- REGION Decoding Logic\n      First, the decoding condition is calculated via `decode := cmd AND dev_code = dev;`. `decode` is only true when `CMD` is true and `DEV_CODE` matches `DEV`.\n      Then, based on the match between `KEY` and `KEY_CODE_0` to `KEY_CODE_3`, combined with the `decode` result, the output values `Q0` to `Q3` are set accordingly. The specific logic is as follows:\n      - `Q0 := key = key_code_0 AND decode;`: If `KEY` matches `KEY_CODE_0` and `decode` is true, `Q0` is set to true.\n      - `Q1 := key = key_code_1 AND decode;`: If `KEY` matches `KEY_CODE_1` and `decode` is true, `Q1` is set to true.\n      - `Q2 := key = key_code_2 AND decode;`: If `KEY` matches `KEY_CODE_2` and `decode` is true, `Q2` is set to true.\n      - `Q3 := key = key_code_3 AND decode;`: If `KEY` matches `KEY_CODE_3` and `decode` is true, `Q3` is set to true.\n\n  The core logic of this code involves matching device codes and key codes, combined with the command signal, to output the corresponding decoded results. It is suitable for scenarios such as infrared receiver signal processing.", "name": "IRTRANS_RCV_4"}