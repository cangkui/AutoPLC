Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\n  The function block `FF_DRE` implements a basic flip-flop with Set (SET), Reset (RST), and Clock (CLK) inputs. Its behavior resembles a D flip-flop but includes additional set and reset functionalities. The output `Q` depends on the states of the inputs `SET`, `RST`, and `CLK`.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: `SET` (set signal), `D` (data input), `CLK` (clock signal), `RST` (reset signal).\n  - Output variables: `Q` (flip-flop output).\n  - Internal variables: `edge` (used to detect the rising edge of the clock signal).\n\n- Main Logic Section\n  -- REGION Main Logic:\n     - First, check if the reset signal `RST` or the set signal `SET` is true. If `RST` is true, the output `Q` is forced to `FALSE`; if `SET` is true, the output `Q` is forced to `TRUE`.\n     - If both reset and set signals are false, check if the clock signal `CLK` is true and `edge` is false. This indicates the detection of a rising edge in the clock signal. In this case, the output `Q` is updated to the value of the data input `D`.\n     - Finally, the `edge` variable is updated to the current value of the clock signal `CLK` to detect changes in the clock signal in the next cycle.\n\n  The core logic of this function block involves detecting the rising edge of the clock signal to update the output `Q`, while also supporting direct control of the output state via the `SET` and `RST` signals.\n\n- Summary\n  The `FF_DRE` function block implements a simple D flip-flop with set and reset capabilities. It updates the output by detecting the rising edge of the clock signal while allowing direct control of the output state via the `SET` and `RST` signals. This design can be used in logic scenarios requiring synchronous updates and forced control.", "name": "FF_DRE"}