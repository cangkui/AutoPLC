Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\nThis code implements a simple debounce function block (DEBOUNCE) to handle signal jitter issues. Debouncing is a technique used to eliminate multiple rapid changes in an input signal within a short period, ensuring the output signal only changes after the input signal stabilizes.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables: IN (input signal), TD (debounce time), PM (forced reset signal).\n - Output variable: Q (output signal).\n - Internal variable: deb (uses the TOF timer from the OSCAT_BASIC library to implement the debounce functionality).\n\n- Main Logic Section\n-- REGION Debounce Logic\n   This region contains the core logic of the function block, handling the debouncing of the input signal and controlling the output signal. The specific logic is as follows:\n   1. **Debounce Timer Initialization**:\n      - Uses the TOF timer (deb) from the OSCAT_BASIC library to implement the debounce functionality. The TOF timer starts counting when the input signal (IN) is true, and the output signal (Q) updates only when the count reaches the set time (TD).\n   2. **Output Signal Control**:\n      - If the debounce timer output (deb.Q) is false and the input signal (IN) is true, the output signal (Q) is directly set to true. This indicates the input signal triggers for the first time within the debounce period.\n      - If the forced reset signal (PM) is false, the output signal (Q) is set to the debounce timer output (deb.Q). This means the output signal state is determined by the timer during the debounce period.\n      - If the forced reset signal (PM) is true, the output signal (Q) is set to false. This indicates the forced reset signal takes precedence over other logic, directly turning off the output.\n   3. **Timer Update**:\n      - Finally, the input signal (IN) and set time (TD) of the debounce timer (deb) are updated.\n\n-- REGION Timer Logic\n   This region implements the debounce functionality using the TOF timer from the OSCAT_BASIC library. The TOF timer works as follows:\n   - When the input signal (IN) is true, the timer starts counting.\n   - If the input signal (IN) turns false during the count, the timer resets.\n   - Only when the input signal (IN) remains true for longer than the set time (TD) does the timer output (deb.Q) become true.\n   - This mechanism ensures the output signal (Q) only changes after the input signal remains stable for a certain period, thereby eliminating the effects of jitter.", "name": "DEBOUNCE"}