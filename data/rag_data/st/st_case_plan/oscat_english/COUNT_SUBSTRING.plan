Natural Language Requirement: {"variables": [], "instructions": [], "planning": "- Overview\nThis function, named `COUNT_SUBSTRING`, is used to count the number of occurrences of a substring `SEARCH` within a string `STR`. The function achieves this by iteratively finding and replacing the substring to tally its occurrences.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables: `SEARCH` (the substring to search for) and `STR` (the string to be searched).\n - Local variables: `pos` (stores the position of the substring within the string) and `size` (stores the length of the substring).\n\n- Main Logic\n -- REGION Initialization\n    First, `COUNT_SUBSTRING` is initialized to 0, indicating that the initial count of substring occurrences is 0. Then, the length of the substring `SEARCH` is calculated and stored in the variable `size`.\n\n -- REGION Search and Replace Loop\n    A `REPEAT` loop is used to find the position of the substring `SEARCH` within the string `STR`. In each iteration:\n    1. The `FIND` function is used to locate the substring `SEARCH` within `STR`, and the result is stored in the variable `pos`.\n    2. If `pos` is greater than 0, indicating that the substring was found, the following actions are taken:\n       - The `REPLACE` function is used to remove the substring `SEARCH` from `STR`. Here, `REPLACE` substitutes the substring with an empty string, with the replacement length being `size` and the position being `pos`.\n       - The value of `COUNT_SUBSTRING` is incremented by 1, signifying that a substring has been found.\n    3. If `pos` equals 0, it means no substring was found, and the loop terminates.\n\n -- REGION Return Result\n    After the loop concludes, the function returns the value of `COUNT_SUBSTRING`, which represents the number of times the substring `SEARCH` appeared in the string `STR`.", "name": "COUNT_SUBSTRING"}