Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code defines a function block named `DEAD_ZONE2`, which implements dead zone control. Dead zone control is a common control strategy used to handle uncertainty or noise in input signals within a specific range. If the input signal exceeds the dead zone range, the output signal matches the input signal; otherwise, the output signal is constrained to the dead zone boundary.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: `X` (input signal) and `L` (dead zone range).\n  - Output variable: `Y` (output signal).\n\n- Main Logic Section\n  -- REGION Main Logic\n    The core logic of the function block is implemented through a simple conditional statement:\n    - If the absolute value of the input signal `X` is greater than the dead zone range `L`, the output signal `Y` equals the input signal `X`.\n    - Otherwise, if the current value of the output signal `Y` is greater than 0.0, `Y` is constrained to the positive dead zone boundary `L`.\n    - If neither of the above conditions is met, the output signal `Y` is constrained to the negative dead zone boundary `-L`.\n\n    This logic ensures that when the input signal is within the dead zone range, the output signal is limited to the dead zone boundary, thereby avoiding unnecessary interference with the system.\n\n- Output Result\n  The value of the output signal `Y` depends on the relationship between the input signal `X` and the dead zone range `L`:\n  - If `X` exceeds the dead zone range, `Y` directly equals `X`.\n  - If `X` is within the dead zone range, `Y` is constrained to either `L` or `-L`, depending on the current value of `Y`.", "name": "DEAD_ZONE2"}