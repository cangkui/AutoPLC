Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThe function `ARRAY_AVG` is used to calculate the average value of a real number array. It takes a pointer to the array and the size of the array as input, and returns the computed average value.\n\n- Variable Definitions\nThe code defines the following types of variables:\n  - Input variables: `pt` is a pointer to a real number array, and `size` is the size of the array.\n  - Local variables: `i` and `stop` are temporary variables used for loops and calculations.\n\n- Main Logic\n  -- Initialization:\n     - The `stop` variable is calculated by right-shifting `size` by 2 bits and subtracting 1. This is equivalent to dividing `size` by 4 and subtracting 1, likely to handle specific parts of the array or optimize calculations.\n     - `ARRAY_AVG` is initialized with the first element of the array, `pt^[0]`.\n\n  -- Loop Summation:\n     - A `FOR` loop is used starting from the second element of the array (`i = 1`) up to `stop`.\n     - In each iteration, the current element `pt^[i]` is added to `ARRAY_AVG`, gradually accumulating the values of the array elements.\n\n  -- Average Calculation:\n     - After the loop completes, the accumulated result `ARRAY_AVG` is divided by `stop + 1` (the actual number of elements involved in the calculation) to obtain the average value of the array.\n     - Since `stop + 1` is an integer type, `UINT_TO_REAL` is used to convert it to a real type for floating-point division.\n\n  -- Return Result:\n     - Finally, `ARRAY_AVG` is returned as the function's output, representing the average value of the array.", "name": "ARRAY_AVG"}