Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis code implements a function named `URL_ENCODE`, which encodes an input string into URL format. URL encoding converts non-URL characters into the form of `%` followed by two hexadecimal digits.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variable: `IN`, representing the string to be encoded.\n - Internal variables:\n   - `pt_in`: Pointer to the input string.\n   - `pt_out`: Pointer to the output string.\n   - `pos_in`: Current processing position in the input string.\n   - `pos_out`: Current writing position in the output string.\n   - `stop`: Length of the input string.\n   - `tb`: Temporary byte variable used to store and process the hexadecimal value of a character.\n\n- Main Logic\n-- REGION Initialization\n   First, the address of the input string is assigned to `pt_in`, and the address of the output string is assigned to `pt_out`. Then, `pos_in` is initialized to 1, indicating processing starts from the first character of the input string. The `stop` variable is set to the length of the input string to control the loop's termination condition.\n\n-- REGION URL Encoding\n   A `FOR` loop is used to iterate through the output string positions (from 1 to 250). Within the loop, it first checks whether all characters of the input string have been processed (`pos_in > stop`). If so, the loop exits. Otherwise, it checks if the current character is a valid URL character (determined by the `IS_URLCHR` function). If it is valid, the character is directly copied to the output string, and `pos_in` is incremented.\n\n   If the current character is not a valid URL character, URL encoding is performed. First, it checks if there is sufficient remaining space in the output string (`pos_out > 248`). If not, the loop exits. Otherwise, the `%` character is written to the output string, and `pos_out` is incremented. Next, the high 4 bits of the current character are converted to a hexadecimal character and written to the output string. Then, the low 4 bits of the current character are converted to a hexadecimal character and written to the output string. Finally, `pos_in` is incremented to process the next character.\n\n-- REGION Final Processing\n   After the loop ends, the last character of the output string is set to 0, indicating the end of the string.\n\n- Summary\nThis function processes each character of the input string by converting it into URL-encoded format. Valid URL characters are directly copied to the output string, while non-valid characters are converted into the form of `%` followed by two hexadecimal digits. The output string is terminated with a 0 to mark its end.", "name": "URL_ENCODE"}