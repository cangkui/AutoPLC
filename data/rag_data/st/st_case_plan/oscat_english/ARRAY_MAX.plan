Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis function, named `ARRAY_MAX`, is used to calculate the maximum value in an array of real numbers. It takes a pointer to the array and the size of the array as inputs, and returns the maximum value in the array.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables:\n   - `pt`: A pointer to an array of real numbers.\n   - `size`: The size of the array in bytes.\n - Internal variables:\n   - `i`: An index variable used for looping.\n   - `stop`: Used to determine the end position of the loop.\n\n- Main Logic Section\n-- REGION Initialization and Calculation\n   - First, calculate the end position `stop` of the loop. The formula is `(size - SIZEOF(pt)) / SIZEOF(pt)`, where `SIZEOF(pt)` is the size of the pointer. The purpose of this formula is to convert the array size from bytes to the number of elements.\n   - Initialize `array_max` to the first element of the array, `pt^[0]`.\n   - Use a `FOR` loop to traverse the array starting from the second element. In each iteration, check if the current element is greater than `array_max`. If so, update `array_max` to the value of the current element.\n   - After the loop ends, the function returns `array_max`, which is the maximum value in the array.\n\n-- REGION Loop Completion\n   - Once the loop completes, the function returns `array_max`, which is the maximum value in the array.", "name": "ARRAY_MAX"}