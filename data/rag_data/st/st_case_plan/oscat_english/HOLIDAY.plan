Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  The function block named `HOLIDAY` is used to determine whether a given date is a holiday and returns the holiday name based on the input language setting. It supports fixed holidays, Easter-based holidays, and weekly fixed holidays (e.g., Friday, Saturday, Sunday). Additionally, it allows users to customize whether to treat Fridays, Saturdays, and Sundays as holidays via input parameters.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: `DATE_IN` (input date), `LANGU` (language setting), `FRIDAY` (whether to treat Friday as a holiday), `SATURDAY` (whether to treat Saturday as a holiday), `SUNDAY` (whether to treat Sunday as a holiday).\n  - Input/output variables: `HOLIDAYS` (holiday data array, containing holiday names, months, dates, etc.).\n  - Constants: `SIZE` (maximum index value of the holiday array).\n  - Output variables: `Y` (whether it is a holiday), `NAME` (holiday name).\n  - Internal variables: `last_active` (last processed date), `ostern` (Easter date), `i` (loop index), `jahr` (year), `x_date` (temporary date), `lx` (language index), `wdx` (day-of-week index).\n\n- Main Logic\n  -- REGION Initialization\n    First, check if the input date `DATE_IN` matches the last processed date `last_active`. If they are the same, return immediately to avoid reprocessing. Otherwise, update `last_active` to the current input date.\n\n  -- REGION Language Setting\n    Based on the input language parameter `LANGU`, set the language index `lx`. If `LANGU` is 0, use the default language; otherwise, use the smaller value between `LANGU` and the maximum language value.\n\n  -- REGION Year and Easter Calculation\n    Extract the year `jahr` from the input date `DATE_IN` and calculate the Easter date `ostern` for that year. Also, determine the day of the week `wdx` for the input date.\n\n  -- REGION Holiday Check\n    Use a loop to iterate through the holiday array `HOLIDAYS` and check if the input date is a holiday:\n    - If the holiday's `USE` value is 1 and `MONTH` is greater than 0, it indicates a fixed-date holiday. Construct the holiday date `x_date` using the `SET_DATE` function and compare it with the input date `DATE_IN`. If they match, set the output `Y` to `TRUE` and return the holiday name `NAME`.\n    - If the holiday's `USE` value is 1 and `MONTH` is 0, it indicates an Easter-based holiday. Calculate the holiday date using the `DATE_ADD` function and compare it with `DATE_IN`. If they match, set `Y` to `TRUE` and return `NAME`.\n    - If the holiday's `USE` value is negative, it indicates a weekly fixed holiday (e.g., Friday, Saturday, Sunday). Check if the input date's day of the week matches the holiday's `USE` value and ensure the input date falls within the week before the holiday. If matched, set `Y` to `TRUE` and return `NAME`.\n\n  -- REGION Weekend Holiday Check\n    If the input date is not a holiday but meets any of the following conditions, treat it as a weekend holiday:\n    - Friday and `FRIDAY` is `TRUE`.\n    - Saturday and `SATURDAY` is `TRUE`.\n    - Sunday and `SUNDAY` is `TRUE`.\n    If it is a weekend holiday, set `Y` to `TRUE` and return the weekend name `NAME` based on the language index `lx`. Otherwise, set `NAME` to an empty string.\n\n- Output\n  The function block outputs:\n  - `Y`: Indicates whether the input date is a holiday.\n  - `NAME`: Represents the holiday name. If the input date is not a holiday, `NAME` is an empty string.", "name": "HOLIDAY"}