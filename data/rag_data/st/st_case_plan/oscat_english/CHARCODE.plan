Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This function block, named `CHARCODE`, is used to convert an input string into its corresponding character code (ASCII code). If the input string has a length of 1, it directly returns its character code. If the input string is longer than 1 character, it treats the string as an HTML entity (e.g., `&amp;`) and attempts to find the corresponding character code.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variable: `STR`, of type `STRING[10]`, representing the input string.\n  - Internal variables:\n    - `found`, of type `STRING[1]`, used to store the found character.\n    - `search`, of type `STRING[10]`, used to store the search string.\n    - `pos`, of type `INT`, used to store the position of the character in the string.\n    - `i`, of type `INT`, used for loop counting.\n\n- Main Logic\n  -- REGION Main Logic\n    1. **Case when input string length is 1**:\n       - If the input string has a length of 1, the `CODE` function is used to obtain the ASCII code of the character, which is then assigned to `CHARCODE`.\n    2. **Case when input string length is greater than 1**:\n       - First, the input string is concatenated with `&` and `;` to form an HTML entity-like format (e.g., `&amp;`), which is stored in the `search` variable.\n       - Then, a `WHILE` loop is used to search for a matching entity in the `setup.CHARNAMES` array. `setup.CHARNAMES` is a predefined array containing common HTML entities and their corresponding characters.\n       - The loop starts with `i = 0` and increments `i` each iteration until a match is found or `i` reaches 3 (up to 4 attempts).\n       - If a matching entity is found, the `MID` function is used to extract the corresponding character, which is stored in the `found` variable.\n       - Finally, the `CODE` function is used to obtain the ASCII code of the `found` character, which is then assigned to `CHARCODE`.\n    3. **Default case**:\n       - If the input string is empty or does not meet the above conditions, no action is taken, and `CHARCODE` remains undefined (default value).", "name": "CHARCODE"}