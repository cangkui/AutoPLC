Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis code defines a function named `FACT` to calculate the factorial of a given integer. The function retrieves the result by looking up a predefined factorial table. If the input value is outside the valid range, it returns `-1`.\n\n- Variable Definitions\nThe code defines two types of variables:\n - Input variable: `X`, representing the integer for which the factorial is to be calculated.\n - Temporary variables: No explicit definitions, but it uses the `math.FACTS` array to store predefined factorial values.\n\n- Main Logic\n -- REGION Main Logic\n    This section contains the core logic of the function. First, it checks whether the input value `X` falls within the valid range (i.e., between `0` and `12`). If it does, the function retrieves and returns the corresponding factorial value from the predefined table `math.FACTS`. If the input value is outside the valid range, it returns `-1` to indicate an invalid input.\n\n    - Valid Input Handling:\n        If `X` is between `0` and `12`, the function directly returns the corresponding factorial value via `math.FACTS[X]`. Here, it is assumed that `math.FACTS` is a predefined array storing factorial values from `0` to `12`.\n\n    - Invalid Input Handling:\n        If `X` is not within the range of `0` to `12`, the function returns `-1`, indicating an invalid input. This approach prevents the function from returning incorrect or unreasonable results.\n\n- Output Result\nThe function returns an integer of type `DINT`. If the input is valid, it returns the corresponding factorial value; if the input is invalid, it returns `-1`.", "name": "FACT"}