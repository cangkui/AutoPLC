Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis code is a function block written in SCL, named 'SELECT_8', designed to activate one of eight outputs. It controls the current state through input signals (such as set, move up, move down, and reset) and activates the corresponding output based on the state.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables: Enable (E), Set (SET), Input (IN), Move Up (UP), Move Down (DN), Reset (RST).\n - Output variables: 8 Boolean outputs (Q0-Q7) and the current state (STATE).\n - Internal variables: Used to record the previous cycle's Move Up (last_up) and Move Down (last_dn) signals.\n\n- Main Logic Section\n-- REGION State Update\n   This region updates the current state based on input signals. First, if the reset signal (RST) is true, the state is reset to 0. If the set signal (SET) is true, the state is set to the input value (IN). If a move-up signal (UP) is detected and it was not detected in the previous cycle (edge detection), the state is incremented by 1, but not exceeding 7. If a move-down signal (DN) is detected and it was not detected in the previous cycle (edge detection), the state is decremented by 1, but not below 0. Finally, the internal variables (last_up and last_dn) are updated to record the current state of the move-up and move-down signals.\n\n-- REGION Output Update\n   This region updates the outputs based on the current state and the enable signal (E). First, all outputs (Q0-Q7) are initialized to false (FALSE). If the enable signal (E) is true, the corresponding output is activated based on the current state:\n   - State 0: Activate Q0.\n   - State 1: Activate Q1.\n   - State 2: Activate Q2.\n   - State 3: Activate Q3.\n   - State 4: Activate Q4.\n   - State 5: Activate Q5.\n   - State 6: Activate Q6.\n   - State 7: Activate Q7.\n\n- Summary\nThis function block implements the selection of one active output from eight through simple logic. It supports adjusting the current state via set, move-up, move-down, and reset signals, and activates the corresponding output based on the state and enable signal. The code is clear, concise, and easy to understand and maintain.", "name": "SELECT_8"}