Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  The function `POLYNOM_INT` is used to compute polynomial interpolation. Given a set of points `XY` and an input value `X`, it calculates and returns the interpolated result using Newton's interpolation method.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables:\n    - `X`: The value at which interpolation is performed.\n    - `XY`: A 2D array storing the coordinates (x, y) of known points.\n    - `Pts`: The number of known points.\n  - Internal variables:\n    - `I` and `J`: Integer variables used for loop control.\n    - `stop`: A condition to control the termination of inner loops.\n\n- Main Logic\n  -- REGION Initialization\n    First, the value of `Pts` is capped at a maximum of 5 (via `MIN(pts, 5)`) to ensure it does not exceed the bounds of the `XY` array.\n\n  -- REGION Compute Divided Differences\n    A nested loop is used to compute the divided differences, which is the core step of Newton's interpolation method.\n    - The outer loop (`i`) runs from 1 to `Pts`, controlling the order of divided differences.\n    - The inner loop (`j`) runs from `Pts` to `i + 1`, iteratively updating the divided differences.\n    - Formula: `XY[j,1] := (XY[j,1] - XY[j-1,1]) / (XY[j,0] - XY[j-i,0])`, computing and storing the divided differences.\n\n  -- REGION Compute Interpolation Result\n    A single loop is used to calculate the final interpolated result.\n    - The loop runs from `Pts` to 1, incrementally accumulating the interpolation result.\n    - Formula: `POLYNOM_INT := POLYNOM_INT * (X - XY[i,0]) + XY[i,1]`, computing the final value using Newton's interpolation formula.\n\n  -- REGION Return Result\n    Finally, the function returns the computed interpolation result `POLYNOM_INT`.", "name": "POLYNOM_INT"}