Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThe function is named `HTML_DECODE` and is used to decode strings containing HTML entity encodings. It converts HTML entities (such as `&amp;`, `&#x20;`, etc.) into their corresponding characters and returns the decoded string.\n\n- Variable Definitions\nThe code defines the following types of variables:\n  - Input variable: `IN`, of type `STRING`, representing the string to be decoded.\n  - Local variables:\n    - `pos`: Type `INT`, used to store the starting position of the current HTML entity (the position of `&`).\n    - `end`: Type `INT`, used to store the ending position of the HTML entity (the position of `;`).\n    - `tmp`: Type `STRING(10)`, used to temporarily store the extracted HTML entity portion.\n    - `code`: Type `STRING(1)`, used to store the decoded character.\n\n- Main Logic\n  -- REGION Initialization\nThe function first assigns the input string `IN` to the output variable `HTML_DECODE` as the initial value.\n\n  -- REGION Finding HTML Entities\nIt uses the `FIND` function to locate the first occurrence of `&` in the string and stores it in `pos`. If `&` is found (i.e., `pos > 0`), it enters the loop for processing.\n\n  -- REGION Processing HTML Entities\nWithin the loop, based on the position of `&`, it extracts the HTML entity portion into `tmp` and processes it further:\n    - If `tmp` starts with `#x` or `#X`, it indicates a hexadecimal-encoded HTML entity (e.g., `&#x20;`):\n      1. Extracts the hexadecimal value portion.\n      2. Uses `OSCAT_BASIC.HEX_TO_DWORD` to convert the hexadecimal value to a DWORD type.\n      3. Uses `OSCAT_BASIC.CHR_TO_STRING` to convert the DWORD into the corresponding character.\n      4. Uses the `REPLACE` function to substitute the HTML entity with the decoded character.\n    - If `tmp` starts with `#`, it indicates a decimal-encoded HTML entity (e.g., `&#32;`):\n      1. Extracts the decimal value portion.\n      2. Uses `STRING_TO_INT` to convert the string to an integer.\n      3. Uses `OSCAT_BASIC.CHR_TO_STRING` to convert the integer into the corresponding character.\n      4. Uses the `REPLACE` function to substitute the HTML entity with the decoded character.\n    - Otherwise, it indicates a named entity (e.g., `&amp;`):\n      1. Extracts the entity name portion.\n      2. Uses `OSCAT_BASIC.CHARCODE` to convert the entity name into the corresponding character.\n      3. Uses the `REPLACE` function to substitute the HTML entity with the decoded character.\n\n  -- REGION Continuing to Find the Next HTML Entity\nUses the `OSCAT_BASIC.FINDP` function to locate the next occurrence of `&` and updates `pos`. If found, the loop continues; otherwise, it exits.\n\n  -- REGION Returning the Decoded String\nAfter the loop ends, it returns the decoded string `HTML_DECODE`.\n\n- Summary\nThis function decodes HTML entities by locating and converting them into readable characters. It supports three types of HTML entities: hexadecimal-encoded, decimal-encoded, and named entities. By processing all entities in a loop, it ultimately returns the fully decoded string.", "name": "HTML_DECODE"}