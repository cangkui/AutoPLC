Natural Language Requirements:  
```json
{
  "variables": [],
  "instructions": [],
  "planning": "- Overview\nThe function block `TN_SC_WRITE` is used to write a string to a specified position on the screen and supports setting character color attributes. It calculates offsets to write characters one by one into the screen buffer and updates color attributes when necessary.\n\n- Variable Definitions\nThe code defines the following types of variables:\n  - Internal variables: `bo_Color` (Boolean, determines whether color needs to be set), `in_Offset` (integer, calculates the offset of characters in the screen buffer), `in_Char_Index` (integer, index for iterating through the string), `in_String_Length` (integer, stores the length of the string).\n  - Input variables: `Iin_Y` (integer, screen row number), `Iin_X` (integer, screen column number), `Iby_ATTR` (byte, character color attribute), `Ist_STRING` (string, the string to be written).\n  - InOut variables: `Xus_TN_SCREEN` (user-defined type `us_TN_SCREEN`, represents the screen buffer containing character and color data).\n\n- Main Logic\n-- REGION Initialization and Input Validation\n   - First, the length of the input string is calculated and stored in `in_String_Length`.\n   - The `TN_SC_XY_ERROR` function is called to check if the string exceeds the screen boundaries. If it does, the function returns immediately without executing further logic.\n   - The update flag `bya_Line_Update` for the corresponding row in the screen buffer is set to `TRUE`, indicating that the row needs to be updated.\n   - The starting offset `in_Offset` of the string in the screen buffer is calculated using the formula `(Iin_Y * 80) + Iin_X` (assuming a screen width of 80 columns).\n   - Determines whether color attributes need to be set. If `Iby_ATTR` is not `BYTE#00`, `bo_Color` is set to `TRUE`.\n\n-- REGION String Writing and Color Setting\n   - A `FOR` loop iterates through each character in the string:\n     - If `bo_Color` is `TRUE`, the color attribute `Iby_ATTR` is written to the corresponding position in the `bya_COLOR` array of the screen buffer.\n     - The `OSCAT_BASIC.CODE` function retrieves the ASCII code of the current character in the string and writes it to the corresponding position in the `bya_CHAR` array of the screen buffer.\n     - The offset `in_Offset` is incremented to process the next character.\n\n-- REGION Final Processing\n   - The `in_EOS_Offset` (End of String Offset) in the screen buffer is set to the current offset, marking the end position of the written string.",
  "name": "TN_SC_WRITE"
}
```