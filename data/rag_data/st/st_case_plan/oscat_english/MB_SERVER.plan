Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis code implements a functional block named `MB_SERVER`, designed to handle communication using the Modbus protocol. It exchanges data with clients via TCP/IP or UDP protocols, supporting various Modbus function codes (Function Codes), including operations like reading and writing coils, registers, and more. The block also incorporates error handling and timeout mechanisms.\n\n- Variable Definitions\nThe code defines the following categories of variables:\n  - Input/Output Variables: `IP_C` (IP configuration), `S_BUF` (send buffer), `R_BUF` (receive buffer), `VMAP` (virtual mapping table), `DATA` (data storage area).\n  - Input Variables: `DATA_SIZE` (data size), `ENABLE` (enable signal), `UDP` (UDP mode flag).\n  - Output Variables: `ERROR` (error code).\n  - Internal Variables: `MB_VMAP` (Modbus virtual mapping), `adr1`, `adr2` (addresses), `points`, `points2` (point counts), `coils` (coil states), `mask` (bitmask), `idx1`, `idx2` (indices), `bit_pos` (bit position), `count` (counter), `fc` (function code), `i` (loop variable), `state` (state machine state), `ip_state` (IP state), `ip_id` (IP ID), `IP_FIFO` (IP FIFO), `w_tmp` (temporary word), `last_cycle` (previous cycle time), `tx` (current time), `t` (timer), `ip_error` (IP error flag).\n\n- Main Logic Section\n-- REGION Initialization and Time Management\n   1. **Time Calculation**: First, the current time `tx` is retrieved and compared with the previous cycle time `last_cycle` to compute the time difference. Then, the timeout values for each entry in the virtual mapping table `VMAP` are updated. If the timeout value for an entry is greater than 0, the time difference is added to it.\n   2. **IP Error Detection**: Checks if `IP_C.ERROR` is greater than 0. If true, `ip_error` is set to indicate an IP configuration error.\n\n-- REGION State Machine\nThe state machine is the core logic of the functional block, divided into multiple states, each with specific functions:\n   - **State 00 (Initial State)**:\n     - Function: Waits for the enable signal.\n     - Logic: If `ENABLE` is true, transitions to State 10 and sets `ip_state` to 1, indicating the start of IP configuration.\n   - **State 10 (IP Configuration Wait)**:\n     - Function: Waits for IP configuration to complete.\n     - Logic: If `ip_state` is 3 (indicating IP configuration is complete), performs the following:\n       - Sets the IP port `IP_C.C_PORT` to 0.\n       - Sets the IP address `IP_C.C_IP` to 0.\n       - Selects the IP mode based on the `UDP` flag (4 for UDP, 5 for TCP).\n       - Resets the IP timer `IP_C.TIME_RESET`.\n       - Enables IP communication `IP_C.C_ENABLE`.\n       - Enables IP observation mode `IP_C.R_OBSERVE`.\n       - Transitions to State 20 to prepare for Modbus request processing.\n   - **State 20 (Modbus Request Processing)**:\n     - Function: Processes Modbus requests from clients.\n     - Logic:\n       1. **Error Check**: Proceeds only if there is no IP error (`ip_error` is false), the send buffer `S_BUF.SIZE` is empty, and the receive buffer `R_BUF.SIZE` is greater than 6.\n       2. **Request Parsing**:\n          - Verifies if the receive buffer size matches the request data length.\n          - If no errors, copies the first 14 bytes of the receive buffer to the send buffer.\n          - Parses the function code `fc`, starting address `adr1`, and point count `points`.\n       3. **Virtual Mapping Handling**:\n          - Calls the `MB_VMAP` functional block to map virtual addresses to physical addresses and checks for successful mapping.\n          - If mapping succeeds, executes the corresponding operation based on the function code.\n       4. **Function Code Processing**:\n          - **Function Codes 1-2 (Read/Write Coils)**:\n            - Reads or writes coil states one by one and stores the results in the send buffer.\n          - **Function Codes 3-4 (Read/Write Registers)**:\n            - Reads or writes register values one by one and stores the results in the send buffer.\n          - **Function Code 5 (Write Single Coil)**:\n            - Writes a single coil based on the receive buffer value and updates the send buffer.\n          - **Function Code 6 (Write Single Register)**:\n            - Writes a single register based on the receive buffer value and updates the send buffer.\n          - **Function Code 15 (Write Multiple Coils)**:\n            - Writes multiple coils based on the receive buffer value and updates the send buffer.\n          - **Function Code 16 (Write Multiple Registers)**:\n            - Writes multiple registers based on the receive buffer value and updates the send buffer.\n          - **Function Code 22 (Mask Write Register)**:\n            - Writes a register using a bitmask and value from the receive buffer and updates the send buffer.\n          - **Function Code 23 (Read/Write Multiple Registers)**:\n            - Reads multiple registers first, then writes multiple registers, and updates the send buffer.\n       5. **Error Handling**:\n          - If an error occurs during processing, sets the error flag and modifies the error code in the send buffer.\n       6. **Send Buffer Update**:\n          - Updates the send buffer size and checksum, preparing the response for transmission.\n     - **Timeout Handling**:\n       - If an IP error persists for more than 2 seconds, resets the IP configuration and returns to State 00.\n     - **Disable Handling**:\n       - If `ENABLE` is false or a timeout occurs, sets `ip_state` to 4 (disabled state) and returns to State 00.\n\n-- REGION IP FIFO Handling\n   1. **Function**: Calls the `IP_FIFO` functional block to manage the state and ID of the IP FIFO.\n   2. **Logic**: Based on `ip_state` and `ip_id`, manages the input/output of the IP FIFO to ensure smooth IP communication.\n\n- Summary\nThis functional block implements Modbus protocol communication logic via a state machine, supporting multiple function codes and error handling mechanisms. It exchanges data with clients over TCP/IP or UDP protocols and includes timeout and disable features to ensure system stability and reliability. The state machine design enables efficient handling of various Modbus requests and quick recovery in case of errors.", "name": "MB_SERVER"}