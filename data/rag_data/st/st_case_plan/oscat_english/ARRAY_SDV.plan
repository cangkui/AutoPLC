Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code defines a function named `ARRAY_SDV`, which is used to calculate the standard deviation (Standard Deviation) of all elements in an array. Standard deviation is a measure of data dispersion and is commonly used in statistical analysis.\n\n- Variable Definitions\n  The code defines two types of variables:\n  - Input variables:\n    - `pt`: A pointer to a `REAL`-type array with a maximum length of 32,000.\n    - `size`: A `UINT`-type variable representing the actual number of elements used in the array.\n  - Output variable:\n    - `ARRAY_SDV`: The return value of the function, of type `REAL`, representing the calculated standard deviation.\n\n- Main Logic\n  -- REGION Calculating Standard Deviation\n    The function's logic is very straightforward. It directly calls the `array_var` function to calculate the variance of the array and then uses the `SQRT` function to take the square root of the variance, yielding the standard deviation. The formula for standard deviation is:\n    \\[\n    \\text{SD} = \\sqrt{\\text{Variance}}\n    \\]\n    Here, the `array_var` function is responsible for calculating the variance of the array, and the `SQRT` function computes the square root.\n\n    Finally, the function assigns the calculated standard deviation to `ARRAY_SDV` and returns it.\n\n- Notes\n  - The specific implementation of the `array_var` function is not provided in the code, but it can be inferred that it is a function for calculating variance.\n  - Since `pt` is a pointer, it is essential to ensure that the passed array pointer and size are valid when calling `array_var`; otherwise, runtime errors may occur.\n  - The function assumes that the input array is valid and that the value of `size` does not exceed the actual length of the array.", "name": "ARRAY_SDV"}