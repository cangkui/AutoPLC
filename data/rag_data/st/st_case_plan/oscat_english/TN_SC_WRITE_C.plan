Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code defines a function block `TN_SC_WRITE_C` for writing strings to a text screen. It achieves this by calling another function block `TN_SC_WRITE` to perform the actual write operation. The code primarily handles input parameter processing and internal function block invocation.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Internal function block instance: `FB_TN_SC_WRITE`, used to execute the actual text screen write operation.\n  - Input variables: `Iin_Y` (Y-coordinate), `Iin_X` (X-coordinate), `Iby_ATTR` (attribute byte), `Ist_STRING` (string to be written), `Iin_LENGTH` (string length), `Iin_OPTION` (option parameter).\n  - InOut variable: `Xus_TN_SCREEN`, representing the state or data of the text screen.\n\n- Main Logic Section\n  -- REGION Main Logic\n     - The core logic involves calling the `FB_TN_SC_WRITE` function block and passing the input parameters to it.\n     - The `Ist_STRING` parameter is processed using the `OSCAT_BASIC.FIX` function to ensure the string length and format meet requirements. The `FIX` function pads the string to a specified length using a designated fill character (here, space `BYTE#32`).\n     - The processed string, coordinates, attribute byte, and screen state are passed to `FB_TN_SC_WRITE`, which performs the actual write operation.\n     - The primary purpose of this function block is to write the input string to the specified position on the text screen with the given attributes.\n\n- Output Results\n  - This function block does not have explicit output variables, but it modifies the text screen's state or content via the InOut parameter `Xus_TN_SCREEN`.\n  - After invoking `FB_TN_SC_WRITE`, the text screen will display the corresponding string based on the input parameters.", "name": "TN_SC_WRITE_C"}