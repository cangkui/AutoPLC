Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code is a function block written in SCL, named 'TELNET_PRINT', designed to send text to a remote device via the TELNET protocol. It supports text formatting such as color, positioning, auto-wrapping, and controls the sending process using a state machine.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input/Output Variables: IP_C (a structure for network communication), S_BUF (network buffer)\n  - Input Variables: TEXT (text to send), ENABLE (enable signal), SEND (send signal), OPTION (formatting options), BACK_COLOR (background color), FRONT_COLOR (foreground color), X_POS (X-coordinate), Y_POS (Y-coordinate), PORT (port number)\n  - Output Variables: READY (ready signal), DONE (completion signal)\n  - Internal Variables: last_fc (last foreground color), state (state machine state), x (buffer index), ip_state (IP communication state), ip_id (IP communication ID), IP_FIFO (FIFO structure for IP communication), init (initialization flag), b0_screen_clear (clear screen flag), b1_autowrap (auto-wrap flag), b2_color (color flag), b3_cr_lr (carriage return and line feed flag), b7_no_flush (no buffer flush flag)\n\n- Main Logic\n  -- REGION Initialization\n     - **READY**: Determines if the network communication is ready by checking the value of IP_C.C_STATE (whether it is greater than 127). If ready, READY outputs TRUE.\n     - **DONE**: Initialized as FALSE, indicating the send operation is not yet complete.\n     - **state**: The state machine's initial state is set to 0.\n\n  -- REGION State 0\n     - If **ENABLE** input is TRUE, indicating the function block is enabled, the state machine transitions from state 0 to state 10, and initializes the IP communication state **ip_state** to 1. The function block then prepares for network communication.\n\n  -- REGION State 10\n     - If **ip_state** is 3, indicating IP communication is ready, the following actions are performed:\n       - Set **IP_C.C_PORT** to the specified port number (default is 23).\n       - Set **IP_C.C_IP** to 0 (default IP address).\n       - Set **IP_C.C_MODE** to 4 (communication mode).\n       - Reset **IP_C.TIME_RESET** to TRUE to ensure the timer restarts.\n       - Enable IP communication by setting **IP_C.C_ENABLE** to TRUE.\n       - Disable observation mode by setting **IP_C.R_OBSERVE** to FALSE.\n       - Transition the state machine to state 20 to prepare for data sending.\n\n  -- REGION State 20\n     - **Error Handling**: If **IP_C.ERROR** is greater than 0, indicating an error, reset the timer **IP_C.TIME_RESET** to TRUE.\n     - **Disable Handling**: If the network buffer **S_BUF.SIZE** is 0 and **ENABLE** is FALSE, indicating the function block is disabled, set **ip_state** to 4, disable IP communication (set **IP_C.C_ENABLE** to FALSE), and transition the state machine back to state 0.\n     - **Communication Not Ready**: If **IP_C.C_STATE** is 1, indicating communication is not ready, reset the **init** flag to FALSE.\n     - **Communication Ready and Uninitialized**: If **IP_C.C_STATE** is 254 and **init** is FALSE, indicating communication is ready but uninitialized, perform the following:\n       - Set **init** to TRUE, indicating initialization is complete.\n       - Parse and set formatting flags based on the **OPTION** value:\n         - **b0_screen_clear**: Clear screen (bit 0 of OPTION).\n         - **b1_autowrap**: Auto-wrap (bit 1 of OPTION).\n         - **b2_color**: Enable color (bit 2 of OPTION).\n         - **b3_cr_lr**: Add carriage return and line feed at the end of text (bit 3 of OPTION).\n         - **b7_no_flush**: Do not flush buffer (bit 7 of OPTION).\n       - Build TELNET command sequences:\n         - Send ESC sequences (BYTE#16#1B, BYTE#16#5B, BYTE#16#3F, BYTE#16#37) to set terminal mode.\n         - Send corresponding commands (BYTE#16#6C or BYTE#16#68) based on **b1_autowrap**.\n         - If **b0_screen_clear** is TRUE, send the clear screen command (BYTE#16#1B, BYTE#16#5B, BYTE#16#32, BYTE#16#4A).\n         - If **b2_color** is TRUE, send color setting commands (BYTE#16#1B, BYTE#16#5B, BYTE#16#30, BYTE#16#3B, BYTE#16#33, BYTE#16#3B, BYTE#16#34, BYTE#16#6D) and set foreground/background colors based on **FRONT_COLOR** and **BACK_COLOR**.\n\n  -- REGION Data Sending\n     - **Buffer Check**: If the buffer lacks space for the text or it hasn't been sent, set the buffer size **S_BUF.SIZE** to the current index **x + 1** and reset the index **x** to -1.\n     - **Send Handling**: If **SEND** is TRUE, indicating data needs to be sent, perform the following:\n       - **Color Handling**: If **b2_color** is TRUE and **FRONT_COLOR** differs from the last color **last_fc**, send color setting commands and update **last_fc**.\n       - **Position Handling**: If **X_POS** and **Y_POS** are greater than 0, send cursor positioning commands (BYTE#16#1B, BYTE#16#5B, Y_POS, BYTE#16#3B, X_POS, BYTE#16#48).\n       - **Text Handling**: If **TEXT** length is greater than 0, write the text to the buffer.\n       - **Carriage Return and Line Feed Handling**: If **b3_cr_lr** is TRUE, add carriage return (BYTE#16#0D) and line feed (BYTE#16#0A) at the end of the text.\n       - **Completion Flag**: Set the **DONE** output to TRUE, indicating the send is complete.\n       - **Buffer Flush**: If **b7_no_flush** is TRUE, indicating no buffer flush, set the buffer size **S_BUF.SIZE** to the current index **x + 1** and reset the index **x** to -1.\n\n  -- REGION IP_FIFO\n     - Call the **IP_FIFO** function block to handle the IP communication FIFO queue, updating the IP communication state **ip_state** and ID **ip_id**.\n\n- Summary\n  This function block controls the TELNET text sending process via a state machine, supporting various formatting options (e.g., color, positioning, auto-wrapping) and enabling remote sending through the IP communication module. The state machine design ensures sequential and reliable execution of the sending process.", "name": "TELNET_PRINT"}