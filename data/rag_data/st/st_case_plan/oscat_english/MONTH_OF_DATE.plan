Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code is an SCL function named 'MONTH_OF_DATE', designed to extract the month from a given date. It calculates the day of the year for the given date and uses formulas based on leap year conditions to derive the month.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variable: IDATE (date type)\n  - No output variables (the function directly returns the result)\n\n- Main Logic\n  -- REGION Calculate Month\n    1. First, the function calls the `DAY_OF_YEAR` function to get the day of the year for the given date and assigns it to `MONTH_OF_DATE`.\n    2. Then, the function determines the month through conditional checks:\n       - If `MONTH_OF_DATE` is less than 32, it means the date is in January, so `MONTH_OF_DATE` is directly set to 1.\n       - If the date is in a leap year (determined by the `LEAP_OF_DATE` function), the formula `(MONTH_OF_DATE * 53 + 1668) / 1623` is used to calculate the month.\n       - If the date is not in a leap year, the formula `(MONTH_OF_DATE * 53 + 1700) / 1620` is used to calculate the month.\n    3. Finally, the function returns the calculated month value.\n\n  Notes:\n  - The `DAY_OF_YEAR` function is used to get the day of the year for the given date.\n  - The `LEAP_OF_DATE` function is used to determine if the given date is in a leap year.\n  - The formulas `(MONTH_OF_DATE * 53 + 1668) / 1623` and `(MONTH_OF_DATE * 53 + 1700) / 1620` are approximate calculations based on specific algorithms to convert days into months.", "name": "MONTH_OF_DATE"}