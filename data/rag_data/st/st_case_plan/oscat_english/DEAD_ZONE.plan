Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\nThis is a simple function named `DEAD_ZONE`, designed to implement dead zone processing. Dead zone processing is a common control strategy used to ignore minor fluctuations in input signals within a certain range, thereby reducing the impact of noise or unnecessary small variations on the system.\n\n- Variable Definitions\nThe code defines two types of variables:\n  - Input variables: `X` and `L`, both of `REAL` type. `X` is the input signal, and `L` is the dead zone range.\n  - Output variable: The function's return value `DEAD_ZONE`, of `REAL` type, represents the output value after dead zone processing.\n\n- Main Logic\n  -- REGION Dead Zone Processing\nThe core logic of the function processes the input signal `X` with a dead zone:\n    - If the absolute value of `X` is greater than the dead zone range `L`, the function returns the value of `X`, indicating the signal has exceeded the dead zone and should be processed.\n    - If the absolute value of `X` is less than or equal to the dead zone range `L`, the function returns `0.0`, indicating the signal is within the dead zone and should be ignored.\n  This logic effectively filters out minor fluctuations in the input signal while preserving valid signals that exceed the dead zone range.", "name": "DEAD_ZONE"}