Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  The function `SCALE_B8` is designed to perform linear scaling on eight BYTE-type input values and ultimately output a REAL-type result. The scaling process is based on the minimum and maximum values of each input, combined with the scaling factor `K` and the offset `O` for calculation.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: `in1` to `in8` are eight BYTE-type input values; `K` and `O` are REAL-type scaling factor and offset, respectively; `in1_min` to `in8_min` and `in1_max` to `in8_max` represent the minimum and maximum values for each input, defining their respective ranges.\n  - Output variable: `SCALE_B8` is the REAL-type output value representing the scaled result.\n\n- Main Logic Section\n  -- REGION Scaling Calculation\n     This region implements the core logic of the scaling calculation. First, each input value (`in1` to `in8`) undergoes linear scaling using the formula `(inX_max - inX_min) * inX`, where `X` ranges from 1 to 8. The eight scaled results are then summed and multiplied by a constant `0.003921569` (which is 1/255, used to normalize BYTE-type values to the range of 0 to 1). Next, the minimum values of all inputs (`in1_min` to `in8_min`) are summed to obtain a base value. Finally, the intermediate result is multiplied by the scaling factor `K`, and the offset `O` is added to produce the final output value `SCALE_B8`.\n\n  Formula Summary:\n  \\[\n  SCALE_B8 = \\left( \\sum_{i=1}^{8} (inX_{max} - inX_{min}) \\cdot inX \\cdot 0.003921569 + \\sum_{i=1}^{8} inX_{min} \\right) \\cdot K + O\n  \\]\n  Here, `X` ranges from 1 to 8.\n\n  The function's logic is straightforward and suitable for scenarios requiring uniform scaling and offset adjustments for multiple BYTE-type input values.", "name": "SCALE_B8"}