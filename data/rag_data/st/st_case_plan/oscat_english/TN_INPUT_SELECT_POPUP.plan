Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis code defines a function block `TN_INPUT_SELECT_POPUP` for handling input selection and display logic in a popup menu. It manages menu creation, updates, and selection operations by detecting the state of input control data. The function block internally uses several helper function blocks (such as `TN_INPUT_MENU_POPUP` and `TN_SC_WRITE`) to implement specific functionalities.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables: `in_index` (currently selected index), `in_Element_Count` (number of input data elements), `by_Cur_Key` (current key value), `by_Attr` (attribute value), `st_String` (string value).\n - Struct variables: `us_TN_MENU_POPUP` (popup menu state), `Xus_TN_SCREEN` (screen state), `Xus_TN_INPUT_CONTROL_DATA` (input control data).\n - Function block instances: `FB_TN_INPUT_MENU_POPUP` (for handling popup menu input), `FB_TN_SC_WRITE` (for screen write operations).\n\n- Main Logic Section\n-- REGION Popup Menu Creation and Selection Logic\n   This section handles the creation and selection logic of the popup menu. First, it checks whether the input control data has focus (`bo_Focus`). If it does, it retrieves the current key value (`by_Cur_Key`). If the popup menu is not active (`bo_Activ = FALSE`), it initializes menu-related parameters such as position (`in_X` and `in_Y`), attributes (`by_Attr_mF` and `by_Attr_oF`), menu text (`st_Menu_Text`), and sets the menu creation flag (`bo_Create`). If the current menu item (`in_Cur_Item`) is greater than 0, it sets it as the selected item in the input control data and marks the input as entered (`bo_Input_Entered`) and requiring an update (`bo_Update_Input`). If the popup menu is already active, it passes the current key value to the menu. Finally, it calls the `FB_TN_INPUT_MENU_POPUP` function block to handle the popup menu logic.\n\n-- REGION Input Data Update and Display Logic\n   This section handles the update and display logic of input data. First, it checks whether the input control data requires an update (`bo_Update_Input` or `bo_Update_All`). If a full update is needed (`bo_Update_All = TRUE`), it calculates the screen write position based on the title offsets (`in_Title_X_Offset` and `in_Title_Y_Offset`) and calls the `FB_TN_SC_WRITE` function block to write the title string to the screen. Then, it calculates the number of input data elements (`in_Element_Count`) and ensures the selected index is within a valid range. It retrieves the corresponding string based on the selected index and formats it using the `OSCAT_BASIC.FIX` function. Depending on the focus state, it sets the attribute value (`by_Attr`) and calls the `FB_TN_SC_WRITE` function block to write the formatted string to the screen. Finally, it updates the cursor position (`in_Cursor_X` and `in_Cursor_Y`) in the input control data and clears the update flags (`bo_Update_All` and `bo_Update_Input`).", "name": "TN_INPUT_SELECT_POPUP"}