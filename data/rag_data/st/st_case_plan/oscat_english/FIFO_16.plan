Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\nThis code implements a First-In-First-Out (FIFO) queue function block with a size of 16 DWORD-type data elements. The function block supports data writing, reading, and reset operations, and provides indicators for queue empty and full statuses.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables: Data input (Din), Enable (E), Read request (RD), Write request (WD), Reset (RST).\n - Output variables: Data output (Dout), Queue empty (EMPTY), Queue full (FULL).\n - Internal variables: FIFO array (fifo), Read pointer (pr), Write pointer (pw).\n - Constants: Queue size (n), fixed at 16.\n\n- Main Logic Section\n-- REGION Reset Logic\n   When the reset signal (RST) is true, perform the reset operation:\n   - Set the write pointer (pw) to the value of the read pointer (pr), effectively clearing the queue.\n   - Set the queue full flag (FULL) to false and the queue empty flag (EMPTY) to true.\n   - Set the data output (Dout) to 0, clearing the output data.\n\n-- REGION Enable Logic\n   When the enable signal (E) is true, perform the following operations:\n   - If the queue is not empty and the read request (RD) is true, read data from the FIFO array (fifo[pr]) to the data output (Dout), and increment the read pointer (pr) by 1 (using the INC1 function to ensure the pointer cycles within the range of 0 to n-1). Then update the queue empty (EMPTY) and full (FULL) flags.\n   - If the queue is not full and the write request (WD) is true, write the input data (Din) to the write pointer position in the FIFO array (fifo[pw]), and increment the write pointer (pw) by 1 (using the INC1 function to ensure the pointer cycles within the range of 0 to n-1). Then update the queue empty (EMPTY) and full (FULL) flags.\n\n-- REGION Pointer Management\n   Use the INC1 function to manage the increment operations of the read pointer (pr) and write pointer (pw), ensuring the pointers cycle within the range of 0 to n-1. When the read pointer equals the write pointer, the queue is empty; when the write pointer equals the read pointer, the queue is full.\n\n-- REGION Status Update\n   After each read or write operation, update the queue's empty (EMPTY) and full (FULL) statuses:\n   - After a read operation, if the read pointer equals the write pointer, the queue is empty (EMPTY = TRUE) and not full (FULL = FALSE).\n   - After a write operation, if the write pointer equals the read pointer, the queue is full (FULL = TRUE) and not empty (EMPTY = FALSE).", "name": "FIFO_16"}