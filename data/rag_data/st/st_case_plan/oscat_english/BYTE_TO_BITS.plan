Natural Language Requirement:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This is a simple function block `BYTE_TO_BITS` designed to split each bit of a byte (BYTE) into individual Boolean values (BOOL). Each Boolean value corresponds to a bit in the byte, from the least significant bit (B0) to the most significant bit (B7).\n\n- Variable Definitions\n  - Input Variable: `IN`, of type `BYTE`, represents the byte to be split.\n  - Output Variables: `B0` to `B7`, of type `BOOL`, represent each bit of the byte (from least to most significant bit).\n\n- Main Logic Section\n  -- REGION Bit Splitting Logic\n      This region assigns each bit of the input byte `IN` to its corresponding Boolean output variable. The specific logic is as follows:\n      - `B0 := IN.0;`: Assigns the least significant bit (bit 0) of the byte to `B0`.\n      - `B1 := IN.1;`: Assigns bit 1 of the byte to `B1`.\n      - `B2 := IN.2;`: Assigns bit 2 of the byte to `B2`.\n      - `B3 := IN.3;`: Assigns bit 3 of the byte to `B3`.\n      - `B4 := IN.4;`: Assigns bit 4 of the byte to `B4`.\n      - `B5 := IN.5;`: Assigns bit 5 of the byte to `B5`.\n      - `B6 := IN.6;`: Assigns bit 6 of the byte to `B6`.\n      - `B7 := IN.7;`: Assigns the most significant bit (bit 7) of the byte to `B7`.\n      In this way, each bit of the byte is extracted and stored in an independent Boolean variable, facilitating subsequent logic processing.", "name": "BYTE_TO_BITS"}