Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis functional block, named 'DLOG_STORE_FILE_CSV', is designed to log data into a CSV file. It supports both manual and automatic triggering for recording and handles file creation, data writing, and file closure operations. The block also includes error handling and file management capabilities.\n\n- Variable Definitions\nThe code defines the following categories of variables:\n - Input/output variables: Used for data transfer and state retention.\n - Input variables: Enable signal, trigger mode, trigger time, filename, date/time, delimiter, auto-close time.\n - Output variables: Error code, error type.\n - Internal variables: File server, file server data, network buffer, circular buffer, trigger flag, temporary variables, step counter, watchdog timer, auto-close timer, total bytes, etc.\n\n- Main Logic Section\n-- REGION Initialization and Trigger Detection\n   This section handles initialization logic and trigger detection. First, the input date/time (DTI) is compared with the previous date/time. If they differ, a new filename is generated by converting DTI to a string and appending it to the input filename. If the trigger time (TRIG_T) is ≥1 second, automatic triggering is calculated based on whether the seconds value of the date/time modulo (trigger time divided by 1000) equals zero. Additionally, this section checks the enable signal (ENABLE). If ENABLE is true and the block is uninitialized, relevant variables are set, including the auto-close enable flag (aw_enable), watchdog timer time (wd_time), and the previous filename (fn_last). If the maximum ID (X.ID_MAX) is 0, the add command (X.ADD_COM) and storage type (X.STORE_TYPE) are configured.\n\n-- REGION File Creation and Data Writing\n   This section manages file creation and data writing. First, the circular buffer (UCB) data string (D_STRING) is set based on the previous filename (fn_last). If the filename matches the remote filename for saved data (SAVE_DATA.FN_REM), the circular buffer header (D_HEAD) is set to a specific value (WORD#16#F201), and the add command (X.ADD_COM) is set to 0. Otherwise, the header is set to another value (WORD#16#F301), and the add command is set to 2. The circular buffer mode (D_MODE) is then set to 1, and the circular buffer block (UCB) processes the data. Next, the trigger flag (trig_tmp) is checked—it can be a rising edge from manual trigger (TRIG_M), an auto-trigger (trig_auto), or an add data request (X.ADD_DATA_REQ). If the enable signal is false or the filename changes, recording stops, and related variables are reset. If ENABLE is true, data is written to the file based on the trigger flag or auto-trigger flag, and the trigger counters (SAVE_DATA.TRIG_CNT and SAVE_DATA.TRIG_CNT_TOTAL) are updated.\n\n-- REGION Auto-Close and Buffer Processing\n   This section handles auto-close logic and buffer data processing. First, it checks if auto-close conditions are met. If so, the auto-close flag (aw_aktiv) is set to true, and the next step (step_2 := 10) is initiated. Otherwise, the watchdog timer (wd_ton) is started, and while the timer hasn't expired, circular buffer data is processed. If the circular buffer header (D_HEAD) exceeds a specific value (WORD#16#F000), the file server data (FSD) mode (MODE) and filename (FILENAME) are set, and the next step (step_2 := 20) begins. If the header equals a specific value (WORD#16#EE00), recording stops, and the next step (step_2 := 10) is triggered. If buffer data can be written to the network buffer (PT.BUFFER), it is written, and the total bytes (total_bytes) are updated. If the buffer is full, the next step (step_2 := 10) is initiated.\n\n-- REGION File Closure and Error Handling\n   This section manages file closure and error handling. If the network buffer (PT.BUFFER) contains data, the file server data (FSD) mode (MODE) is set to 2, the offset (OFFSET) to a specific value (UDINT#4294967294), and the network buffer size (PT.SIZE) to the current index (idx). The index (idx) is then reset to 0, and the next step (step_2 := 20) begins. If FSD mode is 0, the total bytes (total_bytes) are updated, and based on the stop recording flag (log_stop) or auto-close flag (aw_aktiv), FSD mode is set to 5, initiating the next step (step_2 := 30). If FSD mode remains 0, the stop recording flag triggers a new file signal (X.NEW_FILE_RTRIG), and related variables are reset. Finally, the file server block (FS) processes file operations, and error codes (ERROR_C) and types (ERROR_T) are set based on FSD or circular buffer status. If FSD reports an error, ERROR_C is set to the FSD error code, and ERROR_T is set to 1. If circular buffer data loss (BUF_DATA_LOST) > 0, ERROR_C is 2, and ERROR_T is 6. If circular buffer usage (BUF_USED_MAX) exceeds 90%, ERROR_C is 1, and ERROR_T is 6. Otherwise, both are set to 0.", "name": "DLOG_STORE_FILE_CSV"}