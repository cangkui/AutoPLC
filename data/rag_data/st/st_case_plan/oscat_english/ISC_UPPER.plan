Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\n  This code implements a function called `ISC_UPPER` to determine whether the input byte is an uppercase letter. The logic differs based on the `setup.EXTENDED_ASCII` flag. If `setup.EXTENDED_ASCII` is true, it supports uppercase letters in the extended ASCII character set; otherwise, it only supports uppercase letters in the standard ASCII character set.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variable: `IN`, of type `BYTE`, representing the character to be evaluated.\n  - Local variables: None.\n  - Constants: None.\n\n- Main Logic\n  -- REGION Main Logic\n    The core logic consists of a conditional check based on the value of `setup.EXTENDED_ASCII`:\n    - If `setup.EXTENDED_ASCII` is true, the function checks whether the input byte meets either of the following conditions:\n      1. Standard ASCII uppercase letter range (`IN > 64` and `IN < 91`).\n      2. Extended ASCII uppercase letter range (`IN > 191` and `IN < 223`), excluding `IN = 215` (since 215 is not an uppercase letter).\n    - If `setup.EXTENDED_ASCII` is false, the function only checks if the input byte falls within the standard ASCII uppercase letter range (`IN > 64` and `IN < 91`).\n    The result of this check is assigned to `ISC_UPPER` as the output of the function.", "name": "ISC_UPPER"}