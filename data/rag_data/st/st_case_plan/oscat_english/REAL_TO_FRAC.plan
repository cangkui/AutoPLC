Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\nThis code is a function block written in SCL, named 'REAL_TO_FRAC', designed to convert a real number (REAL) into a fraction (FRACTION). It employs a step-by-step approximation method to find the closest fraction to the given real number, with the denominator not exceeding a specified maximum value.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables: `X` (the real value to be converted) and `N` (the maximum value for the denominator).\n - Internal variables:\n   - `temp`: A temporary variable used to store intermediate calculation results.\n   - `sign`: Stores the sign of the input value (positive or negative).\n   - `X_gerundet`: The value of `X` rounded to the nearest integer.\n   - `X_ohne_Nachkomma`: The value of `X` with the fractional part removed.\n   - `Numerator` and `Denominator`: The current approximation's numerator and denominator.\n   - `Numerator_old` and `Denominator_old`: The numerator and denominator from the previous approximation.\n\n- Main Logic\n-- REGION Initialization\n   First, it checks if the input value `X` is negative. If so, it sets `sign` to `TRUE` and converts `X` to a positive number for subsequent calculations.\n\n-- REGION Approximation Algorithm\n   A `REPEAT` loop is used to iteratively approximate the closest fraction to `X`. In each iteration:\n   1. `X` is rounded to the nearest integer and stored in `X_gerundet`.\n   2. The numerator and denominator values are updated using the formulas:\n      - `numerator = numerator * X_gerundet + numerator_old`\n      - `denominator = denominator * X_gerundet + denominator_old`\n   3. It checks if `X` is already an integer (i.e., `X = X_ohne_Nachkomma`). If true, it verifies if the current denominator is less than or equal to `N`. If so, it stores the current numerator and denominator as the final result and exits the loop.\n   4. If `X` still has a fractional part, it updates `X` to `1.0 / (X - X_ohne_Nachkomma)` and continues the loop.\n   5. The loop continues until the denominator's value exceeds `N`.\n\n-- REGION Result Processing\n   After the loop ends, the final numerator's sign is determined based on the `sign` value. If `sign` is `TRUE`, the numerator is set to negative; otherwise, it remains positive. Finally, the resulting numerator and denominator are assigned to the function block's output variables `REAL_TO_FRAC.NUMERATOR` and `REAL_TO_FRAC.DENOMINATOR`.\n\n- Output\nThe function block returns a fraction with the numerator and denominator stored in `REAL_TO_FRAC.NUMERATOR` and `REAL_TO_FRAC.DENOMINATOR`, respectively. The numerator may be negative depending on the sign of the input value `X`, while the denominator is always positive and does not exceed the specified maximum value `N`.", "name": "REAL_TO_FRAC"}