Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code is a function block named 'HTML_ENCODE' designed to encode special characters in an input string into their corresponding HTML entities. For example, it encodes double quotes (\") as `&quot;`, less-than signs (<) as `&lt;`, etc. Additionally, if multibyte mode is enabled (M is true), it also encodes non-ASCII characters (bytes greater than 127) into their respective HTML entities.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: `IN` (input string) and `M` (multibyte mode flag).\n  - Internal variables:\n    - `pt_in` and `pt_out`: Pointers to the input and output strings, respectively.\n    - `pos_in` and `pos_out`: Represent the current positions in the input and output strings.\n    - `stop`: The length of the input string.\n    - `B`: The currently processed byte.\n    - `tmp`: A temporary string for storing character names.\n    - `i`: A loop counter.\n\n- Main Logic\n  -- REGION Initialization\n     First, `pt_in` is set to the address of the input string, and `pt_out` is set to the address of the output string. Then, `pos_in` is initialized to 1, indicating processing starts from the first character of the input string. `stop` is set to the length of the input string.\n\n  -- REGION Main Loop\n     A `FOR` loop iterates from 1 to 250 for the output string positions. Within the loop:\n    - If `pos_in` exceeds `stop`, the loop exits, indicating the input string has been fully processed.\n    - The current byte `B` is retrieved and processed differently based on its value:\n      - If `B` is a double quote (ASCII 34), it is encoded as `&quot;`.\n      - If `B` is an ampersand (ASCII 38), it is encoded as `&amp;`.\n      - If `B` is a less-than sign (ASCII 60), it is encoded as `&lt;`.\n      - If `B` is a greater-than sign (ASCII 62), it is encoded as `&gt;`.\n      - If `B` is a non-ASCII character (greater than 127) and multibyte mode `M` is true, it is encoded as the corresponding HTML entity (e.g., `&euro;`).\n      - Otherwise, `B` is directly copied to the output string.\n    - After processing each character, `pos_in` increments to point to the next character in the input string.\n\n  -- REGION Finalization\n     After the loop ends, the last byte of the output string is set to 0, marking the end of the string.\n\n- Output\n  The function block outputs the encoded HTML string, stored in `HTML_ENCODE`. The output string does not exceed 250 bytes and includes HTML entity encodings for all special characters in the input string.", "name": "HTML_ENCODE"}