Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis code implements a function block named `BASE64_DECODE_STREAM`, which decodes a Base64-encoded data stream into its original byte data. Base64 is a common encoding method often used to convert binary data into a text format. The function block processes data byte by byte from the input buffer and decodes it into raw bytes in the output buffer.\n\n- Variable Definitions\nThe code defines the following types of variables:\n  - `VAR_IN_OUT`: Input/output buffersâ€”`BUF1` is the Base64-encoded input buffer, and `BUF2` is the decoded output buffer.\n  - `VAR_INPUT`: `SIZE1` represents the valid data length of the input buffer `BUF1`.\n  - `VAR_OUTPUT`: `SIZE2` represents the valid data length of the output buffer `BUF2`.\n  - `VAR`: Internal variables, including temporary decoding variables `a`, `b`, `o`, `off`, `i1`, `i2`, and `c`.\n\n- Main Logic\n  -- REGION Initialization\n    First, the input buffer size `SIZE1` is checked. If it is less than or equal to 0, the output buffer size `SIZE2` is set to 0, and the function returns. Otherwise, internal variables are initialized:\n    - `c` is set to `SIZE1 - 1`, representing the last valid index of the input buffer.\n    - `i2` is set to 0, indicating the current write position in the output buffer.\n    - `a` and `b` are set to 0, used for storing bit offsets and temporary data during decoding.\n\n  -- REGION Decoding Loop\n    A `FOR` loop iterates through each byte in the input buffer `BUF1`:\n    - The current byte `o` is read, and its Base64 character offset `off` is determined based on its value:\n      - If `o` is `=` (Base64 padding character), the loop exits.\n      - If `o` is a lowercase letter, `off` is set to 71.\n      - If `o` is an uppercase letter, `off` is set to 65.\n      - If `o` is a digit, `off` is set to -4.\n      - If `o` is `+`, `off` is set to -19.\n      - If `o` is `/`, `off` is set to -16.\n    - The 6-bit value corresponding to the Base64 character is obtained by subtracting `off` from `o` and then left-shifted before being ORed with `b`.\n    - The bit offset `a` is incremented.\n    - If `a` is greater than or equal to 8, it means enough bits have been collected to form a byte. Then:\n      - The upper 8 bits are extracted from `b` and written to the output buffer `BUF2`.\n      - `b` and `a` are updated to continue processing the remaining bits.\n\n  -- REGION Output Result\n    After the loop ends, the valid length of the output buffer `SIZE2` is set to the current write position `i2`, representing the length of the decoded data.", "name": "BASE64_DECODE_STREAM"}