Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  The function is named `URL_TO_STRING`, and its purpose is to convert a URL structure into a string format. The URL structure contains multiple fields, such as protocol, user, password, domain, port, path, query parameters, and anchor. The function gradually concatenates the values of these fields to ultimately generate a complete URL string.\n\n- Variable Definitions\n  The code defines an input variable `IN` of type `URL`. The `URL` structure includes the following fields:\n  - `PROTOCOL`: Protocol (e.g., \"http\" or \"https\")\n  - `USER`: Username\n  - `PASSWORD`: Password\n  - `DOMAIN`: Domain name\n  - `PORT`: Port number\n  - `PATH`: Path\n  - `QUERY`: Query parameters\n  - `ANCHOR`: Anchor\n\n- Main Logic\n  -- REGION Protocol Section\n      If `IN.PROTOCOL` is not empty, concatenate the protocol with `://` as the starting part of the URL string.\n      ```plaintext\n      IF IN.PROTOCOL <> '' THEN URL_TO_STRING := CONCAT(IN.PROTOCOL,'://'); END_IF;\n      ```\n\n  -- REGION User and Password Section\n      If `IN.USER` is not empty, concatenate the username to the URL string. If `IN.PASSWORD` is also not empty, concatenate `:` and the password after the username. Finally, add the `@` symbol.\n      ```plaintext\n      IF IN.USER <> '' THEN\n          URL_TO_STRING := CONCAT(URL_TO_STRING, IN.USER);\n          IF IN.PASSWORD <> '' THEN\n              URL_TO_STRING := CONCAT(URL_TO_STRING, ':');\n              URL_TO_STRING := CONCAT(URL_TO_STRING, IN.PASSWORD);\n          END_IF;\n          URL_TO_STRING := CONCAT(URL_TO_STRING, '@');\n      END_IF;\n      ```\n\n  -- REGION Domain Section\n      Directly concatenate `IN.DOMAIN` to the URL string.\n      ```plaintext\n      URL_TO_STRING := CONCAT(URL_TO_STRING, IN.DOMAIN);\n      ```\n\n  -- REGION Port Section\n      If `IN.PORT` is greater than 0, concatenate `:` and the port number to the URL string. The port number needs to be converted from `WORD` type to a string.\n      ```plaintext\n      IF IN.PORT > 0 THEN\n          URL_TO_STRING := CONCAT(URL_TO_STRING, ':');\n          URL_TO_STRING := CONCAT(URL_TO_STRING, WORD_TO_STRING(IN.PORT));\n      END_IF;\n      ```\n\n  -- REGION Path Section\n      Directly concatenate `IN.PATH` to the URL string.\n      ```plaintext\n      URL_TO_STRING := CONCAT(URL_TO_STRING, IN.PATH);\n      ```\n\n  -- REGION Query Parameters Section\n      If `IN.QUERY` is not empty, concatenate `?` and the query parameters to the URL string.\n      ```plaintext\n      IF IN.QUERY <> '' THEN\n          URL_TO_STRING := CONCAT(URL_TO_STRING, '?');\n          URL_TO_STRING := CONCAT(URL_TO_STRING, IN.QUERY);\n      END_IF;\n      ```\n\n  -- REGION Anchor Section\n      If `IN.ANCHOR` is not empty, concatenate `#` and the anchor to the URL string.\n      ```plaintext\n      IF IN.ANCHOR <> '' THEN\n          URL_TO_STRING := CONCAT(URL_TO_STRING, '#');\n          URL_TO_STRING := CONCAT(URL_TO_STRING, IN.ANCHOR);\n      END_IF;\n      ```\n\n- Output Result\n  Finally, the function returns a complete URL string, including the protocol, user, password, domain, port, path, query parameters, and anchor (if these fields exist).", "name": "URL_TO_STRING"}