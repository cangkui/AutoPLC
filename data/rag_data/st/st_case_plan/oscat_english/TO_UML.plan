Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis function, named `TO_UML`, is used to convert an input byte value (BYTE) into its corresponding string representation. It primarily handles special German characters (such as ä, ö, ü, ß, etc.), converting them to their respective string forms. If the input value does not match any special character, it is directly converted to the corresponding ASCII character.\n\n- Variable Definitions\nThe code defines the following variables:\n - Input variable: `IN`, of type `BYTE`, representing the input byte value.\n - Output variable: `TO_UML`, of type `STRING`, representing the converted string.\n\n- Main Logic\nThe function logic is based on a `CASE` statement, which performs different operations depending on the input byte value `IN`:\n - If `IN` equals 196, the output string is 'Ae' (representing the German character Ä).\n - If `IN` equals 214, the output string is 'Oe' (representing the German character Ö).\n - If `IN` equals 220, the output string is 'Ue' (representing the German character Ü).\n - If `IN` equals 223, the output string is 'ss' (representing the German character ß).\n - If `IN` equals 228, the output string is 'ae' (representing the German character ä).\n - If `IN` equals 246, the output string is 'oe' (representing the German character ö).\n - If `IN` equals 252, the output string is 'ue' (representing the German character ü).\n - If `IN` does not match any of the above cases, the `CHR_TO_STRING` function is used to convert the byte value to its corresponding ASCII character.\n\n- Output Results\nThe function's output is the converted string, determined by the input byte value. For example:\n - Input 196 outputs 'Ae'.\n - Input 228 outputs 'ae'.\n - Input 65 (ASCII value for 'A') outputs 'A'.", "name": "TO_UML"}