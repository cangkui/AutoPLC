Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis code defines a function named `REVERSE`, which performs a bit-reversal operation on an input byte (of type `BYTE`). Using bitwise operations (such as rotate right `ROR` and rotate left `ROL`), it reverses the bit order of the input byte and returns the reversed result.\n\n- Variable Definitions\nThe code defines one type of variable:\n - Input variable: `IN`, of type `BYTE`, representing the byte to be reversed.\n\n- Main Logic\n-- REGION Bit Reversal Logic:\n   The core logic of the function involves reversing the bits of the byte through bitwise operations. The specific steps are as follows:\n   1. Use `ROR(in, 1)` to rotate the input byte `in` right by 1 bit, then extract specific bits using the mask `2#10001000`.\n   2. Use `ROL(in, 1)` to rotate the input byte `in` left by 1 bit, then extract specific bits using the mask `2#00010001`.\n   3. Use `ROR(in, 3)` to rotate the input byte `in` right by 3 bits, then extract specific bits using the mask `2#01000100`.\n   4. Use `ROL(in, 3)` to rotate the input byte `in` left by 3 bits, then extract specific bits using the mask `2#00100010`.\n   5. Combine the results from the above steps using an `OR` operation to obtain the final bit-reversed result.\n\n   The final bit-reversed result is assigned to the function's return value `REVERSE`.\n\n- Example\nAssume the input byte `IN` has the value `2#10101010` (binary representation). The function execution proceeds as follows:\n1. `ROR(in, 1)` yields `2#01010101`, which, when ANDed with the mask `2#10001000`, results in `2#00000000`.\n2. `ROL(in, 1)` yields `2#01010101`, which, when ANDed with the mask `2#00010001`, results in `2#00010001`.\n3. `ROR(in, 3)` yields `2#01010101`, which, when ANDed with the mask `2#01000100`, results in `2#01000100`.\n4. `ROL(in, 3)` yields `2#01010101`, which, when ANDed with the mask `2#00100010`, results in `2#00100010`.\n5. Combining these results with an `OR` operation yields `2#01110111`, the final reversed result.\n\n- Summary\nThis function efficiently reverses the bits of a byte by combining rotate operations and bit masking. This approach is highly performant and well-suited for scenarios requiring high efficiency.", "name": "REVERSE"}