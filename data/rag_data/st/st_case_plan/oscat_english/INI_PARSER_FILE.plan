Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code is a function block written in SCL, named 'INI_PARSER_FILE', designed to parse INI files. It reads file content, extracts key-value pairs, and returns corresponding results based on input parameters.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input/Output Variables: Filename, file server data, string, run flag, offset, key, value, network buffer\n  - Output Variables: Result\n  - Internal Variables: File block, index, state, error, mode, step, character, key append flag, value append flag, file end flag, value pointer, key pointer, value end address, key end address, watchdog timer\n\n- Main Logic Section\n  -- REGION Initialization\n     When the `RUN` flag is greater than 0, the function block starts execution. First, internal variables are initialized:\n     - `pv` and `pk` point to the starting addresses of `VALUE` and `KEY`, respectively, with their first byte set to 0 (indicating empty strings).\n     - `pve` and `pke` point to the end addresses of `VALUE` and `KEY`.\n     - `i` (index) is initialized to `OFFSET`, indicating the starting position for reading the file.\n     - `RESULT` is initialized to 0, meaning no result has been generated yet.\n     - `state` is set to 5, indicating entry into the main loop state.\n     - `step` is set to 0, representing the initial state of the parsing step.\n     - The `watchdog` timer is reset and started.\n\n  -- REGION File Reading and Parsing\n     When `state = 5`, the main loop begins. The primary task of the loop is to read file content and parse key-value pairs:\n     - **File Reading**:\n       - The `FB` (file block function block) is called to read file content, with `MODE` set to 1 for read mode.\n       - The character returned by `FB` is stored in `c`, and error information is stored in `e`.\n       - If `e > 0`, it indicates a read error, and `state` is set to 10 to exit the loop.\n       - If `watchdog.Q` is true, indicating a timeout, `state` remains 5, and the loop exits.\n     - **Parsing Logic**:\n       Based on the value of `step`, characters are parsed:\n       - **Step 0**:\n         - If the character is `[`, it indicates entry into key parsing mode, and `step` is set to 200.\n         - If the character is `;` or `#`, it indicates a comment line, and `step` is set to 100.\n         - If the character is a printable character (non-whitespace), it indicates the start of key parsing, `k_add` is set to that character, and `step` is set to 300.\n       - **Step 100**:\n         - If the character is whitespace, it indicates the end of a comment line, and `state` is set to 3 to exit the loop.\n       - **Step 200**:\n         - If the character is `]`, it indicates key parsing is complete. If the key is valid (`pk > ADR(KEY)`), `state` is set to 1 to exit the loop; otherwise, the key pointer is reset, and the process returns to step 0.\n         - If the character is whitespace or the file end flag, the key pointer is reset, and the process returns to step 0.\n       - **Step 300**:\n         - If the character is whitespace, it indicates key parsing is complete, the key pointer is reset, and the process returns to step 0.\n         - If the character is `=`, it indicates entry into value parsing mode, and `step` is set to 330.\n       - **Step 330**:\n         - If the character is whitespace or the file end flag, it indicates value parsing is complete, and `state` is set to 2 to exit the loop.\n         - Otherwise, `v_add` is set to that character, and `step` is set to 350.\n       - **Step 350**:\n         - If the character is whitespace or the file end flag, it indicates value parsing is complete, and `state` is set to 2 to exit the loop.\n     - **Key-Value Appending**:\n       - If `v_add > 0` and `pv` has not exceeded `pve`, the character is appended to `VALUE`, and the `pv` pointer is updated.\n       - If `k_add > 0` and `pk` has not exceeded `pke`, the character is appended to `KEY`, and the `pk` pointer is updated.\n     - **Index Update**:\n       - After successfully parsing each character, `i` (index) is incremented by 1, indicating movement to the next character in the file.\n\n  -- REGION Result Handling\n     Based on the value of `state`, parsing results are processed:\n     - **State 1**:\n       - If `RUN` is 1 or 3, and `KEY` matches `STR` or `STR` is empty, it indicates successful parsing of a key-value pair. `RESULT` is set to 1, `OFFSET` is updated, and `RUN` and `state` are reset.\n     - **State 2**:\n       - If `RUN` is 2 or 3, and `KEY` matches `STR` or `STR` is empty, it indicates successful parsing of a value. `RESULT` is set to 2, `OFFSET` is updated, and `RUN` and `state` are reset.\n     - **State 3**:\n       - `OFFSET` is updated to the current index, and `state` is reset to 0.\n     - **State 5**:\n       - `RESULT` is set to 5, indicating parsing is incomplete.\n     - **State 10**:\n       - `RESULT` is set to 10, indicating a file read error. `OFFSET` is updated, and `RUN` and `state` are reset.\n\n  -- REGION Completion\n     If `RUN` is 0, the function block ends processing.", "name": "INI_PARSER_FILE"}