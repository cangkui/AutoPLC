Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code implements a functional block `FT_PDT1`, which combines a differentiator (`FT_DERIV`) and a first-order low-pass filter (`FT_PT1`) to process an input signal. The final output is a weighted sum of the input signal and the processed differential signal.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: `IN` (input signal), `KP` (proportional gain), `TV` (derivative time constant), `T1` (time constant of the first-order low-pass filter).\n  - Output variable: `Y` (output signal).\n  - Internal variables: `diff` (differentiator instance), `TP` (first-order low-pass filter instance).\n\n- Main Logic\n  -- REGION Differentiator Processing\n      The `FT_DERIV` functional block is used to perform derivative processing on the input signal `IN`. The differentiator's input is `IN`, and the derivative time constant is controlled by `TV`. The differentiator's output is stored in `diff.out`.\n  \n  -- REGION First-Order Low-Pass Filter Processing\n      The `FT_PT1` functional block is used to filter the differentiator's output `diff.out`. The filter's input is `diff.out`, and the time constant is controlled by `T1`. The filter's output is stored in `tp.out`.\n\n  -- REGION Output Calculation\n      The final output `Y` is a weighted sum of the input signal `IN` and the filtered differential signal `tp.out`, with the weighting coefficient controlled by the proportional gain `KP`. The calculation formula is:\n      ```\n      Y := KP * (tp.out + IN)\n      ```", "name": "FT_PDT1"}