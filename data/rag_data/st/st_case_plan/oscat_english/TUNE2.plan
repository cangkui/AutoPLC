Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis code implements a functional block named 'TUNE2' for controlling the adjustment process of an output value (Y). The block supports both manual and rapid adjustment modes and allows setting upper and lower limit values. It uses a state machine to handle different adjustment requests and employs timers to control adjustment speed and step size.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables: SET (set), SU (slow increase), SD (slow decrease), FU (fast increase), FD (fast decrease), RST (reset), SS (slow step), FS (fast step), Limit_L (lower limit), LIMIT_H (upper limit), RST_val (reset value), SET_val (set value), TR (time limit), S1 (slow speed), S2 (fast speed)\n - Output variable: Y (output value)\n - Internal variables: tx (current time), start (start time), state (state), in (input state), step (step size), SPEED (speed), Y_start (initial value)\n\n- Main Logic\n-- REGION Initialization and Reset\n   First, the current time is retrieved and stored in the variable `tx`. If the reset signal (RST) is true, the output value (Y) is set to the reset value (RST_val), and the state (state) is reset to 0. If the set signal (SET) is true, the output value (Y) is set to the set value (SET_val), and the state (state) is reset to 0.\n\n-- REGION State Machine Handling\n   If the state (state) is greater than 0, the state machine logic is executed. Based on the current state (state) value, the input state (in) is set to the corresponding input signal (SU, SD, FU, FD). Then, the input state and time limit are checked:\n   - If the input state is false and the current time minus the start time is less than or equal to the time limit (TR), the output value (Y) is incremented by the step size (step), and the state (state) is reset to 0.\n   - If the input state is true and the current time minus the start time is greater than or equal to the time limit (TR), the output value (Y) is incremented by the speed (speed) multiplied by the time difference.\n   - If the input state is false, the state (state) is reset to 0.\n\n-- REGION Slow Increase/Decrease\n   If the slow increase signal (SU) is true, the state (state) is set to 1, the start time (start) is recorded, the step size (step) is set to the slow step (SS), the speed (speed) is set to one-thousandth of the slow speed (S1), and the current output value (Y) is recorded as the initial value (Y_start).\n   If the slow decrease signal (SD) is true, the state (state) is set to 2, the start time (start) is recorded, the step size (step) is set to the negative slow step (SS), the speed (speed) is set to the negative one-thousandth of the slow speed (S1), and the current output value (Y) is recorded as the initial value (Y_start).\n\n-- REGION Fast Increase/Decrease\n   If the fast increase signal (FU) is true, the state (state) is set to 3, the start time (start) is recorded, the step size (step) is set to the fast step (FS), the speed (speed) is set to one-thousandth of the fast speed (S2), and the current output value (Y) is recorded as the initial value (Y_start).\n   If the fast decrease signal (FD) is true, the state (state) is set to 4, the start time (start) is recorded, the step size (step) is set to the negative fast step (FS), the speed (speed) is set to the negative one-thousandth of the fast speed (S2), and the current output value (Y) is recorded as the initial value (Y_start).\n\n-- REGION Output Limiting\n   Finally, the `LIMIT` function is used to constrain the output value (Y) within the specified lower limit (Limit_L) and upper limit (LIMIT_H).", "name": "TUNE2"}