Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis code is a function block written in SCL, named 'TN_INPUT_MENU_POPUP', designed to display and manage pop-up menus on a terminal screen. It handles menu creation, updates, user input responses, and destruction.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Function block instances: Used for screen operations, such as saving screen areas, restoring screen areas, drawing lines, adding shadows, drawing boxes, writing characters, etc.\n - Input variables: Menu rows, columns, index, scroll offset, etc.\n - Internal variables: Used to store menu activation status, creation status, destruction status, update status, current item, menu text, screen information, etc.\n - Temporary variables: Used to temporarily store row, column, index, etc., during loops.\n\n- Main Logic Section\n-- REGION Menu Creation\n   This region handles the menu creation logic. First, it checks if the menu is inactive and needs to be created. If so, it sets the menu to active and clears the creation flag. Then, it calculates the number of menu items and determines the number of rows and columns for the menu. Next, it adjusts the menu position to ensure it does not exceed the screen boundaries. Finally, it saves the screen area, draws the menu box, adds a shadow, and draws the menu items.\n   - Calculate the number of menu items: Uses the ELEMENT_COUNT function to count the elements in the menu text, using the delimiter BYTE#35 (#).\n   - Determine menu rows and columns: Assigns the number of menu items to the row count and initializes the column count to 0. It then loops through each menu item, uses the ELEMENT_GET function to get the length of each item, and updates the maximum column count.\n   - Adjust menu position: Checks if the menu's X and Y coordinates plus the column and row counts exceed the screen boundaries. If they do, it adjusts the X and Y coordinates to ensure the menu is fully displayed on the screen.\n   - Save screen area: Uses the FB_TN_SC_AREA_SAVE function block to save the screen content of the menu area for later restoration when the menu is destroyed.\n   - Draw menu box: Uses the FB_TN_SC_BOX function block to draw the menu box, setting the fill character, border, and attributes.\n   - Add shadow: Uses the FB_TN_SC_ADD_SHADOW function block to add a shadow to the menu box for enhanced visual effects.\n   - Draw menu items: Initializes column and row variables and loops through each menu item. If the menu item is a separator ('-'), it uses the FB_TN_SC_LINE function block to draw a separator line.\n\n-- REGION User Input Handling\n   This region handles the logic for responding to user input. First, it checks if the menu is active. If so, it performs corresponding actions based on the user's extended key codes, such as scrolling menu items or destroying the menu.\n   - Extended code 65: Indicates the user pressed the up arrow key, sets the scroll offset to -1, and sets the update flag to TRUE.\n   - Extended code 66: Indicates the user pressed the down arrow key, sets the scroll offset to 1, and sets the update flag to TRUE.\n   - Extended code 13: Indicates the user pressed the Enter key, sets the destroy flag to TRUE.\n   - Extended code 27: Indicates the user pressed the ESC key, sets the destroy flag to TRUE, and resets the current item to 0.\n   - Extended codes 67..68: Indicates the user pressed other keys, sets the destroy flag to TRUE, and resets the current item to 0.\n\n-- REGION Menu Update\n   This region handles the menu update logic. First, it checks if the menu is active and needs an update. If so, it clears the update flag and determines the position of the current menu item. Then, it adjusts the current menu item based on the scroll offset, ensuring no separators are selected. Finally, it redraws the menu items, highlighting the currently selected item.\n   - Determine current item: Assigns the current item to the temporary variable in_index. If the current item is less than 1 or greater than the number of menu items, it sets the scroll offset to 1 and sets the current item to the number of menu items.\n   - Check for separators: If the current item is a separator, it sets the scroll offset to 1 and skips the separator.\n   - Adjust current item: If the scroll offset is not 0, it uses a loop to adjust the current item based on the scroll offset, ensuring no separators are selected.\n   - Redraw menu items: Initializes column and row variables and loops through each menu item. If the current item is the selected item, it draws it with the selected attribute (by_Attr_mF); otherwise, it uses the unselected attribute (by_Attr_oF). It uses the FB_TN_SC_WRITE_C function block to write the menu item text to the screen.\n\n-- REGION Menu Destruction\n   This region handles the menu destruction logic. First, it checks if the menu is active and needs to be destroyed. If so, it clears the destruction flag and sets the menu to inactive. Then, it restores the screen area and clears the modal dialog flag.\n   - Restore screen area: Uses the FB_TN_SC_AREA_RESTORE function block to restore the previously saved screen area.\n   - Clear modal dialog flag: Sets the screen's modal dialog flag to FALSE.", "name": "TN_INPUT_MENU_POPUP"}