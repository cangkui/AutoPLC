Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis function, named `EXEC`, is designed to parse a string containing a mathematical expression and return the computed result. It supports basic mathematical operators (such as addition, subtraction, multiplication, and division) as well as some mathematical functions (e.g., square root, sine, cosine, tangent, etc.). If the input string is invalid or contains errors, the function will return `'ERROR'`.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variable: `str`, representing the input string.\n - Internal variables:\n   - `pos`: Stores the position of the first non-numeric character in the string.\n   - `R1` and `R2`: Store the two real numbers extracted from the string.\n   - `operator`: Stores the extracted operator from the string.\n\n- Main Logic\n-- REGION String Preprocessing\n   First, the function preprocesses the input string by removing spaces and converting it to uppercase. The processed string is stored in `EXEC`.\n-- REGION Extracting Numbers and Operators\n   Next, the function uses `FINDB_NONUM` to find the position `pos` of the first non-numeric character in the string. If `pos` is greater than 1, the part of the string before `pos` is converted to a real number `R1`. The part after `pos` is then converted to a real number `R2`. Finally, the operator is extracted and stored in `operator`.\n-- REGION Handling Empty Operators\n   If `operator` is empty and the input string is also empty, the function returns an empty string. If `operator` is empty but the input string is not, the function returns the original string directly.\n-- REGION Computing and Returning Results\n   Based on the extracted operator, the function performs the corresponding mathematical operation and stores the result as a string in `EXEC`. If the operator is `'/'` and `R2` is 0, it returns `'ERROR'`. If the operator is invalid, it also returns `'ERROR'`.\n-- REGION Formatting Results\n   If the computed result is not `'ERROR'`, the function formats the result to ensure it includes a decimal point and a decimal part. For example, if the result is an integer, `.0` is added; if the result ends with a decimal point, a `0` is appended.\n-- REGION Returning Results\n   Finally, the function returns the processed result string.\n\n- Detailed Explanation\n - **String Preprocessing**: Uses `UPPERCASE(TRIM(str))` to remove spaces and convert the string to uppercase, ensuring subsequent processing is unaffected by case or spaces.\n - **Extracting Numbers and Operators**: Uses `FINDB_NONUM` to locate the first non-numeric character, then extracts the numbers before and after the operator, converting them to real numbers.\n - **Handling Empty Operators**: If the operator is empty, the function returns either an empty string or the original string based on the input.\n - **Computing and Returning Results**: Performs the corresponding mathematical operation based on the operator and converts the result to a string. If the operator is division and the divisor is 0, it returns `'ERROR'`.\n - **Formatting Results**: Ensures the result string includes a decimal point and decimal part to avoid incomplete floating-point numbers.\n - **Returning Results**: Returns the processed result string or `'ERROR'` if the computation fails.\n\n- Examples\n - Input `'3.14 + 2.71'`, returns `'5.85'`.\n - Input `'10 / 0'`, returns `'ERROR'`.\n - Input `'SQRT(16)'`, returns `'4.0'`.", "name": "EXEC"}