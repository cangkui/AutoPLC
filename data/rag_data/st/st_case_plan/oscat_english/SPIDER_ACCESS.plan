Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\n  This functional block is named `SPIDER_ACCESS` and is used to access a remote server over the network to read or write the value of a variable. It communicates with the server using the HTTP protocol and controls the entire process via a state machine. The block supports two modes: read mode and write mode.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input/Output Variables: IP_C (IP configuration), S_BUF (send buffer), R_BUF (receive buffer), VALUE (value to read or write), VAR_NAME (variable name).\n  - Input Variables: MODE (mode, used to distinguish between read or write operations).\n  - Output Variables: ERROR (error code, used to indicate whether the operation was successful).\n  - Internal Variables: state (state machine state), st_tmp (temporary string), URL_DATA (URL data), HTTP_GET (HTTP GET operation), value_len (length of the value), body_len (length of the response body), mode_save (saved mode).\n\n- Main Logic Section\n  -- REGION State Machine\n     The state machine controls the execution flow of the functional block and consists of the following states:\n     - State 00:\n       First, it checks whether `MODE` is within the valid range (1 or 2). If it is, `MODE` is saved to `mode_save`. Then, based on whether `VAR_NAME` contains a dot (`.`), it decides whether to add the prefix `%40GV.` to the variable name. Next, depending on the value of `MODE`, it constructs the corresponding URL. If `MODE` is 2 (write mode), it builds a URL containing the variable name and value; if `MODE` is 1 (read mode), it builds a URL containing only the variable name. Finally, it sets the state to 60 to prepare for executing the HTTP request.\n     - State 60:\n       It checks whether the `HTTP_GET` operation is complete. If complete, it processes the response based on the value of `MODE`. If `MODE` is 2 (write mode), it checks whether the length of the response body matches the length of the written value and stores the result in `ERROR`. If `MODE` is 1 (read mode), it extracts the value from the response body and stores it in `VALUE`. If the `HTTP_GET` operation encounters an error, the error code is stored in `ERROR`. Finally, it sets the state to 100.\n     - State 100:\n       It checks whether the `HTTP_GET` operation has completed. If not, it resets the state to 0 to prepare for re-executing the process.\n\n  -- REGION HTTP_GET Operation\n     In each state of the state machine, the `HTTP_GET` operation performs different tasks:\n     - When the state is 60, the `HTTP_GET` operation executes a GET request using the previously constructed URL data.\n     - When the state is 100, the `HTTP_GET` operation unlocks the buffer to prepare for the next operation.\n\n  The state machine and `HTTP_GET` operation work together to ensure the functional block correctly executes read or write operations and handles any potential errors.", "name": "SPIDER_ACCESS"}