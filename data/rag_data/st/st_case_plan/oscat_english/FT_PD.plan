Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code implements a simple Proportional-Derivative (PD) Controller function block named `FT_PD`. It calculates the derivative of the input signal and combines it with the input signal, then outputs the result adjusted by a proportional gain.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: `IN` (input signal), `KP` (proportional gain, default value 1.0), `TV` (derivative time constant, default value 1.0).\n  - Output variable: `Y` (output signal).\n  - Internal variable: `diff`, used to compute the derivative of the input signal, with the type `FT_DERIV`.\n\n- Main Logic\n  -- REGION Derivative Calculation\n    Calls the `FT_DERIV` function block to compute the derivative of the input signal `IN`. The input for `FT_DERIV` is `IN`, and the derivative gain `K` is set to `TV`. The derivative result is stored in `diff.out`.\n\n  -- REGION Output Calculation\n    Following the PD controller formula, the output `Y` is calculated as the proportional gain `KP` multiplied by the sum of the input signal `IN` and the derivative value `diff.out`. The formula is:\n    ```\n    Y = KP * (diff.out + IN)\n    ```\n\n  The core logic of this code processes the input signal using a derivative controller and outputs a result adjusted by the proportional gain. The derivative controller enhances the system's responsiveness to changes in the input signal, while the proportional gain adjusts the overall amplitude of the output.", "name": "FT_PD"}