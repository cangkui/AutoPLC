Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code defines a function block named `ESR_MON_B8`, designed to monitor the state changes of 8 Boolean input signals (`s0` to `s7`). When a state change is detected, relevant information is stored in the output array `ESR_Out`, and a flag `ESR_Flag` is set to indicate whether any state change has occurred. This function block is suitable for scenarios requiring signal change logging and event generation.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - **Input Variables**: 8 Boolean signals (`s0` to `s7`), a date-time variable (`DT_in`), and 8 string variables (`a0` to `a7`) for storing signal addresses.\n  - **Output Variables**: A Boolean flag (`ESR_Flag`) indicating whether any signal state change has occurred.\n  - **Input-Output Variables**: An array (`ESR_Out`) storing signal change details, including signal type, address, date-time, and timestamp.\n  - **Internal Variables**: 8 Boolean variables (`x0` to `x7`) storing the previous signal states, a time variable (`tx`) recording the current time, and an integer variable (`cnt`) tracking the fill position in the `ESR_Out` array.\n\n- Main Logic\n  -- **REGION Initialization**\n     At the start of the function block, the current time is converted to a time type and stored in `tx`. Then, `ESR_Flag` is initialized to `FALSE`, indicating no signal changes detected yet. The first 4 elements of the `ESR_Out` array have their `typ` field set to `0`, indicating no signal change information is stored. Finally, `cnt` is initialized to `0`, marking the start of the `ESR_Out` array fill position.\n\n  -- **REGION Signal State Detection and Logging**\n     This region detects signal changes by comparing the current signal states (`s0` to `s7`) with their previous states (`x0` to `x7`). If a change is detected, relevant information is stored in `ESR_Out`, and `cnt` and `ESR_Flag` are updated. The logic is as follows:\n     - **Signal `s0` Detection**:\n       - If `s0` differs from `x0`, a state change is detected.\n       - `ESR_Out[cnt].typ` is set to `10 + BOOL_TO_BYTE(s0)`, where `BOOL_TO_BYTE(s0)` converts the Boolean to a byte (`0` or `1`), resulting in `typ` values of `10` or `11` (indicating `FALSE`→`TRUE` or `TRUE`→`FALSE` transitions).\n       - `ESR_Out[cnt].adress` is set to `a0` (signal `s0`'s address).\n       - `ESR_Out[cnt].DS` is set to `DT_in` (date-time of the change).\n       - `ESR_Out[cnt].TS` is set to `tx` (timestamp of the change).\n       - `x0` is updated to `s0` for future comparisons.\n       - `cnt` is incremented by `1` to move the fill position.\n       - `ESR_Flag` is set to `TRUE` to indicate a detected change.\n     - **Signals `s1` to `s7` Detection**:\n       - The same logic applies, using respective signals (`s1`/`x1`/`a1` to `s7`/`x7`/`a7`).\n       - For `s4` to `s7`, an additional check ensures `cnt` remains below `4` to prevent array overflow (max 4 changes logged).\n\n  -- **REGION End**\n     The function block concludes after signal detection and logging. `ESR_Flag` reflects whether any changes occurred, and `ESR_Out` stores up to 4 change records. Excess changes beyond 4 are ignored.", "name": "ESR_MON_B8"}