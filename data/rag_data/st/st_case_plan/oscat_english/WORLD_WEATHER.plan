Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\nThis functional block is named `WORLD_WEATHER` and is used to fetch weather data from the World Weather Online API. It retrieves weather information via HTTP requests and parses the data into a structured format. The block controls the entire process through a state machine, including URL generation, DNS resolution, HTTP requests, data parsing, and error handling.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input/Output Variables: `IP_C` (IP control structure), `S_BUF` (send buffer), `R_BUF` (receive buffer), `WW` (weather data structure).\n - Input Variables: `ACTIVATE` (activation signal), `LATITUDE` (latitude), `LONGITUDE` (longitude), `KEY` (API key).\n - Output Variables: `BUSY` (busy signal), `DONE` (completion signal), `ERROR_C` (error code), `ERROR_T` (error type).\n - Internal Variables: Used for URL generation, DNS resolution, HTTP requests, CSV parsing, state control, etc.\n\n- Main Logic\n-- REGION 00: Initialization\n   This is the initial state of the functional block. When the `ACTIVATE` signal transitions from false to true, the block begins operation. The state is set to 20, and the `BUSY` signal is set to true, indicating the block is processing a task. The `DONE` signal and error signals are reset to false and 0, respectively, indicating the task is incomplete and no errors have occurred.\n\n-- REGION 20: URL Generation\n   In this state, the block generates the API request URL based on the input latitude and longitude. First, the latitude is converted to a string and appended to the URL. Then, the longitude is converted to a string and appended to the URL. Finally, the API key is appended to form the complete request URL. The generated URL string is converted into a URL data structure for subsequent HTTP requests. The state is set to 40, moving to the DNS resolution phase.\n\n-- REGION 40: DNS Resolution\n   In this state, the block uses the `DNS_CLIENT` functional block to resolve the domain name in the URL. The `DNS_CLIENT` block converts the domain name to an IP address. If resolution succeeds, the state is set to 60, moving to the HTTP request phase. If resolution fails, the error code and type are recorded, and the block jumps to state 100 for error handling.\n\n-- REGION 60: HTTP Request\n   In this state, the block uses the `HTTP_GET` functional block to send an HTTP request and fetch weather data. The `HTTP_GET` block sends an HTTP GET request based on the resolved IP address and URL data. If the request succeeds, the state is set to 80, moving to the data parsing phase. If the request fails, the error code and type are recorded, and the block jumps to state 100 for error handling.\n\n-- REGION 80: Data Parsing\n   In this state, the block uses the `CSV_PARSER_BUF` functional block to parse the CSV data from the HTTP response. The parsing starts from the beginning of the HTTP response, processing the CSV data line by line. The parsed data is stored in the weather data structure `WW`, including current weather and forecasts for the next few days. The parsing logic is as follows:\n   - If the parsing result is 1 or 2, it indicates valid CSV data. The parsed strings are converted to integers or real numbers and stored in the corresponding fields.\n   - If the parsing result is 10, it indicates CSV parsing is complete. The `DONE` signal is set to true, indicating the block has finished its task. The state is set to 100, moving to the completion and error handling phase.\n   - During parsing, the block stores data in the `WW` structure based on the field type and position. For example, current weather temperature, wind speed, wind direction, and forecasts for future days.\n\n-- REGION 100: Completion and Error Handling\n   In this state, the block handles task completion or error scenarios. The logic is as follows:\n   - If the HTTP request is incomplete, the state is reset to 0, the `BUSY` signal is set to false, and the `DONE` signal is set based on the error type. If the error type is 0, `DONE` is true; otherwise, it is false.\n   - If the HTTP request is complete, the block enters a waiting state until the `ACTIVATE` signal is triggered again. The block can then restart to fetch new weather data.\n\n- Functional Block Calls\n-- DNS_CLIENT: Used to resolve the domain name in the URL. Converts the domain name to an IP address for subsequent HTTP requests.\n-- HTTP_GET: Used to send HTTP requests and fetch weather data. Sends an HTTP GET request based on the resolved IP address and URL data to retrieve the weather data CSV file.\n-- CPB (CSV_PARSER_BUF): Used to parse the CSV data from the HTTP response. Parses the CSV file line by line and stores the parsed data in the `WW` weather data structure.\n\n- State Machine\nThe block controls the entire process through a state machine, including URL generation, DNS resolution, HTTP requests, data parsing, and error handling. Each state has corresponding logic to ensure the block correctly fetches and parses weather data. The state transitions are as follows:\n - 00 -> 20: When the `ACTIVATE` signal transitions from false to true, the block begins operation.\n - 20 -> 40: After URL generation is complete, the block moves to DNS resolution.\n - 40 -> 60: After successful DNS resolution, the block moves to the HTTP request phase.\n - 40 -> 100: After DNS resolution fails, the block moves to error handling.\n - 60 -> 80: After a successful HTTP request, the block moves to data parsing.\n - 60 -> 100: After an HTTP request fails, the block moves to error handling.\n - 80 -> 100: After data parsing is complete, the block moves to completion and error handling.\n - 100 -> 00: After task completion, the block enters a waiting state until the `ACTIVATE` signal is triggered again.\n\n- Error Handling\nThe block may encounter errors during DNS resolution, HTTP requests, or data parsing. Each error is recorded and output via `ERROR_C` and `ERROR_T`. Error types include:\n - DNS Resolution Error (Type 1): Indicates domain name resolution failure.\n - HTTP Request Error (Type 2): Indicates HTTP request failure.\n   If an error occurs, the block jumps to state 100 for error handling and outputs the corresponding error code and type.\n\n- Output Results\nThe block outputs the following:\n - `BUSY` signal: Indicates the block is processing a task.\n - `DONE` signal: Indicates the block has completed its task.\n - `ERROR_C`: Error code indicating the type of error that occurred.\n - `ERROR_T`: Error type indicating the source of the error (DNS resolution or HTTP request).\n   The parsed weather data is stored in the `WW` structure, including current weather and forecasts for future days. This data can be used in subsequent programs, such as displaying on a user interface or for other calculations.", "name": "WORLD_WEATHER"}