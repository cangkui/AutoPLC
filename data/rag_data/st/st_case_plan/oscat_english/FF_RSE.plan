Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis code implements a basic Reset-Dominant SR Flip-Flop (Set-Reset Flip-Flop) functional block named 'FF_RSE'. It sets or resets the output signal `Q` based on the input signals (Set, Reset, and Reset priority signals).\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables: `CS` (Set signal), `CR` (Reset signal), `RST` (Reset priority signal).\n - Output variable: `Q` (the flip-flop's output).\n - Internal variables: `es` (stores the previous cycle's Set signal state), `er` (stores the previous cycle's Reset signal state).\n\n- Main Logic Section\n-- REGION Main Logic\n   This region implements the core logic of the SR flip-flop, with the priority order: `RST` > `CR` > `CS`.\n   1. **Reset Priority Logic**:\n      - If `RST` is true, the output `Q` is forcibly set to `FALSE`, regardless of the state of other input signals. This is the highest-priority operation.\n   2. **Reset Logic**:\n      - If `CR` is true and `er` (the previous cycle's `CR` state) is false (i.e., the `CR` signal transitions from false to true), the output `Q` is set to `FALSE`.\n   3. **Set Logic**:\n      - If `CS` is true and `es` (the previous cycle's `CS` state) is false (i.e., the `CS` signal transitions from false to true), the output `Q` is set to `TRUE`.\n   4. **State Update**:\n      - At the end of each cycle, the values of `es` and `er` are updated to the current cycle's `CS` and `CR` states, respectively, for use in the next cycle.\n\n- State Machine Explanation\n   This functional block does not have an explicit state machine but implements edge detection for input signals through the `es` and `er` variables. This design ensures that operations (Set or Reset) are triggered only when the input signals transition from false to true.\n\n- Output Results\n   - The output `Q` is determined by the `RST`, `CR`, and `CS` signals, with the priority order: `RST` > `CR` > `CS`.\n   - If `RST` is true, `Q` is forcibly set to `FALSE`.\n   - If `CR` is true and `er` is false, `Q` is set to `FALSE`.\n   - If `CS` is true and `es` is false, `Q` is set to `TRUE`.\n   - If none of the above conditions are met, `Q` retains its value from the previous cycle.\n\n- Summary\n   This functional block implements a simple Reset-Dominant SR flip-flop, suitable for scenarios where output control is needed based on input signal priorities. By storing the previous cycle's input signal states, the block detects rising edges of signals and performs corresponding operations.", "name": "FF_RSE"}