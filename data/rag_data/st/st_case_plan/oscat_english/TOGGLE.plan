Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This is a simple functional block `TOGGLE` used to toggle the output `Q` on the rising edge of the clock signal (`CLK`). It also includes a reset signal (`rst`) to force the output `Q` to 0.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: `CLK` (clock signal) and `rst` (reset signal).\n  - Output variable: `Q` (output state).\n  - Internal variable: `edge` (used to detect the rising edge of the clock signal).\n\n- Main Logic Section\n  -- REGION Main Logic\n     The main logic section toggles the output `Q` by detecting the rising edge of the clock signal while supporting the reset function.\n    - If `rst` is true, the output `Q` is forced to 0.\n    - If `CLK` is true and `edge` is false (i.e., a rising edge is detected), the output `Q` is toggled (from 0 to 1 or from 1 to 0).\n    - Finally, `edge` is updated to the current value of `CLK` to detect the next rising edge in the following cycle.\n\n    The specific logic is as follows:\n    ```plaintext\n    IF rst THEN\n        Q := 0; // Force output to 0 on reset\n    ELSIF CLK AND NOT edge THEN\n        Q := NOT Q; // Toggle output state on clock rising edge\n    END_IF;\n    edge := CLK; // Update edge to detect the next rising edge\n    ```", "name": "TOGGLE"}