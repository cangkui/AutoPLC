Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code defines a function named `ARRAY_MIN`, which calculates the minimum value in a given real number array. The function takes a pointer to the array and the size of the array as input and returns the minimum value in the array.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables:\n    - `pt`: A pointer to the real number array.\n    - `size`: The size of the array (in bytes).\n  - Internal variables:\n    - `i`: A loop counter used to traverse the array.\n    - `stop`: Calculates the number of elements in the array, determining the loop's termination condition.\n\n- Main Logic\n  -- REGION Initialization\n    First, the number of elements in the array is calculated. Since `size` represents the array size in bytes, `SIZEOF(pt)` returns the size of an array element (in bytes). The actual number of elements is computed as `(size - SIZEOF(pt)) / SIZEOF(pt)` and assigned to `stop`.\n    Next, the first element of the array, `pt^[0]`, is assigned to `array_min` as the initial minimum value.\n\n  -- REGION Finding the Minimum\n    A `FOR` loop is used to traverse the array from the second element to the last. In each iteration, the current element `pt^[i]` is checked against `array_min`. If it is smaller, `array_min` is updated to the current element's value.\n    After the loop completes, `array_min` holds the minimum value in the array.\n\n  -- REGION Returning the Result\n    The function ultimately returns `array_min`, which is the minimum value in the array.", "name": "ARRAY_MIN"}