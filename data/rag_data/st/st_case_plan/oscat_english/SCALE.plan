Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\n  This function block is named `SCALE` and is used to perform linear scaling and offset adjustment on the input value `X`, then clamp the result within a specified range. Its primary purpose is to transform the input value `X` using the formula `X * K + O` (scaling and offset), then limit the result between the minimum value `MN` and maximum value `MX`.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables:\n    - `X`: The input value to be scaled, of type `REAL`.\n    - `K`: The scaling coefficient, of type `REAL`.\n    - `O`: The offset value, of type `REAL`.\n    - `MX`: The allowed maximum value, of type `REAL`.\n    - `MN`: The allowed minimum value, of type `REAL`.\n  - Output variable:\n    - `SCALE`: The result after scaling, offset adjustment, and clamping, of type `REAL`.\n\n- Main Logic Section\n  -- REGION Scaling and Clamping\n    The core logic of the function block involves transforming the input value `X` using the formula `X * K + O`, then using the `LIMIT` function to clamp the result between `MN` and `MX`. The specific steps are:\n    1. Calculate `X * K + O` to obtain the scaled and offset value.\n    2. Use the `LIMIT` function to clamp the calculated result between `MN` and `MX`.\n    3. Assign the final result to the output variable `SCALE`.\n\n    This function block is very concise and well-suited for scenarios requiring linear transformation of input values with range limitations. For example, in industrial control systems, it can be used to convert raw sensor signals into engineering units while ensuring the results stay within safe operating ranges.", "name": "SCALE"}