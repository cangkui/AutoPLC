Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This functional block `STACK_32` implements a stack data structure, where the stack size can be configured via the constant `n` (default size is 32). The stack supports basic operations such as Push, Pop, and Reset, and provides status indicators for stack empty (EMPTY) and stack full (FULL).\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input Variables:\n    - `Din`: Input data (32-bit unsigned integer).\n    - `E`: Enable signal, controls the execution of stack operations.\n    - `RD`: Pop signal, triggers reading data from the stack.\n    - `WD`: Push signal, triggers writing data to the stack.\n    - `RST`: Reset signal, clears the stack and resets its state.\n  - Output Variables:\n    - `Dout`: Output data, representing the value read from the stack.\n    - `EMPTY`: Stack empty flag, indicates whether the stack is empty.\n    - `FULL`: Stack full flag, indicates whether the stack is full.\n  - Internal Variables:\n    - `stack`: An array used to store data in the stack.\n    - `pt`: Stack pointer, points to the next available position in the stack.\n  - Constants:\n    - `n`: Maximum capacity of the stack, default value is 31 (indicating a stack size of 32).\n\n- Main Logic\n  -- REGION Reset Logic\n    When the `RST` signal is true, perform the reset operation:\n    - Reset the stack pointer `pt` to 0.\n    - Set `EMPTY` to true, indicating the stack is empty.\n    - Set `FULL` to false, indicating the stack is not full.\n    - Reset the output `Dout` to 0.\n\n  -- REGION Stack Operation Logic\n    When the `E` signal is true, perform stack operations:\n    - Pop operation (`RD` is true and the stack is not empty):\n      - Decrement the stack pointer `pt` by 1.\n      - Assign the top element of the stack to `Dout`.\n      - Update the `EMPTY` and `FULL` flags:\n        - If `pt` is 0, set `EMPTY` to true.\n        - Set `FULL` to false.\n    - Push operation (`WD` is true and the stack is not full):\n      - Write the input data `Din` to the top of the stack (`stack[pt]`).\n      - Increment the stack pointer `pt` by 1.\n      - Update the `EMPTY` and `FULL` flags:\n        - If `pt` exceeds `n`, set `FULL` to true.\n        - Set `EMPTY` to false.\n\n  -- REGION Status Update\n    After each operation, update the `EMPTY` and `FULL` flags based on the stack pointer `pt`:\n    - `EMPTY` is true if and only if `pt` is 0.\n    - `FULL` is true if and only if `pt` exceeds `n`.", "name": "STACK_32"}