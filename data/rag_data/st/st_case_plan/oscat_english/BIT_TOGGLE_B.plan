Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThe function is named `BIT_TOGGLE_B` and is used to toggle (flip) the state of a specific bit in a given byte. By inputting a byte and a bit position, the function will change the bit's value from 0 to 1 or from 1 to 0, and return the modified byte.  

- Variable Definitions  
The code defines two types of variables:  
  - Input variables: `IN` is a byte-type variable representing the original byte to be modified; `POS` is an integer-type variable indicating the position of the bit to be toggled (starting from 0).  
  - Output variable: `BIT_TOGGLE_B` is a byte-type variable representing the result after the bit toggle.  

- Main Logic  
-- REGION Main Logic  
  The core logic of the function uses bitwise operations to toggle the state of the specified bit. The specific steps are as follows:  
  1. Use the `SHL` function to left-shift `BYTE#1` by `POS` bits, generating a mask where only the specified bit is 1 and all other bits are 0.  
  2. Use the `XOR` (exclusive OR) operation to perform a bitwise XOR between the mask and the input byte `IN`. The XOR operation has the property that if a bit is XORed with 1, it flips (0 becomes 1, 1 becomes 0); if XORed with 0, the bit remains unchanged.  
  3. Assign the result to the output variable `BIT_TOGGLE_B` and return it.  

  For example:  
  - If `IN = 2#00001000` (decimal 8) and `POS = 3`, then `SHL(BYTE#1, 3)` generates `2#00001000`, and the XOR result is `2#00000000`.  
  - If `IN = 2#00000000` and `POS = 3`, then `SHL(BYTE#1, 3)` generates `2#00001000`, and the XOR result is `2#00001000`.  

  This approach allows the function to efficiently toggle any bit in the byte.", "name": "BIT_TOGGLE_B"}