Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code implements a function named `DAY_OF_WEEK`, which calculates and returns the corresponding day of the week (ranging from 1 to 7, representing Monday to Sunday) based on the input date (`IDATE`).\n\n- Variable Definitions\n  The code defines one type of variable:\n  - Input variable: `IDATE`, of type `DATE`, representing the input date.\n\n- Main Logic Section\n  -- REGION Core Calculation Logic:\n     The function's logic is based on the internal representation of the date. Here are the detailed steps:\n     1. **Convert Date to DWORD Type**: `DATE_TO_DWORD(IDATE)` converts the input date into a DWORD-type value, representing the number of seconds from a fixed reference point (usually January 1, 1970) to the given date.\n     2. **Calculate Days**: Divide the number of seconds by `86400` (the number of seconds in a day) to obtain the number of days from the fixed reference point to the given date.\n     3. **Adjust Offset**: Add `3` to adjust the result to a format starting from Monday (since January 1, 1970, was a Thursday, adding 3 days makes January 4, 1970, a Monday).\n     4. **Calculate Day of the Week**: Use `MOD 7` to perform a modulo operation, mapping the number of days to a range of 0 to 6, representing Monday to Sunday.\n     5. **Convert to 1–7 Range**: Finally, add `1` to adjust the result from the 0–6 range to 1–7, representing Monday to Sunday.\n     6. **Return Result**: Convert the final result to `INT` type and return it.\n\n- Output Result\n  The function returns an integer between 1 and 7, representing Monday to Sunday. For example:\n  - Returning `1` means Monday.\n  - Returning `2` means Tuesday.\n  - And so on, with `7` representing Sunday.", "name": "DAY_OF_WEEK"}