Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\n  This function, named `FIX`, is designed to handle string padding and truncation operations. Based on the input string, target length, padding character, and mode parameter, it returns a processed string.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: `str` (input string), `L` (target length), `C` (padding character), `M` (mode, determining how to process the string).\n  - Internal variables: `N` (number of padding characters needed), `SX` (temporary string for storing padding characters).\n\n- Main Logic\n  -- REGION Calculate the number of padding characters needed\n     First, compute the number of padding characters `N` using the formula `N := LIMIT(0, L, STRING_LENGTH) - LEN(str)`. The `LIMIT` function ensures `N` stays within a reasonable range (0 to `STRING_LENGTH`). If `N` is less than or equal to 0, no padding is needed, and the logic proceeds to truncation. Otherwise, different padding operations are performed based on the mode `M`.\n\n  -- REGION No padding needed (N <= 0)\n     If `N` is less than or equal to 0, the input string already meets or exceeds the target length, so only truncation is required:\n     - If mode `M` is 1, use the `RIGHT` function to extract a substring of length `L` from the right side of the string.\n     - For other mode values, use the `LEFT` function to extract a substring of length `L` from the left side of the string.\n\n  -- REGION Padding needed (N > 0)\n     If `N` is greater than 0, padding is required. Different padding logic is executed based on the mode `M`:\n     - If mode `M` is 1, use the `FILL` function to generate `N` padding characters `C` and concatenate them with the original string `str` on the left.\n     - If mode `M` is 2, use the `FILL` function to generate `SHR(N+1, 1)` padding characters `C` (i.e., `N` divided by 2 and rounded up) and concatenate them with the original string `str` on the right. Then, use the `LEFT` function to extract `SHR(N, 1)` characters (i.e., `N` divided by 2 and rounded down) from the padding characters and concatenate them again with the previous result to achieve symmetrical padding on both sides.\n     - For other mode values, use the `FILL` function to generate `N` padding characters `C` and concatenate them with the original string `str` on the right.\n\n  -- REGION Return the result\n     Finally, the function returns the processed string `FIX`.\n\n- Summary\n  The core logic of this function involves padding or truncating the string based on the input length, padding character, and mode. It supports multiple padding modes, including left padding, right padding, and symmetrical padding, making it versatile for various string formatting needs in different scenarios.", "name": "FIX"}