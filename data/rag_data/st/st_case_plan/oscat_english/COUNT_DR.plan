Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code defines a functional block named `COUNT_DR`, which implements a counter with an upper limit and step size. The counter supports set, increment, decrement, and reset operations. The counter's value can change within a specified range, and the step size controls the magnitude of each increment or decrement.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: `SET` (set counter value), `IN` (input value), `UP` (increment signal), `DN` (decrement signal), `STEP` (step size, default is 1), `MX` (counter upper limit, default is the maximum value 16#FFFFFFFF), `RST` (reset signal).\n  - Output variables: `CNT` (current counter value).\n  - Internal variables: `last_up` (records the previous cycle's `UP` signal state), `last_dn` (records the previous cycle's `DN` signal state).\n\n- Main Logic Section\n  -- REGION Counter Logic\n    The counter's logic is implemented through a series of conditional checks:\n    1. **Reset Operation**: If the `RST` signal is true, the counter value `CNT` is reset to 0.\n    2. **Set Operation**: If the `SET` signal is true, the counter value `CNT` is set to the value of `IN`, and the `LIMIT` function ensures `CNT` stays between 0 and `MX`.\n    3. **Increment Operation**: If the `UP` signal is true and the previous cycle's `UP` signal was false (i.e., the rising edge of `UP`), the counter value is incremented by the step size `STEP`. If the incremented value exceeds the upper limit `MX`, it wraps around to `STEP - (MX - CNT) - 1`.\n    4. **Decrement Operation**: If the `DN` signal is true and the previous cycle's `DN` signal was false (i.e., the rising edge of `DN`), the counter value is decremented by the step size `STEP`. If the decremented value is less than 0, it wraps around to `MX - (STEP - CNT) + 1`.\n    5. **Signal State Recording**: At the end of each cycle, the current states of `UP` and `DN` signals are recorded in `last_up` and `last_dn` for edge detection in the next cycle.\n\n  -- REGION Output\n    The current counter value `CNT` is directly output to the functional block's output variable.\n\n- Summary\n  This functional block implements a flexible counter that supports set, increment, decrement, and reset operations, with upper limit and step size control. The edge detection mechanism ensures that each change in the `UP` or `DN` signal triggers only one counting operation. The counter value automatically wraps around when it exceeds the valid range, ensuring it always stays within bounds.", "name": "COUNT_DR"}