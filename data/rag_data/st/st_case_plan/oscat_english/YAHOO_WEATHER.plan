Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code is a function block written in SCL, named 'YAHOO_WEATHER', designed to fetch weather data from the Yahoo Weather API. It retrieves data via HTTP requests, parses the response using an XML parser, and stores the data in a structured format. The function block also handles error detection, retry mechanisms, and state management.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input/Output Variables: IP control structure, network buffer, Yahoo weather data\n  - Input Variables: Activation flag, unit flag, location string\n  - Output Variables: Busy flag, completion flag, error code, error type\n  - Internal Variables: XML control, XML reader, URL data, DNS client, HTTP fetch, previous activation state, integer values, real values, state, loop counter, day index, index, count, retry request flag, retry wait time, retry count, max retry count, retry timestamp, timestamp\n\n- Main Logic Section\n  -- REGION STATE MACHINE\n     This region implements the state machine for the function block, managing the process of fetching weather data from the Yahoo Weather API. The state machine is implemented using CASE statements, with each state corresponding to a specific operation. Hereâ€™s the detailed logic for each state:\n     - **State 00**: Initialization state, checks if the function block is activated.\n       - If `ACTIVATE` is true and `activate_last` is false (i.e., the activation signal transitions from false to true), it proceeds to State 40.\n       - Initializes relevant variables: `DONE` is set to false, `BUSY` to true, `ERROR_C` and `ERROR_T` are cleared, `cycle` and `repeat_count` are reset to 0, and `repeat_request` is set to false.\n       - Sets the URL domain to 'query.yahooapis.com'.\n\n     - **State 40**: Handles DNS resolution.\n       - Calls the `DNS_CLIENT` function block to resolve the URL domain.\n       - If DNS resolution is complete (`DNS_CLIENT.DONE` is true), it proceeds to State 50.\n       - If DNS resolution fails (`DNS_CLIENT.ERROR > 0`), it sets the error code and type and jumps to State 100.\n\n     - **State 50**: Constructs the URL query string.\n       - Builds different query strings based on the value of `cycle`:\n         - If `cycle = 0`, the query string is 'q=select%20units,wind,atmosphere,astronomy,location%20from%20weather.forecast%20where%20woeid='.\n         - Otherwise, the query string is 'q=select%20item%20from%20weather.forecast%20where%20woeid='.\n       - Appends the `LOCATION` to the query string.\n       - Depending on the value of `UNITS`, it may add a unit parameter ('u=%27f%27' for Fahrenheit, 'u=%27c%27' for Celsius).\n       - Sets the URL path to '/v1/public/yql'.\n       - Proceeds to State 60.\n\n     - **State 60**: Sends an HTTP GET request.\n       - Calls the `HTTP_GET` function block to send the HTTP request.\n       - If the request completes (`HTTP_GET.DONE` is true), it proceeds to State 80.\n       - If the request fails (`HTTP_GET.ERROR > 0`), it sets the error code and type and jumps to State 100.\n\n     - **State 80**: Parses the XML response.\n       - Calls the `XML_READER` function block to parse the HTTP response body.\n       - If `CTRL.TYP < 98` (i.e., parsing is successful), it processes the parsed results:\n         - Converts parsed string values to real or integer values and stores them in `value_real` and `value_int`.\n         - Based on the value of `cycle`, it stores the parsed results in the corresponding fields of the `YW` structure:\n           - If `cycle = 0`, it processes location, wind speed, atmosphere, astronomy, and unit information.\n           - Otherwise, it processes geographic coordinates, current weather conditions, and future weather forecast information.\n         - If `ctrl.COUNT = 7` and `ctrl.VALUE = '0'`, it indicates a need to retry the request. It increments `repeat_count`; if it exceeds the max retry count, it sets the error code and type and jumps to State 100. Otherwise, it sets `repeat_request` to true and jumps to State 100.\n       - If `CTRL.TYP = 99` (i.e., parsing is complete), it jumps to State 100.\n\n     - **State 100**: Checks if a retry is needed.\n       - If `repeat_request` is true, it records the current timestamp `repeat_tx` and proceeds to State 110.\n       - If `cycle = 0` and no errors (`ERROR_T = 0`), it proceeds to State 50, increments `cycle`, and resets `repeat_count`.\n       - Otherwise, it proceeds to State 0, sets `BUSY` to false, and `DONE` to true (if no errors).\n\n     - **State 110**: Waits for the retry time.\n       - If the current timestamp `tx` is greater than `repeat_tx + repeat_wait_time`, it resets `repeat_request` to false and proceeds to State 50.\n\n  -- REGION DNS_CLIENT\n     This region calls the `DNS_CLIENT` function block to resolve the URL domain.\n     - Activates DNS resolution based on the current state (`state=40`).\n\n  -- REGION HTTP_GET\n     This region calls the `HTTP_GET` function block to send an HTTP GET request.\n     - Activates the HTTP request based on the current state (`state=60`).\n     - Releases the network buffer in State 100.\n\n  -- REGION activate_last\n     This region updates the `activate_last` variable to detect edge changes in the `ACTIVATE` signal.\n     - Assigns the current value of `ACTIVATE` to `activate_last` to detect edge changes in the next cycle.\n\n- Output Results\n  The function block's output includes the busy flag, completion flag, error code, and error type.\n  - If the function block completes successfully, `DONE` is true, and `BUSY` is false.\n  - If an error occurs, `ERROR_C` and `ERROR_T` indicate the specific cause.\n  - The `BUSY` flag is true during processing and false upon completion.", "name": "YAHOO_WEATHER"}