Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This function block `_RMP_W` implements a ramp generator that gradually changes the value of `RMP` based on the input direction and rise time (`TR`). `RMP` is a WORD-type variable representing the ramp output value. The function block calculates the step size over time and adjusts the sign of the step based on the direction (`DIR`), ultimately clamping the result within the range of 0 to 65535.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: `DIR` (direction, BOOL type), `E` (enable, BOOL type, default value TRUE), `TR` (rise time, TIME type).\n  - Input/output variables: `RMP` (ramp output value, WORD type).\n  - Internal variables: `tx` (current timestamp, DWORD type), `tl` (last update timestamp, DWORD type), `step` (step size, DWORD type), `init` (initialization flag, BOOL type), `last_dir` (previous direction, BOOL type).\n\n- Main Logic\n  -- REGION Main Logic\n    1. **Get Current Time**: `tx := T_PLC_MS();` retrieves the current PLC timestamp (in milliseconds).\n    2. **Enable and Initialization Check**:\n       - If `E` is TRUE and `init` is TRUE, proceed with ramp generation logic.\n       - If `E` is FALSE or `init` is FALSE, update `tl` to the current time and set `init` to TRUE.\n    3. **Direction Change Detection**:\n       - If the current direction `DIR` differs from the previous direction `last_dir`, update `tl` to the current time and set `last_dir` to the current direction.\n    4. **Step Size Calculation**:\n       - If `TR` is greater than 0 seconds, compute the step size `step`. The formula is: `(tx - tl) << 16 / TIME_TO_DWORD(TR)`. Here, `SHL` (shift left) is equivalent to multiplying by 65536.\n       - If `TR` is 0 seconds, directly set the step size to the maximum value of 65535.\n    5. **Apply Step Size**:\n       - If the step size `step` is greater than 0, update `tl` to the current time.\n       - If the direction `DIR` is FALSE, negate the step size.\n       - Apply the step to `RMP` and use the `LIMIT` function to clamp the result between 0 and 65535.\n    6. **Output Result**:\n       - The value of `RMP` changes incrementally based on the step size and is output externally from the function block.\n\n- Summary\n  This function block calculates step sizes over time and adjusts the `RMP` value gradually based on direction. It supports enable control and direction switching while ensuring the output remains within valid bounds. It is suitable for scenarios requiring smooth transitions, such as motor control or analog signal generation.", "name": "_RMP_W"}