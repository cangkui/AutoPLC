Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code defines a functional block named `CALENDAR_CALC`, designed to compute and update calendar-related information, including local time, sunrise and sunset times, holiday details, and solar position. The block primarily handles time and date-related logic and dynamically updates calendar data based on input parameters.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: `SPE` (special event flag) and `H` (solar elevation adjustment value).\n  - Input/output variables: `XCAL` (calendar data structure) and `HOLIDAYS` (holiday data array).\n  - Internal variables: `last` (previous UTC time), `last_day` (previous date), `holy` (holiday calculation module), `sun` (sunrise/sunset calculation module), `last_hour` (previous hour value), `utod` (UTC to TOD time conversion), `pos` (solar position calculation module), `plast` (last special event processing time).\n  - Temporary variables: `dtemp` (temporary date variable) and `tmp` (temporary hour variable).\n\n- Main Logic\n  -- REGION Time Update and Local Time Calculation\n     When `XCAL.UTC` (UTC time) changes, the following logic is executed:\n     1. Update the `last` variable to the current `XCAL.UTC`.\n     2. Convert `XCAL.UTC` to `TOD` (time of day) format and store it in `utod`.\n     3. Convert `XCAL.UTC` to local time (accounting for daylight saving time and time zone offset) and store it in `XCAL.LOCAL_DT`.\n     4. Extract the date and time from `XCAL.LOCAL_DT` and store them in `XCAL.LOCAL_DATE` and `XCAL.LOCAL_TOD`, respectively.\n     5. Calculate the current day of the month and store it in `dtemp`.\n     6. Compare the current time with sunrise/sunset times to determine if it is nighttime and update `XCAL.night`.\n\n  -- REGION Hour Change Handling\n     When the current hour (`HOUR(xcal.LOCAL_TOD)`) differs from `last_hour`, the following logic is executed:\n     1. Determine whether daylight saving time is active and update `XCAL.DST_ON`.\n     2. Update `last_hour` to the current hour.\n\n  -- REGION Date Change Handling\n     When the current date (`dtemp`) differs from `last_day`, the following logic is executed:\n     1. Update `last_day` to the current date.\n     2. Extract the year, month, day, and weekday from `XCAL.LOCAL_DATE` and store them in `XCAL.YEAR`, `XCAL.MONTH`, `XCAL.DAY`, and `XCAL.WEEKDAY`, respectively.\n     3. Call the `HOLY` module to check if the current date is a holiday and update `XCAL.HOLIDAY` and `XCAL.HOLY_NAME`.\n     4. Call the `sun` module to calculate sunrise, sunset, and midday times, updating `XCAL.SUN_RISE`, `XCAL.SUN_SET`, and `XCAL.SUN_MIDDAY`. Account for time zone offset and daylight saving time.\n     5. Calculate the current workweek information and update `XCAL.WORK_WEEK`.\n\n  -- REGION Special Event Handling\n     When `SPE` (special event flag) is true and the current time differs from the last special event processing time (`plast`) by more than 25 seconds, the following logic is executed:\n     1. Update `plast` to the current time.\n     2. Call the `pos` module to compute the current solar position and update `XCAL.SUN_HOR` (solar horizontal position) and `XCAL.SUN_VER` (solar vertical position).\n\n- Output\n  The primary outputs of the block are passed through the `XCAL` and `HOLIDAYS` variables. `XCAL` contains updated calendar information such as local time, date, sunrise/sunset times, holiday details, and solar position. The `HOLIDAYS` array stores detailed holiday information.", "name": "CALENDAR_CALC"}