Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThe `DCF77` function block processes data from the DCF77 time signal and converts it into usable date and time information. It also supports daylight saving time (DST) and timezone offset handling.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables: Receive signal (REC), Set signal (SET), Set date-time (SDT), DST input (DSI), Sync timeout (SYNC_TIMEOUT), Time offset (TIME_OFFSET), DST enable (DST_EN).\n - Output variables: Time pulse (TP), DST status (DS), Day of the week (WDAY), Error flag (ERROR), Real-time clock (RTC), Adjusted real-time clock (RTC1), Milliseconds (MSEC), Sync status (SYNC).\n - Internal variables: Local time (mez), Coordinated Universal Time (utc), State (state), Edge detection (edge), Time variables (tx, ty, last), Bit array (bits), Counters (cnt, i), Old time (old_time), Minute (minute), Hour (hour), Day (day), Month (month), Year (year), Last sync time (last_sync), Time variables (t1, tz), Initialization flag (init).\n\n- Main Logic Section\n-- REGION Signal Processing\n   This region is the core of the function block, responsible for processing input data from the DCF77 time signal and decoding it into date and time information. The detailed logic flow is as follows:\n   - **Signal Detection & Edge Detection**:\n     - Uses `rec XOR edge` to detect signal changes (rising or falling edges).\n     - Determines signal type based on signal level and time difference (`tx`):\n       - If the signal is low and the time difference is between 1700ms and 2000ms, it indicates the start of a new minute, resets the state variable `state` to 0, and sets the time pulse flag `tp`.\n       - If the signal is low and the time difference is between 700ms and 1000ms, it indicates the end of a bit, increments the state variable `state`.\n       - If the signal is high and the time difference is less than 120ms, the bit value is 0.\n       - If the signal is high and the time difference is between 120ms and 250ms, the bit value is 1.\n       - If the signal does not meet the above conditions, the error flag `error` is set to true, and the state variable `state` is reset to 0.\n   - **Complete Signal Parsing**:\n     - When the state variable `state` reaches 58, it indicates a complete DCF77 signal (58 bits) has been received.\n     - First, checks the start bit (`bits[0]`) and parity bits (XOR result of `bits[17]` and `bits[18]`, and `bits[20]`). If the check fails, the error flag `error` is set to true.\n     - **Minute Parsing**:\n       - Extracts minute information from the bit array (`bits[21]` to `bits[28]`) and calculates the minute value.\n       - Checks if the minute value is valid (0 to 59) and verifies the parity bit (`bits[28]`). If invalid, the error flag `error` is set to true.\n     - **Hour Parsing**:\n       - Extracts hour information from the bit array (`bits[29]` to `bits[35]`) and calculates the hour value.\n       - Checks if the hour value is valid (0 to 23) and verifies the parity bit (`bits[35]`). If invalid, the error flag `error` is set to true.\n     - **Day Parsing**:\n       - Extracts day information from the bit array (`bits[36]` to `bits[41]`) and calculates the day value.\n       - Checks if the day value is valid (1 to 31). If invalid, the error flag `error` is set to true.\n     - **Weekday Parsing**:\n       - Extracts weekday information from the bit array (`bits[42]` to `bits[44]`) and calculates the weekday value.\n       - Checks if the weekday value is valid (1 to 7). If invalid, the error flag `error` is set to true.\n     - **Month Parsing**:\n       - Extracts month information from the bit array (`bits[45]` to `bits[49]`) and calculates the month value.\n       - Checks if the month value is valid (1 to 12). If invalid, the error flag `error` is set to true.\n     - **Year Parsing**:\n       - Extracts year information from the bit array (`bits[50]` to `bits[57]`) and calculates the year value.\n       - Converts the year value to a full year (if the year value is >= 70, adds 1900; otherwise, adds 2000).\n     - **Parity Check**:\n       - Performs a parity check on bits 36 to 58 to verify if the number of 1s is even. If the check fails, the error flag `error` is set to true.\n     - **Time Continuity Check**:\n       - Checks if the parsed time is continuous with the previous time (e.g., minute increments). If not, the error flag `error` is set to true.\n     - **DST Handling**:\n       - Determines if daylight saving time (`DS`) is active based on bit `bits[17]` and adjusts Coordinated Universal Time (`UTC`).\n\n-- REGION Time Synchronization\n   This region handles time synchronization logic to ensure the real-time clock (`RTC`) and adjusted real-time clock (`RTC1`) remain updated:\n   - **Initialization**:\n     - If the initialization flag `init` is false or the set signal `SET` is active, initializes the time variable `utc` to the set date-time `SDT` and sets the time pulse flag `tp` to true.\n   - **Time Pulse Handling**:\n     - If the time pulse flag `tp` is true, adjusts the real-time clock `RTC` and adjusted real-time clock `RTC1` based on DST status `DS` and timezone offset `TIME_OFFSET`.\n     - Sets the sync status `SYNC` to true and updates the last sync time `last_sync`.\n   - **Time Increment**:\n     - If the real-time clock `RTC` is greater than 0 and the time difference `t1 - ty` exceeds 1 second, increments `RTC` and `RTC1`, updates the sync status `SYNC`, and the weekday `WDAY`.\n   - **Millisecond Calculation**:\n     - Calculates the milliseconds `msec` between the current time and the last time update.\n\n-- REGION DST Handling\n   This region determines if daylight saving time is active based on the DST enable flag `DST_EN` and Coordinated Universal Time `utc`, updating the DST status `DS` accordingly.\n\n-- REGION Error Handling\n   This region manages error logic:\n   - If signal detection or data validation fails, sets the error flag `error` to true.\n   - If time information is discontinuous (e.g., minute does not increment), sets the error flag `error` to true.\n\n-- REGION Output Update\n   This region updates output variables:\n   - Updates the corresponding output variables based on the time pulse flag `tp`, DST status `DS`, real-time clock `RTC`, adjusted real-time clock `RTC1`, sync status `SYNC`, weekday `WDAY`, and milliseconds `msec`.\n   - If sync times out, sets the sync status `SYNC` to false.", "name": "DCF77"}