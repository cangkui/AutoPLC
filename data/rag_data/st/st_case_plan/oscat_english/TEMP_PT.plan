Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis code defines a function named `TEMP_PT` that calculates temperature based on an input resistance value (`Res`) and a reference resistance value (`R0`). The function uses a mathematical model for platinum resistance thermometers (PT) and selects different calculation methods depending on the input value. If `Res` is greater than or equal to `R0`, it solves for temperature using a quadratic equation; otherwise, it employs an iterative approach to approximate the temperature value.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables: `Res` (current resistance value), `R0` (reference resistance value).\n - Constants: `A` and `B` are constants for platinum resistance thermometers, and `accuracy` specifies the precision for the iterative method.\n - Internal variables: `step` (iteration step size), `X` and `Y` (intermediate calculation results), `t1` (discriminant of the quadratic equation), `pt` (pointer to `step`).\n\n- Main Logic\n-- REGION Determine Resistance Range\n   First, the function selects the calculation method based on the relationship between `Res` and `R0`:\n   - If `Res >= R0`, it uses the quadratic equation to compute the temperature.\n   - If `Res < R0`, it applies the iterative method to gradually approach the temperature value.\n\n-- REGION Quadratic Equation Calculation\n   When `Res >= R0`, the function calculates intermediate variables `X` and `Y`:\n   ```plaintext\n   X := A * R0;\n   Y := B * R0;\n   ```\n   Then, it computes the discriminant `t1` of the quadratic equation:\n   ```plaintext\n   t1 := X * X - 4.0 * Y * (R0 - Res);\n   ```\n   If the discriminant `t1` is less than 0, the function returns a large value (10000.0) to indicate that the temperature cannot be calculated. Otherwise, it uses the quadratic formula to determine the temperature:\n   ```plaintext\n   TEMP_PT := (-X + SQRT(t1)) / (2.0 * Y);\n   ```\n\n-- REGION Iterative Method Calculation\n   When `Res < R0`, the function uses an iterative approach to approximate the temperature. It initializes the temperature to -100.0 and sets the iteration step size `step` to 50.0. Then, it enters a `WHILE` loop that continues until the step size is smaller than the specified `accuracy`. Within the loop:\n   - It calls the `RES_PT` function to compute the resistance value corresponding to the current temperature.\n   - If the calculated resistance is less than `Res`, it increases the temperature; otherwise, it decreases the temperature.\n   - The step size is gradually reduced via the pointer `pt` to improve calculation precision.\n   Finally, the function returns the computed temperature value.\n\n-- REGION Return Result\n   The function returns the final temperature value `TEMP_PT` based on the above logic.\n\n- Summary\nThis code employs two distinct methods to calculate temperature, with the choice depending on the magnitude of the input resistance value. For larger resistance values, it uses a direct quadratic equation solution, while for smaller values, it applies an iterative approximation. This approach combines the precision of mathematical modeling with the flexibility of iterative methods to efficiently determine the temperature value.", "name": "TEMP_PT"}