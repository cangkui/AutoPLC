Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis code implements a functional block named `STACK_16`, which simulates a stack data structure with 16 elements. A stack is a Last-In-First-Out (LIFO) data structure that supports push (write data) and pop (read data) operations. The block also provides status indicators for stack empty and stack full conditions, as well as a reset operation.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables: `Din` (input data), `E` (enable signal), `RD` (read signal), `WD` (write signal), `RST` (reset signal).\n - Output variables: `Dout` (output data), `EMPTY` (stack empty flag), `FULL` (stack full flag).\n - Internal variables: `stack` (stack array for data storage), `pt` (stack pointer indicating the current top position).\n - Constants: `n` (maximum stack capacity, defined as 15).\n\n- Main Logic\n-- REGION Reset Logic\n   When the reset signal `RST` is true, the block resets the stack state. Specific actions include:\n   - Resetting the stack pointer `pt` to 0, indicating an empty stack.\n   - Setting the `EMPTY` flag to `TRUE`, indicating the stack is empty.\n   - Setting the `FULL` flag to `FALSE`, indicating the stack is not full.\n   - Resetting the output data `Dout` to 0.\n   This logic ensures the stack returns to its initial state upon reset.\n\n-- REGION Stack Operation Logic\n   When the enable signal `E` is true, the block performs stack operations based on the read signal `RD` and write signal `WD`.\n   - **Pop Operation** (read data):\n     If the stack is not empty (`EMPTY = FALSE`) and the read signal `RD` is true, the pop operation is executed:\n     - Decrement the stack pointer `pt` to point to the next top position.\n     - Output the top data `stack[pt]` to `Dout`.\n     - Update the `EMPTY` flag: If `pt` is 0, the stack is empty, and `EMPTY` is set to `TRUE`.\n     - Set the `FULL` flag to `FALSE`, as the stack cannot be full after a pop operation.\n   - **Push Operation** (write data):\n     If the stack is not full (`FULL = FALSE`) and the write signal `WD` is true, the push operation is executed:\n     - Write the input data `Din` to the top position `stack[pt]`.\n     - Increment the stack pointer `pt` to point to the next top position.\n     - Update the `FULL` flag: If `pt` exceeds the maximum capacity `n`, the stack is full, and `FULL` is set to `TRUE`.\n     - Set the `EMPTY` flag to `FALSE`, as the stack cannot be empty after a push operation.\n\n- Summary\nThe `STACK_16` block implements basic stack operations—push, pop, reset, and status monitoring—through simple logic. The reset signal `RST` initializes the stack, the enable signal `E` controls operation execution, and the read signal `RD` and write signal `WD` trigger pop and push operations, respectively. The stack's state is reflected in real-time via the `EMPTY` and `FULL` flags, enabling external logic to monitor stack usage.", "name": "STACK_16"}