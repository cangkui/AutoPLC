Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This functional block is named 'FTP_CLIENT' and is designed to implement FTP client functionality, including file upload, download, and deletion. It manages the various stages of an FTP session using a state machine and handles network communication, error detection, and timeout control.\n\n- Variable Definitions\n  The code defines the following types of variables:\n   - Input variables: Activate, Filename, FTP URL, Download Flag, Activate Flag, Delete File Flag, Timeout Duration, DNS IP Address, PLC IP Address.\n   - Output variables: Completion Flag, Busy Flag, Error Code, Error Type.\n   - Internal variables: IP Control Structure, Network Buffer, URL Data, DNS Client, File Server, State Variables, Temporary Variables, Timeout Timer, etc.\n\n- Main Logic Section\n  -- REGION Initialization (Step 00)\n     When the activation signal (ACTIVATE) changes from false to true, the FTP session is initialized. First, reset the file size (ftp_file_size) to 0 and set the timeout duration (TIMEOUT) to at least 10 seconds. Additionally, set two extra timeout durations (timeout2 and timeout3) for subsequent timer control. Reset the completion flag (DONE), error code (ERROR_C), and error type (ERROR_T), and clear the file server diagnostic info (FSD.ERROR).\n     Next, parse the FTP URL (FTP_URL) and store it in the URL_DATA structure. If no username is provided in the URL, use the default values 'Anonymous' and 'User@'. Then, parse the filename (FILENAME) and path, and set the FTP path (ftp_path). If the URL path doesn't include a filename, append the filename to the path. After initialization, proceed to the next step (step 10).\n\n  -- REGION DNS Resolution (Step 10)\n     In step 10, call the DNS client (DNS_CLIENT) to resolve the domain name of the FTP server (URL_DATA.DOMAIN). If DNS resolution succeeds (DNS_CLIENT.DONE is true), proceed to step 20. If it fails (DNS_CLIENT.ERROR is not 0), set the error code (ERROR_C) and error type (ERROR_T), then jump to the error handling step (step 980).\n\n  -- REGION FTP Connection (Step 20)\n     In step 20, configure the IP control structure (IP_C1) to connect to the FTP server's control port (port 21). Set the IP address to the DNS resolution result (DNS_CLIENT.IP4) and enable the connection (IP_C1.C_ENABLE = true). Also, reset the receive buffer (R_BUF1.SIZE) to 0 and disable the second IP control structure (IP_C2.C_ENABLE = false). Then, proceed to step 30.\n\n  -- REGION FTP Login (Step 30)\n     In step 30, wait for the FTP server's welcome message (status code 220). If status code 220 is received, send the username (USER command) and store the command string in snd_text. Set the next step to step 40 and proceed to the sending step (step 999).\n\n  -- REGION Send Username (Step 40)\n     In step 40, wait for the server's response. If status code 331 (password required) is received, send the password (PASS command) and store the command string in snd_text. Set the next step to step 50 and proceed to the sending step (step 999). If status code 230 (login successful) is received, skip sending the password and proceed directly to step 50.\n\n  -- REGION Set Transfer Mode (Step 50)\n     In step 50, send the 'TYPE I' command to set binary transfer mode and store the command string in snd_text. Set the next step to step 54 and proceed to the sending step (step 999).\n\n  -- REGION Get File Size (Step 54)\n     In step 54, if the download flag (FTP_DOWNLOAD) is true, send the 'SIZE' command to get the file size and store the command string in snd_text. Set the next step to step 56 and proceed to the sending step (step 999). If the download flag is false, proceed directly to step 60.\n\n  -- REGION Parse File Size (Step 56)\n     In step 56, wait for the server's response (status code 213) and parse the file size. Extract the file size from the response text and convert it to an unsigned double word (UDINT), storing it in ftp_file_size. Then, proceed to step 60.\n\n  -- REGION Configure Data Transfer Connection (Step 60)\n     In step 60, decide whether to use active or passive mode based on the activate flag (FTP_ACTIV). If active mode is used, send the 'PORT' command and store the command string in snd_text. Set the next step to step 80 and proceed to the sending step (step 999). If passive mode is used, send the 'PASV' command and store the command string in snd_text. Set the next step to step 70 and proceed to the sending step (step 999).\n\n  -- REGION Parse Passive Mode Response (Step 70)\n     In step 70, wait for the server's response (status code 227) and parse the returned IP address and port. Extract the IP address and port from the response text and store them in dw_tmp and w_tmp. Then, proceed to step 100.\n\n  -- REGION Establish Data Transfer Connection (Step 100)\n     In step 100, configure the IP control structure (IP_C2) to establish the data transfer connection. Based on the transfer mode (active or passive), set the IP address (dw_tmp) and port (w_tmp), and enable the connection (IP_C2.C_ENABLE = true). Also, reset the receive buffer (R_BUF2.SIZE) to 0. Then, proceed to step 120.\n\n  -- REGION Data Transfer (Step 120)\n     In step 120, check the status of the data transfer connection (IP_C2.C_STATE). If the connection is successful, decide whether to send the 'RETR' command (download) or 'STOR' command (upload) based on the download flag (FTP_DOWNLOAD), and store the command string in snd_text. Set the next step to step 400 (download) or step 140 (upload) and proceed to the sending step (step 999).\n\n  -- REGION File Upload (Step 140)\n     In step 140, wait for the server's response (status code 125 or 150), then begin uploading the file. In step 160, configure the file server (FS) to read the file content and send it to the FTP server. Set the file server mode (FSD.MODE) to 1 (read file) and enable data transfer (IP_C2.MAILBOX[2] = 1). Then, proceed to step 200.\n\n  -- REGION File Upload Completion Check (Step 200)\n     In step 200, check if the file upload is complete (FSD.MODE = 0 and FSD.ERROR = 0). If not, continue uploading; otherwise, close the data transfer connection (IP_C2.MAILBOX[2] = 0) and proceed to step 210.\n\n  -- REGION File Upload Completion (Step 210)\n     In step 210, check if the file is fully uploaded (FSD.FILE_SIZE - FSD.OFFSET = 0). If not, continue uploading; otherwise, close the data transfer connection (IP_C2.C_ENABLE = false) and proceed to step 300.\n\n  -- REGION File Download (Step 400)\n     In step 400, send the 'RETR' command to download the file and store the command string in snd_text. Set the next step to step 410 and proceed to the sending step (step 999).\n\n  -- REGION File Download Start (Step 410)\n     In step 410, wait for the server's response (status code 125 or 150), then begin downloading the file. Enable data transfer (IP_C2.R_OBSERVE = true) and proceed to step 420.\n\n  -- REGION File Download Processing (Step 420)\n     In step 420, configure the file server (FS) to receive the file content and save it locally. Set the file server mode (FSD.MODE) to 3 (write file) and proceed to step 460.\n\n  -- REGION File Download Completion Check (Step 440)\n     In step 440, check if the file download is complete (FSD.FILE_SIZE = ftp_file_size). If not, continue downloading; otherwise, close the data transfer connection (IP_C2.C_ENABLE = false) and proceed to step 700.\n\n  -- REGION File Deletion (Step 700)\n     In step 700, if the download flag is true and the delete file flag (FILE_DELETE) is true, send the 'DELE' command to delete the remote file and store the command string in snd_text. Set the next step to step 720 and proceed to the sending step (step 999).\n\n  -- REGION File Deletion Completion (Step 720)\n     In step 720, wait for the server's response (status code 250), then proceed to step 740.\n\n  -- REGION End FTP Session (Step 740)\n     In step 740, send the 'QUIT' command to end the FTP session and store the command string in snd_text. Set the next step to step 760 and proceed to the sending step (step 999).\n\n  -- REGION Close Connection (Step 760)\n     In step 760, wait for the server's response (status code 221), then close the control connection (IP_C1.C_ENABLE = false). If no file was downloaded and the delete file flag is true, delete the local file (FSD.MODE = 4). Then, proceed to step 900.\n\n  -- REGION Completion Handling (Step 900)\n     In step 900, set the completion flag (DONE) to true and proceed to step 980.\n\n  -- REGION Cleanup and Reset (Step 980)\n     In step 980, close all connections (IP_C1.C_ENABLE and IP_C2.C_ENABLE = false), reset the buffers (S_BUF1.SIZE, S_BUF2.SIZE, R_BUF1.SIZE, R_BUF2.SIZE = 0), and clear the file server mode (FSD.MODE = 5). Then, proceed to step 990.\n\n  -- REGION Check Connection Status (Step 990)\n     In step 990, check if all connections are closed (IP_C1.C_STATE and IP_C2.C_STATE = 0) and reset the state machine (step 0).\n\n  -- REGION Error Handling\n     If an error occurs at any step (e.g., network error, file server error, or timeout), set the error code (ERROR_C) and error type (ERROR_T), then jump to step 980 for cleanup and reset.\n\n  -- REGION Timer\n     Use the TON timer (TON_WAIT) to detect timeouts. If a timeout occurs, set the error code (ERROR_C) and error type (ERROR_T), then jump to step 980.\n\n  -- REGION Send and Receive Data\n     In the sending step (snd_step), convert the command string to a buffer and send it to the FTP server. In the receiving step, parse the server's response and decide the next action based on the status code.", "name": "FTP_CLIENT"}