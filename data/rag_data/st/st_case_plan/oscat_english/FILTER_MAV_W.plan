Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\n  This code implements a Moving Average Filter (Moving Average Filter) designed to process input data of type WORD. The window size of the filter is determined by the input parameter N, with a maximum supported window size of 32 data points. The filter's output Y is the moving average of the input data X.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: X (input data), N (window size), RST (reset signal).\n  - Output variables: Y (filtered output data).\n  - Internal variables: init (initialization flag), buffer (data buffer for storing historical data), i (index variable for traversing the buffer), sum (accumulated sum for calculating the average).\n  - Temporary variables: tmp (temporary variable for storing intermediate values during calculations).\n\n- Main Logic\n  -- REGION Initialization and Reset Handling\n     First, the code restricts the input parameter N to a range between 1 and 32, ensuring the window size does not exceed the buffer's maximum capacity. Then, it checks whether initialization or reset is needed:\n     - If the initialization flag `init` is false, or the reset signal `RST` is true, or the window size N is 0, the initialization operation is performed.\n     - During initialization, all elements in the buffer are set to the current input value X, the accumulated sum `sum` is initialized to Y * N, and the output Y is set to the current input value X.\n     This logic ensures that the buffer and accumulated sum are correctly initialized when the filter starts or resets, preventing the filtered results from being affected by undefined data.\n\n  -- REGION Moving Average Calculation\n     If no initialization or reset is required, the moving average calculation is performed:\n     - First, the index variable `i` is updated to cycle incrementally between 1 and N.\n     - Then, the accumulated sum `sum` is updated: the current input value X is added to the sum, and the oldest data in the buffer (i.e., `buffer[i]`) is subtracted.\n     - Next, the new moving average Y is calculated: the accumulated sum `sum` is divided by the window size N, and the result is converted to type WORD.\n     - Finally, the current input value X is stored in the buffer, overwriting the oldest data.\n     This logic implements the core functionality of the moving average filter, ensuring that the output Y always reflects the average of the latest N input data points by continuously updating the accumulated sum and buffer.\n\n  -- REGION Output Result\n     Ultimately, the filtered output Y is passed to the output variable for external use.\n\n- Summary\n  This function block implements a simple yet effective moving average filter, suitable for scenarios requiring smoothing of input data. Through the three main steps of initialization, reset, and moving average calculation, the code ensures the filter's correctness and stability. The maximum window size N is 32, making it suitable for most application scenarios.", "name": "FILTER_MAV_W"}