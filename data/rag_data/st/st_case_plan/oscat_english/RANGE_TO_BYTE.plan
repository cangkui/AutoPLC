Natural Language Requirement:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis function, named 'RANGE_TO_BYTE', is used to map a real number within a specified range to a byte value (0 to 255). It takes three input parameters: X (the value to be mapped), low (the lower bound of the range), and high (the upper bound of the range), and returns a byte-type result.\n\n- Variable Definitions\nThe code defines three types of variables:\n - Input variables: X (the value to be mapped), low (the lower bound), high (the upper bound).\n - No internal or temporary variables.\n - No output variables, but the function returns a byte-type result.\n\n- Main Logic\nThe function's logic consists of the following steps:\n 1. **Limit Input Value**: Use the `LIMIT` function to constrain the input value `X` between `low` and `high`, ensuring `X` does not exceed the specified range.\n 2. **Normalize to 0-1 Range**: Subtract `low` from the constrained value and divide by the range (`high - low`), normalizing the value to a 0 to 1 range.\n 3. **Map to 0-255 Range**: Multiply the normalized value by 255 to map it to a 0 to 255 range.\n 4. **Truncate to Integer**: Use the `TRUNC` function to truncate the floating-point result to an integer.\n 5. **Convert to Byte**: Convert the integer result to a byte type and return it.\n\n- Detailed Steps\n 1. `LIMIT(low, X, high)`: Ensures `X` is between `low` and `high`.\n 2. `(LIMIT(low, X, high) - low)`: Subtracts the lower bound to get the offset relative to `low`.\n 3. `* 255.0 / (high - low)`: Normalizes the offset to a 0 to 255 range.\n 4. `TRUNC(...)`: Truncates the floating-point result to an integer.\n 5. `DINT_TO_INT(...)`: Converts the double integer to an integer.\n 6. `INT_TO_BYTE(...)`: Converts the integer to a byte and returns it.\n\n- Example\nAssume `low = 0.0`, `high = 10.0`, `X = 5.0`:\n 1. `LIMIT(0.0, 5.0, 10.0)` = 5.0\n 2. `(5.0 - 0.0)` = 5.0\n 3. `5.0 * 255.0 / 10.0` = 127.5\n 4. `TRUNC(127.5)` = 127\n 5. `DINT_TO_INT(127)` = 127\n 6. `INT_TO_BYTE(127)` = 127\n\nThe final return value is 127.", "name": "RANGE_TO_BYTE"}