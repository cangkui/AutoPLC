Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\nThis code is a simple function named 'FUNCTION_CODE' that extracts a byte from a specified position in a string. It uses pointer operations to access a specific character in the string and returns the byte value of that character. If the specified position is invalid, it returns 0.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables: `STR` is a string, `POS` is an integer representing the character position to extract.\n - Internal variables: `PT` is a pointer to a byte, used to access a specific character in the string.\n\n- Main Logic\n-- REGION Input Validation and Initialization\n   First, it checks if `POS` is within a valid range. If `POS` is less than 1 or greater than the length of the string, it sets `CODE` to 0 and returns. This prevents accessing invalid memory locations.\n-- REGION Pointer Operation and Byte Extraction\n   If `POS` is valid, it calculates the address of the character to access. It obtains the starting address of the string via `ADR(STR)`, then adds `POS - 1` (since string indexing starts at 1) to get the target character's address. The pointer `PT` is set to this address, and the byte value at that address is accessed via `PT^`, which is then assigned to `CODE`.\n-- REGION Return Result\n   Finally, the function returns `CODE`, which is the byte value at the specified position. If `POS` is invalid, it returns 0.\n\n- Summary\nThis function uses pointer operations to extract the byte value of a specified position in a string. It first validates the input for correctness, then accesses the target character via a pointer and returns its byte value. If the input is invalid, it returns 0 to ensure program safety.", "name": "CODE"}