Natural Language Requirement:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This function block is named `BYTE_OF_BIT`. Its purpose is to combine 8 Boolean inputs (B0 to B7) into a single byte (BYTE) output. Each Boolean value corresponds to one bit in the byte, with B0 representing the least significant bit (LSB) and B7 representing the most significant bit (MSB).\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: B0 to B7, all of Boolean type, representing the 8 bits of the byte.\n  - Output variable: `BYTE_OF_BIT`, of byte type, representing the combined result of the 8 Boolean values.\n\n- Main Logic\n  -- REGION Combining Boolean Values into a Byte\n     - The core logic uses `SHL` (shift left) and `OR` (bitwise OR) operations to sequentially combine the 8 Boolean values into one byte.\n     - First, the highest bit B7 is converted to byte type (`BOOL_TO_BYTE(B7)`), then shifted left by 1 bit (`SHL(..., 1)`) to make room for the next bit, B6.\n     - Next, B6 is converted to byte type and merged with the previous result using the `OR` operation. The result is again shifted left by 1 bit to make room for B5.\n     - This process is repeated for B5, B4, B3, B2, B1, and finally B0.\n     - Ultimately, all Boolean values are combined into a single byte, which is assigned to the output variable `BYTE_OF_BIT`.\n\n  Example:\n  - If B7 = TRUE, B6 = FALSE, B5 = TRUE, B4 = FALSE, B3 = TRUE, B2 = FALSE, B1 = TRUE, B0 = FALSE, the output byte will be `10101010` (binary), or `0xAA` (hexadecimal).\n\n- Summary\n  This function block generates a byte by combining Boolean values bit by bit. It utilizes shift-left and bitwise OR operations to ensure each Boolean value is correctly mapped to the corresponding bit in the byte. This operation is particularly useful when dealing with bitmasks or bitwise manipulations.", "name": "BYTE_OF_BIT"}