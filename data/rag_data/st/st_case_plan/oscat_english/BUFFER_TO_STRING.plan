Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis code defines a function named `BUFFER_TO_STRING`, which converts a portion of a byte array (buffer) into a string. The function takes a pointer to the byte array, the array size, a starting index, and an ending index as inputs, and returns a string.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables: `PT` (pointer to the byte array), `SIZE` (size of the array), `START` (starting index), `STOP` (ending index).\n - Internal variables: `ps` (pointer to the string), `i` (loop counter), `stp` (adjusted ending index), `sta` (adjusted starting index).\n\n- Main Logic\n-- REGION Initialization\n   - First, the `ps` pointer is initialized to point to the address of the return string.\n   - If the input size `SIZE` is 0, the function returns immediately since no processing is needed.\n   - The `MIN` function is used to ensure the `START` and `STOP` indices are within the valid range of the array (i.e., not exceeding `SIZE - 1`).\n   - If the calculated subarray length (`stp - sta + 1`) exceeds the maximum string length (`STRING_LENGTH`), `stp` is adjusted to ensure the string does not exceed the maximum length.\n\n-- REGION Data Copying\n   - A `FOR` loop is used to iterate through the byte array from `sta` to `stp`, copying each byte to the string pointed to by `ps`.\n   - After each copy, the `ps` pointer is incremented to point to the next position.\n\n-- REGION String Termination\n   - After the loop completes, the position pointed to by `ps` is set to 0 to mark the end of the string (C-style string terminator).\n\n-- REGION Return Result\n   - The function returns the generated string.", "name": "BUFFER_TO_STRING"}