Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  The function block `NET_VAR_CONTROL` is used for controlling variable transmission over a network. It supports master/slave mode (MASTER/SLAVE) and the UDP protocol, managing the data transfer process through a state machine. The block also includes error handling and a watchdog mechanism to ensure system stability and reliability.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: ACTIVATE (activation control), MASTER (master/slave mode), UDP (UDP protocol), REMOTE_IP4 (remote IP address), REMOTE_PORT (remote port), SCAN_TIME (scan time), WATCHDOG (watchdog timeout).\n  - Output variables: RUN (operational status), ERROR (error code).\n  - Input/output variables: X (network variable data structure, containing buffer, state, error ID, etc.).\n  - Internal variables: IPC (IP control instance), IP_C (IP control management structure), step (state machine step), activate_last (previous activation state), tscan (timer instance), reset (reset flag).\n\n- Main Logic Section\n  -- REGION Error Handling\n     If `X.ERROR_ID` is greater than 0, an error has occurred. In this case, set `X.STATE` to 0, convert the error code to DWORD and output it to `ERROR`, then clear `X.ERROR_ID` and set the state machine step `step` to 999 (error handling state). This ensures the function block can respond promptly and halt operation upon an error.\n\n  -- REGION State Machine\n     The state machine controls the execution flow of the function block via the `step` variable, with the following steps:\n\n     - **Step 00 (Initialization)**:\n       If `ACTIVATE` is true and `activate_last` is false, or `reset` is true, initialization is required. Based on `MASTER` and `UDP` settings, initialize the `IP_C` structure:\n       - If `MASTER` is true, set `IP_C.C_MODE` to 0 (master mode) and jump to step 100.\n       - If `MASTER` is false, set `IP_C.C_MODE` to 2 (slave mode) and jump to step 200.\n       - If `UDP` is true, set the least significant bit of `IP_C.C_MODE` to 1 (enable UDP protocol).\n       Additionally, set the remote port `IP_C.C_PORT`, remote IP address `IP_C.C_IP`, enable `IP_C.C_ENABLE` and `IP_C.R_OBSERVE`, and set `IP_C.TIME_RESET` to true. Clear the send and receive buffer sizes, reset the cycle counter `X.CYCLE` and error ID `X.ERROR_ID`, and set `reset` to false.\n\n     - **Step 100 (Master Mode Preparation)**:\n       If `IP_C.C_STATE` is greater than 127, master mode is ready. Set `X.STATE` to 1 (ready to send), initialize the send buffer, and set `X.BUF_SIZE` to the send buffer size. Store the first byte of the cycle counter `X.CYCLE` in the send buffer, set `X.INDEX` to 1, and jump to step 110.\n\n     - **Step 110 (Master Mode Send)**:\n       Set `X.STATE` to 0 (idle), update the send buffer size to `X.INDEX`, and jump to step 120.\n\n     - **Step 120 (Master Mode Receive)**:\n       If the send buffer size is 0 and the receive buffer size is at least 1, data transfer is complete. Set `X.STATE` to 2 (ready to receive), update `X.BUF_SIZE` to the receive buffer size, set `X.INDEX` to 1, clear the error code `X.ERROR_ID`, increment the cycle counter `X.CYCLE`, set `ERROR` to 0, set `RUN` to true, and jump to step 130.\n\n     - **Step 130 (Master Mode Loop)**:\n       Set `X.STATE` to 0 (idle), clear the receive buffer. If `ACTIVATE` is false, jump to step 999 (end state); if the `tscan` timer times out, jump to step 100 to restart the master mode loop.\n\n     - **Step 200 (Slave Mode Receive)**:\n       If the receive buffer size is at least 1, slave mode has received data. Set `X.STATE` to 2 (ready to receive), update `X.BUF_SIZE` to the receive buffer size, set `X.INDEX` to 1, and jump to step 210.\n\n     - **Step 210 (Slave Mode Send)**:\n       Set `X.STATE` to 1 (ready to send), initialize the send buffer, store the first byte of the receive buffer in the send buffer, clear the receive buffer, set `X.INDEX` to 1, and jump to step 220.\n\n     - **Step 220 (Slave Mode Send Complete)**:\n       Set `X.STATE` to 0 (idle), update the send buffer size to `X.INDEX`, and jump to step 230.\n\n     - **Step 230 (Slave Mode Loop)**:\n       If the send buffer size is 0, data transfer is complete. Clear the error code `ERROR`, set `RUN` to true. If `ACTIVATE` is false, jump to step 999; otherwise, jump to step 200 to restart the slave mode loop.\n\n     - **Step 999 (End State)**:\n       Disable `IP_C.C_ENABLE`, set `RUN` to false, and reset `step` to 0, indicating the function block has stopped.\n\n  -- REGION IP Control and Error Handling\n     Call the `IPC` instance, passing the IP address, port, watchdog timeout, IP control structure, send buffer, and receive buffer. If `IP_C.ERROR` is greater than 0, an IP control error has occurred. Output the error code to `ERROR`, set `RUN` to false, set `reset` to true, and reset `step` to 0. This ensures the function block stops and resets upon an IP control error.\n\n  -- REGION Activation State Tracking and Timer\n     Update `activate_last` to the current `ACTIVATE` state for edge detection. Start the `tscan` timer; when `step` is not 110, the timer begins counting with a timeout period of `SCAN_TIME`. This controls the master mode loop frequency, ensuring periodic data transfer.", "name": "NET_VAR_CONTROL"}