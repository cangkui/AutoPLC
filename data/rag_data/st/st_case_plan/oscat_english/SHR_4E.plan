Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview  \n  This code implements a 4-bit shift register function block named `SHR_4E`. It controls the states of outputs `Q0`, `Q1`, `Q2`, and `Q3` using input signals `SET`, `D0`, `CLK`, and `RST`. The core logic of the function block involves performing data shift operations on the rising edge of the clock, while also supporting reset and set functions.\n\n- Variable Definitions  \n  The code defines the following types of variables:  \n  - **Input Variables**: `SET` (set signal), `D0` (data input), `CLK` (clock signal), `RST` (reset signal).  \n  - **Output Variables**: `Q0`, `Q1`, `Q2`, `Q3` (4-bit output signals).  \n  - **Internal Variables**: `trig` (rising-edge detection trigger, used to detect the rising edge of the clock signal).\n\n- Main Logic Section  \n  -- REGION Rising Edge Detection  \n  The `R_TRIG` function block is used to detect the rising edge of the clock signal `CLK`. The output `Q` of `R_TRIG` becomes `TRUE` when a rising edge is detected, triggering the shift operation.  \n\n  -- REGION Reset and Set Logic  \n  If the `RST` or `SET` signal is `TRUE`, a reset or set operation is performed:  \n  - If `RST` is `TRUE`, all outputs `Q0`, `Q1`, `Q2`, and `Q3` are set to `FALSE`.  \n  - If `SET` is `TRUE`, all outputs `Q0`, `Q1`, `Q2`, and `Q3` are set to `TRUE`.  \n\n  -- REGION Shift Logic  \n  If a clock rising edge is detected (`trig.Q` is `TRUE`), a shift operation is performed:  \n  - The value of `Q3` is updated to the current value of `Q2`.  \n  - The value of `Q2` is updated to the current value of `Q1`.  \n  - The value of `Q1` is updated to the current value of `Q0`.  \n  - The value of `Q0` is updated to the current value of input `D0`.  \n\n  This shift operation gradually propagates the input data `D0` to `Q0`, `Q1`, `Q2`, and `Q3`, realizing the function of a 4-bit shift register.  \n\n- Summary  \n  The core function of this block is to control data shift operations via the clock signal while supporting reset and set functions. It is suitable for scenarios requiring bit-by-bit data transfer, such as pipeline operations or state machine implementations.", "name": "SHR_4E"}