Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  The function block `_RMP_B` is used to implement the Ramp Function. Based on the input direction `DIR` and time parameter `TR`, it gradually changes the output value `RMP`. The core logic of the function block involves calculating the current value of `RMP` according to the time parameter `TR` and the current time, ensuring smoothness during the ramp process.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: `DIR` (direction, `TRUE` means upward, `FALSE` means downward), `E` (enable signal, default is `TRUE`), `TR` (ramp time).\n  - Input/output variables: `RMP` (ramp output value, type `BYTE`).\n  - Internal variables: `tx` (current time), `tl` (last recorded time), `tn` (ramp time), `init` (initialization flag), `last_dir` (previous direction), `start` (ramp starting value).\n\n- Main Logic Section\n  -- REGION Main Logic:\n     The core logic of the function block is divided into two parts:\n     1. **Ramp Calculation**:\n        - First, the current time `tx` is obtained and converted to the `TIME` type.\n        - If the enable signal `E` is `TRUE`, the initialization flag `init` is `TRUE`, the current direction `DIR` matches the previous direction `last_dir`, the current output `RMP` has not reached the target value (`SEL(DIR, 0, 255)`), and the ramp time `TR` equals `tn`, then the `FRMP_B` function is called to compute the new `RMP` value.\n        - The `FRMP_B` function parameters include the starting value `start`, direction `DIR`, elapsed time `tx - tl`, and ramp time `TR`.\n     2. **Initialization and Reset**:\n        - If the above conditions are not met, initialization is performed:\n          - Set `init` to `TRUE`, indicating initialization is complete.\n          - Record the current time `tx` as `tl` for the next calculation.\n          - Assign the ramp time `TR` to `tn` for subsequent comparison.\n          - Record the current `RMP` value as `start`, serving as the ramp's starting value.\n     3. **Direction Update**:\n        - Finally, the current direction `DIR` is recorded in `last_dir` for the next comparison.\n\n- Output Result\n  - The output value `RMP` will gradually change based on the ramp time `TR` and direction `DIR`. If the direction is `TRUE`, `RMP` will incrementally increase from the current value to `255`; if the direction is `FALSE`, `RMP` will decrementally decrease from the current value to `0`.\n  - The smoothness of the ramp process is controlled by the time parameter `TR`, ensuring the change in `RMP` completes within the specified time.\n\n- Key Points\n  - **Ramp Time `TR`**: Controls the time for `RMP` to transition from the starting value to the target value.\n  - **Direction `DIR`**: Determines whether `RMP` increases or decreases.\n  - **Initialization Flag `init`**: Ensures the ramp process starts from the correct initial value.\n  - **Time Records `tx` and `tl`**: Used to calculate the elapsed time during the ramp process, ensuring smoothness.", "name": "_RMP_B"}