Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  The function block is named 'ESR_COLLECT' and is used to gather data from multiple input arrays, storing them into a single output array. The block supports resetting the output array's index position via a reset signal (rst) and fills the output array with data based on the validity of the input data (typ > 0).\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: ESR_0 to ESR_7, each being an array of 4 elements of type esr_data; rst, used for reset functionality.\n  - Input/output variable: pos, representing the current index position of the output array.\n  - Output variable: ESR_OUT, an array of 32 elements of type esr_data, used to store the collected data.\n  - Constants: max_in, representing the maximum index of the input arrays (value 3); max_out, representing the maximum index of the output array (value 32).\n  - Internal variable: cnt, used for loop counting, initialized to -1.\n\n- Main Logic Section\n  -- REGION Reset Logic\n     If the reset signal (rst) is true, or the counter (cnt) is less than 0, the output array's index position (pos) is reset to -1. This indicates the output array is initially empty, ready to be filled with data.\n  -- REGION Data Collection Logic\n     If the reset signal is false and the counter is valid (cnt >= 0), the data collection logic is executed. Through a loop (from 0 to max_in), each element of each input array (ESR_0 to ESR_7) is traversed. If the typ value of the current element is greater than 0, indicating the data is valid, the following operations are performed:\n     1. The INC1 function is used to increment the output array's index position (pos) by 1, ensuring the index does not exceed the max_out limit.\n     2. The valid data is stored at the current index position of the output array (ESR_OUT[pos]).\n     After the loop completes, the output array contains all valid input data.", "name": "ESR_COLLECT"}