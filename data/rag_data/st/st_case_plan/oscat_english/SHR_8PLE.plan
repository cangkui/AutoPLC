Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\nThis code implements an 8-bit parallel shift register function block named `SHR_8PLE`. It supports left shift, right shift, load, and reset operations, and dynamically updates the register values based on input signals.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables: `Din` (data input), `Dload` (load data), `CLK` (clock signal), `UP` (shift direction, default is up/left), `load` (load signal), `RST` (reset signal).\n - Output variable: `DOut` (data output).\n - Internal variables: `edge` (clock edge detection flag, default is true), `register` (8-bit register for storing current state).\n\n- Main Logic Section\n-- REGION Shift Register Logic\n   1. **Clock Signal and Edge Detection**:\n      - When `CLK` is true and `edge` is true and `RST` is false, it indicates a rising clock edge is detected, and shift or load operations begin.\n      - After performing the operation, `edge` is set to false to avoid repeated operations within the same clock cycle.\n      - When `CLK` is false, `edge` is reset to true to detect the next rising clock edge.\n\n   2. **Shift Operation**:\n      - If `UP` is true, perform a left shift:\n        - Use the `SHL` function to shift the register left by one bit.\n        - Write the value of `Din` to the least significant bit (`register.0`).\n        - Output the most significant bit (`register.7`) as `DOut`.\n      - If `UP` is false, perform a right shift:\n        - Use the `SHR` function to shift the register right by one bit.\n        - Write the value of `Din` to the most significant bit (`register.7`).\n        - Output the least significant bit (`register.0`) as `DOut`.\n\n   3. **Load Operation**:\n      - If `load` is true, load the value of `Dload` into the register.\n      - Depending on the value of `UP`, output either the most significant bit (`register.7`) or the least significant bit (`register.0`) as `DOut`.\n\n   4. **Reset Operation**:\n      - If `RST` is true, clear the register and set the output `DOut` to false.\n\n-- REGION Output Update\n   - The value of `DOut` is determined by the shift or load operation, depending on the current state of the register and the value of `UP`.\n\n- Summary\nThis function block controls shift or load operations via the clock signal, supporting left shift, right shift, load, and reset functions. The reset signal has the highest priority and overrides other operations. The output `DOut` always reflects either the least significant bit or the most significant bit of the register, depending on the shift direction.", "name": "SHR_8PLE"}