Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This is a function named `BIT_LOAD_DW2` designed to perform bitwise operations on an input DWORD-type data. Depending on the boolean input `D`, the function executes different bitwise logic and returns the processed DWORD value.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input Variables:\n    - `I`: DWORD type, representing the input 32-bit data.\n    - `D`: BOOL type, determining the operation mode (left shift or right shift).\n    - `P`: INT type, indicating the number of bits to rotate.\n    - `N`: INT type, specifying the number of mask bits.\n  - Output Variable:\n    - `BIT_LOAD_DW2`: DWORD type, representing the processed result.\n\n- Main Logic Section\n  -- REGION Main Logic:\n    The function performs different bitwise operations based on the value of input `D`:\n    - If `D` is TRUE:\n      1. Generates a mask using `SHR(DWORD#4294967295, 32 - N)`, where the upper `N` bits are set to 1 and the rest to 0.\n      2. Uses `ROR(I, P)` to rotate the input data `I` right by `P` bits.\n      3. Performs a bitwise OR operation (`OR`) between the mask and the rotated data.\n      4. Finally, uses `ROL` to rotate the result left by `P` bits and returns it.\n    - If `D` is FALSE:\n      1. Generates a mask using `SHL(DWORD#4294967295, N)`, where the lower `N` bits are set to 1 and the rest to 0.\n      2. Uses `ROR(I, P)` to rotate the input data `I` right by `P` bits.\n      3. Performs a bitwise AND operation (`AND`) between the mask and the rotated data.\n      4. Finally, uses `ROL` to rotate the result left by `P` bits and returns it.\n    This logic enables extracting or masking specific bits of the input data and rotating it as needed.", "name": "BIT_LOAD_DW2"}