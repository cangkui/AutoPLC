Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  The function named `DWORD_TO_STRH` converts a `DWORD`-type integer into an 8-character hexadecimal string. It processes the input value digit by digit, converting each into the corresponding ASCII character to build the final string.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variable: `IN`, representing the `DWORD`-type integer to be converted.\n  - Internal variables:\n    - `i`, an integer used for loop counting.\n    - `temp`, temporarily stores the currently processed byte value.\n    - `pt`, a pointer to the current position in the string being processed.\n\n- Main Logic\n  -- REGION Initialization\n     First, the pointer `pt` is initialized to point to the last character position of the output string (i.e., the 8th character). This position is then set to 0, representing the string's null terminator.\n\n  -- REGION Loop Processing\n     Using a `FOR` loop, the input value `IN` is processed digit by digit from the least significant to the most significant:\n     1. Move the pointer `pt` backward by one position to point to the current character being processed.\n     2. Use the `AND` operation with the mask `16#0000000F` to extract the lowest 4 bits of `IN` (i.e., one hexadecimal character).\n     3. Convert the extracted 4-bit value into the corresponding ASCII character:\n        - If the value is less than or equal to 9, add 48 (the ASCII value of '0').\n        - If the value is greater than 9, add 55 (the ASCII value of 'A' minus 10).\n     4. Store the converted character at the position pointed to by `pt`.\n     5. Use the `SHR` operation to right-shift `IN` by 4 bits and continue processing the next hexadecimal character.\n\n  -- REGION Completion\n     After the loop completes, the output string `DWORD_TO_STRH` represents the 8-character hexadecimal equivalent of the input value.\n\n- Summary\n  This function converts a `DWORD`-type integer into a hexadecimal string by processing each digit individually. The core logic efficiently performs character conversion through loops and bitwise operations, ultimately constructing the complete string.", "name": "DWORD_TO_STRH"}