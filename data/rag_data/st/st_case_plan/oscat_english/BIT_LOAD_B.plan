Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThe function block `FUNCTION BIT_LOAD_B` is used to perform bit manipulation on the input byte `IN` based on the input boolean value `VAL` and the position `POS`. If `VAL` is true, it sets the specified bit of `IN` to 1; if `VAL` is false, it sets the specified bit of `IN` to 0.\n\n- Variable Definitions\nThe code defines the following types of variables:\n  - Input variables: `IN` (a byte), `VAL` (a boolean value), `POS` (an integer representing the bit position to manipulate).\n  - Constant: `dat` (a byte with an initial value of 1, used for bit manipulation).\n\n- Main Logic Section\n  -- REGION Bit Manipulation Logic\n     - If `VAL` is true, the `OR` operator and the `SHL` (shift left) function are used to set the `POS` bit of `IN` to 1. The specific logic is as follows:\n       - `SHL(dat, pos)` shifts the constant `dat` (value 1) left by `POS` bits, generating a mask where the `POS` bit is 1 and all other bits are 0.\n       - The `OR` operator combines `IN` with the mask, ensuring the `POS` bit is set to 1 while other bits remain unchanged.\n       - The result is assigned to `BIT_LOAD_B`.\n     - If `VAL` is false, the `AND` operator and the `NOT` function are used to set the `POS` bit of `IN` to 0. The specific logic is as follows:\n       - `SHL(dat, pos)` generates a mask where the `POS` bit is 1 and all other bits are 0.\n       - The `NOT` function inverts the mask, creating a new mask where the `POS` bit is 0 and all other bits are 1.\n       - The `AND` operator combines `IN` with the new mask, ensuring the `POS` bit is set to 0 while other bits remain unchanged.\n       - The result is assigned to `BIT_LOAD_B`.", "name": "BIT_LOAD_B"}