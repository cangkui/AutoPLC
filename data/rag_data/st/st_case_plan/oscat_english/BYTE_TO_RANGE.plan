Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This function block, named `BYTE_TO_RANGE`, is used to map a byte (BYTE) value to a specified real-number range. Its primary purpose is to linearly transform a byte value between 0 and 255 into a user-defined real-number range defined by a lower bound (`low`) and an upper bound (`high`).\n\n- Variable Definitions\n  The code defines two types of variables:\n  - Input variables: `X` (byte value, range 0 to 255), `low` (lower bound, real number), `high` (upper bound, real number).\n  - Output variable: `BYTE_TO_RANGE` (the mapped real-number result).\n\n- Main Logic\n  -- REGION Mapping Logic\n      The logic of the function block is straightforward, with its core formula being:\n      ```\n      BYTE_TO_RANGE := (high - low) * X / 255.0 + low;\n      ```\n      This formula works as follows:\n      1. `(high - low)` calculates the total span of the target range.\n      2. `(high - low) * X / 255.0` proportionally maps the byte value `X` to the target range. Since `X` ranges from 0 to 255, dividing by 255.0 normalizes it to a value between 0 and 1.\n      3. Finally, adding `low` adjusts the mapped value to its actual position within the target range.\n      For example, if `low = 10.0`, `high = 20.0`, and `X = 128`, the calculation would be:\n      ```\n      BYTE_TO_RANGE := (20.0 - 10.0) * 128 / 255.0 + 10.0 = 15.0\n      ```\n      This function block is suitable for scenarios where byte values need to be converted into actual physical quantities (e.g., temperature, pressure, etc.).", "name": "BYTE_TO_RANGE"}