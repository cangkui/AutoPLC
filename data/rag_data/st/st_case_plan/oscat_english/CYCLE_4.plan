Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\n  This code defines a function block named `CYCLE_4`, which implements a time-based four-state cyclic state machine. State transitions are controlled by input time parameters, and external signals can force a jump to a specified state.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: Enable signal `E`, four time parameters `T0`, `T1`, `T2`, `T3`, state jump signal `S0`, forced jump state value `SX`, and forced jump signal `SL`.\n  - Output variables: Current state `STATE`.\n  - Internal variables: Current time `tx`, last state transition time `last`, and initialization flag `init`.\n\n- Main Logic\n  -- REGION Initialization\n     - During the first run of the function block, internal variables are initialized. `init` is set to `TRUE`, and the current time `tx` is recorded in `last`.\n     - This logic ensures the function block is properly initialized on its first run.\n\n  -- REGION State Machine Logic\n     - If the enable signal `E` is `TRUE`, the state machine logic is executed.\n     - If the forced jump signal `SL` is `TRUE`, the state machine jumps to the state specified by `SX` (limited to values between 0 and 3) and updates `last` to the current time. Simultaneously, `SL` is set to `FALSE`.\n     - If `SL` is `FALSE`, state transitions are performed based on the current state and input time parameters:\n       - State 0: If the difference between the current time and `last` is greater than or equal to `T0`, transition to state 1 and update `last`.\n       - State 1: If the difference between the current time and `last` is greater than or equal to `T1`, transition to state 2 and update `last`.\n       - State 2: If the difference between the current time and `last` is greater than or equal to `T2`, transition to state 3 and update `last`.\n       - State 3: If the difference between the current time and `last` is greater than or equal to `T3`, decide whether to jump back to state 0 based on the value of `S0` and update `last`.\n     - If the enable signal `E` is `FALSE`, the state is reset to 0, and `last` is updated to the current time.\n\n  -- REGION Output\n     - The current state `STATE` is output, reflecting the current state of the state machine.\n\n- Summary\n  This function block implements a time-based four-state cyclic state machine that supports forced state jumps via external signals. State transitions are controlled by input time parameters, and the state machine can be enabled or disabled using the enable signal `E`. The logic is simple and clear, making it suitable for applications requiring periodic state transitions.", "name": "CYCLE_4"}