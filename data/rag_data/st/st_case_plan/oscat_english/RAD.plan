Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\n  This code is a simple SCL function named `RAD`, which converts an angle (in degrees) to radians. The converted radian value is constrained between 0 and 2π.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variable: `DEG`, representing the input angle value in degrees.\n  - Output variable: The function's return value `RAD`, representing the converted radian value.\n\n- Main Logic Section\n  -- REGION Conversion Logic\n    This region contains the core logic of the function, responsible for converting the angle value to radians and constraining the result between 0 and 2π.\n    1. **Degree to Radian Conversion**: First, the input angle value `DEG` is multiplied by a constant `0.0174532925199433`, which is π/180, to convert degrees to radians.\n    2. **Modulo Operation**: The `MODR` function is used to perform a modulo operation on the converted radian value with `math.PI2` (i.e., 2π), ensuring the result stays within the range of 0 to 2π. The `MODR` function returns the remainder of the input value divided by the modulus.\n    3. **Output Assignment**: The calculated radian value is assigned to the function's return value `RAD`.\n\n  The logic of this code is very straightforward but highly practical, especially in scenarios where angle-to-radian conversion with standardized range constraints is required.", "name": "RAD"}