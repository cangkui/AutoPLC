Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis code implements a function called `LINEAR_INT` to perform linear interpolation. It takes an input value `X`, a 2D array `XY` containing known data points, and an integer `Pts` representing the number of known points. The function calculates the corresponding `Y` value for `X` using linear interpolation and returns the result.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables: `X` (the X value for interpolation), `XY` (a 2D array of known points, where each row contains the X and Y values of a point), `Pts` (the number of known points).\n - Internal variables: `i` (an index used to iterate through known points).\n\n- Main Logic\n-- REGION Initialization\n   First, the code ensures that `Pts` does not exceed 20 (since the size of the `XY` array is 20). This is achieved with `pts := MIN(pts,20)`.\n-- REGION Finding the Interpolation Interval\n   The code uses a `WHILE` loop to locate the interval where `X` lies. The loop starts at `i = 2` and increments `i` until `XY[i,0]` (the X value of the current point) is greater than or equal to `X`, or until all known points have been traversed. The purpose of this loop is to determine between which two known points `X` is located.\n-- REGION Linear Interpolation Calculation\n   Once the interval for `X` is found, the code uses the linear interpolation formula to calculate the corresponding `Y` value for `X`. The formula is:\n   ```\n   LINEAR_INT := ((XY[i,1] - XY[i-1,1]) * X - XY[i,1] * XY[i-1,0] + XY[i-1,1] * XY[i,0]) / (XY[i,0] - XY[i-1,0])\n   ```\n   This formula is based on the linear relationship between two points, using the X and Y values of the known points to compute the interpolated result.\n-- REGION Returning the Result\n   After the calculation is complete, the function returns the value of `LINEAR_INT`, which is the interpolation result.\n```\n\n### Detailed Explanation\n1. **Initialization**  \n   The code first ensures that `Pts` does not exceed 20, as the size of the `XY` array is 20. This prevents array out-of-bounds errors.\n\n2. **Finding the Interpolation Interval**  \n   Using a `WHILE` loop, the code locates the interval where `X` lies. The loop starts at `i = 2` and increments `i` until `XY[i,0]` (the X value of the current point) is greater than or equal to `X`, or until all known points have been traversed. The goal is to determine between which two known points `X` is located.\n\n3. **Linear Interpolation Calculation**  \n   Once the interval for `X` is found, the code uses the linear interpolation formula to calculate the corresponding `Y` value for `X`. The formula is based on the linear relationship between two points, using the X and Y values of the known points to compute the interpolated result.\n\n4. **Returning the Result**  \n   After the calculation is complete, the function returns the value of `LINEAR_INT`, which is the interpolation result.\n\n### Linear Interpolation Formula Breakdown\nThe core idea of the linear interpolation formula is based on the linear relationship between two points. Given two known points `(X1, Y1)` and `(X2, Y2)`, the formula to calculate the `Y` value for `X` is:\n```\nY = Y1 + (Y2 - Y1) * (X - X1) / (X2 - X1)", "name": "LINEAR_INT"}