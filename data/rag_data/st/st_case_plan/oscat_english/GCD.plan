Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code implements a function named `GCD` to calculate the greatest common divisor (GCD) of two integers. The function uses a variant of the Euclidean algorithm and optimizes the computation process through bitwise operations.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: `A` and `B`, representing the two integers for which the GCD is to be calculated.\n  - Internal variable: `t`, used to temporarily store intermediate calculation results.\n\n- Main Logic\n  -- REGION Input Validation and Initialization\n      First, the function checks whether the input values `A` or `B` are 0. If `A` is 0, the GCD is the absolute value of `B`; if `B` is 0, the GCD is the absolute value of `A`. If neither is 0, the calculation proceeds.\n\n  -- REGION GCD Calculation\n      1. **Preprocessing**: Convert `A` and `B` to their absolute values and initialize `GCD` to 1.\n      2. **Common Factor Extraction**: Use a `WHILE` loop to extract the common factor 2 from `A` and `B` via right-shift operations (`SHR`). After each extraction, left-shift (`SHL`) `GCD` by one bit to accumulate the common factor.\n      3. **Euclidean Algorithm**: In the second `WHILE` loop, continue calculating the GCD using a variant of the Euclidean algorithm. By comparing the values of `A` and `B`, update `A` or `B` repeatedly until `A` becomes 0.\n      4. **Final Result**: Multiply `GCD` by the absolute value of `B` to obtain the final GCD.\n\n  -- REGION Output Result\n      The function returns the calculated GCD value `GCD`.\n\n- Additional Notes\n  - **Bitwise Optimization**: By using `SHR` and `SHL` operations, the function avoids traditional division operations, thereby improving computational efficiency.\n  - **Absolute Value Handling**: The absolute values of `A` and `B` are consistently used during the calculation to ensure the result is unaffected by negative numbers.\n  - **Data Type Conversion**: The final result is converted to `INT` type via `DINT_TO_INT` to match the function's return data type.", "name": "GCD"}