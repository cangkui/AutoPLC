Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\nThis code defines a function named `CHARNAME` that generates a string based on the input byte value `C`. The function first converts the byte value into a character, then attempts to find a matching name in a predefined character name list `setup.CHARNAMES`. If a match is found, it extracts and returns the corresponding name; otherwise, it returns the character itself. If the input byte value is 0, an empty string is returned.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variable: `C`, of type `BYTE`, representing the input byte value.\n - Local variables: `pos`, of type `INT`, used to store the position of the search result; `i`, of type `INT`, used for loop counting.\n\n- Main Logic\n-- REGION Character Processing\n   1. **Input Check**: First, checks if the input byte value `C` is 0. If so, returns an empty string immediately.\n   2. **Character Conversion**: If `C` is not 0, uses the `CHR_TO_STRING` function to convert the byte value into a string and stores it in `CHARNAME`.\n   3. **String Concatenation**: Appends the character `&` to `CHARNAME` and prepends the character `;`, forming a new string.\n   4. **Matching Search**: Uses a `WHILE` loop to search for a match in the predefined character name list `setup.CHARNAMES`. The loop executes up to 4 times or until a match is found.\n   5. **Match Handling**: If a match is found, uses the `MID` function to extract a substring from the matched item and the `LEFT` function to truncate up to the first `;`, which becomes the final `CHARNAME`.\n   6. **No Match Handling**: If no match is found, returns the original character.\n\n- Output Result\nThe function returns `CHARNAME` as a string, whose value depends on the input byte value `C` and the predefined character name list `setup.CHARNAMES`. If `C` is 0, an empty string is returned; otherwise, it returns the corresponding character name or the character itself.", "name": "CHARNAME"}