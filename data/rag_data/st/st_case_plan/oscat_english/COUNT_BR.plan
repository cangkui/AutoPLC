Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code implements a simple counter function block called `COUNT_BR`. It supports operations such as setting, incrementing, decrementing, and resetting to control a byte-type counter value. The counter's value is constrained between 0 and a maximum value (`MX`).\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: `SET` (set counter value), `IN` (input value), `UP` (increment), `DN` (decrement), `STEP` (step size, default value is 1), `MX` (maximum value, default is 255), `RST` (reset counter).\n  - Output variable: `CNT` (current counter value).\n  - Internal variables: `last_up` (records the previous state of `UP`), `last_dn` (records the previous state of `DN`).\n\n- Main Logic Section\n  -- REGION Counter Logic\n     The counter logic is implemented through a series of conditional checks:\n     1. If `RST` is true, the counter `CNT` is reset to 0.\n     2. If `SET` is true, the counter `CNT` is set to the value of `IN`, while the `LIMIT` function ensures `CNT` stays between 0 and `MX`.\n     3. If `UP` is true and the previous `UP` was false (i.e., triggered on the rising edge of `UP`), the counter `CNT` is incremented by `STEP`, and the `INC` function ensures `CNT` does not exceed `MX`.\n     4. If `DN` is true and the previous `DN` was false (i.e., triggered on the rising edge of `DN`), the counter `CNT` is decremented by `STEP`, and the `INC` function ensures `CNT` does not go below 0.\n     5. Finally, the current states of `UP` and `DN` are recorded in `last_up` and `last_dn` to detect rising edges in the next cycle.\n\n- Summary\n  This function block implements basic counter functionalities—setting, incrementing, decrementing, and resetting—through straightforward logic. It also uses edge detection (`last_up` and `last_dn`) to ensure increment or decrement operations are triggered only once per rising edge of the input signal, avoiding duplicate counts. The counter's value is always constrained between 0 and `MX`, ensuring data validity.", "name": "COUNT_BR"}