Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This function block is named `PWM_DC` and is used to generate a Pulse Width Modulation (PWM) signal. Based on the input frequency `F` and duty cycle `DC`, it produces a Boolean output `Q` representing the high and low levels of the PWM signal.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: `F` (frequency, in Hz), `DC` (duty cycle, ranging from 0.0 to 1.0).\n  - Output variable: `Q` (PWM signal output, Boolean).\n  - Internal variables: `clk` (a function block for generating clock signals), `pulse` (a function block for generating pulses), `tmp` (a temporary variable storing the period time).\n\n- Main Logic Section\n  -- REGION Main Logic\n     - First, check if the input frequency `F` is greater than 0. If true, execute the following logic:\n       1. Calculate the period time `tmp` using the formula `1000.0 / F`. Here, the frequency unit is assumed to be Hz, so the period time unit is milliseconds.\n       2. Use the `CLK` function block to generate a clock signal with a period of `tmp`. The output `clk.Q` is a Boolean signal that changes periodically.\n       3. Use the `Pulse` function block to generate a pulse signal. The input `in` for `Pulse` is `clk.Q`, and the pulse width `pt` is `tmp * DC` (i.e., duty cycle multiplied by the period time).\n       4. Assign `pulse.Q` (the pulse signal) to the output `Q`, which serves as the PWM signal output.\n     - If the input frequency `F` is not greater than 0, no operation is performed, and the output `Q` retains its default value (typically false).\n\n  The core logic of this function block involves using the `CLK` and `Pulse` function blocks to generate a periodic PWM signal, with its frequency and duty cycle controlled by the input parameters `F` and `DC`.", "name": "PWM_DC"}