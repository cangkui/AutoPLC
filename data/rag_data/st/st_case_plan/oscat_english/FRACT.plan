Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This is a function named `FRACT`, designed to calculate the **fractional part** of a real number. The function takes a real number `x` as input and returns its fractional part. If the absolute value of the input is too large (exceeding 2.0E9), the function directly returns 0.0.\n\n- Variable Definitions\n  - Input variable: `x`, representing the input real number.\n  - Output variable: `FRACT`, representing the output fractional part.\n\n- Main Logic\n  -- REGION Main Logic:\n     - First, check if the absolute value of `x` is less than 2.0E9 (i.e., 2 billion). If the condition is met, calculate the fractional part of `x`. The specific method involves converting `x` to its integer part (using the `D_TRUNC` function to truncate the fractional part) and then subtracting this integer part from `x` to obtain the fractional part.\n     - If the absolute value of `x` is greater than or equal to 2.0E9, directly return 0.0. This is because for very large numbers, the precision of floating-point numbers may not be sufficient to accurately calculate the fractional part, so returning 0.0 avoids potential errors.\n\n- Examples:\n  - If the input is `x = 3.14159`, the output is `FRACT = 0.14159`.\n  - If the input is `x = -2.71828`, the output is `FRACT = -0.71828`.\n  - If the input is `x = 2.5E9` (i.e., 2.5 billion), the output is `FRACT = 0.0`.\n\n- Summary:\n  This function extracts the fractional part of a real number through simple mathematical operations and conditional checks. For very large numbers, the function returns 0.0 to avoid floating-point precision issues.", "name": "FRACT"}