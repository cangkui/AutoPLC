Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThe function block `FIND_CHAR` is used to locate the position of the first valid character in a given string, starting from a specified position. The definition of a valid character is based on ASCII values, and the inclusion of extended ASCII characters can be configured via `setup.EXTENDED_ASCII`.\n\n- Variable Definitions\nThe code defines the following types of variables:\n  - Input variables: `str` is a string representing the input string to search; `pos` is an integer indicating the starting position for the search.\n  - Internal variables: `i` is a loop counter; `pt` is a pointer to the string's byte array; `stop` is an integer representing the length of the string; `X` is a byte storing the ASCII value of the current character.\n\n- Main Logic\n  -- REGION Initialization\n    - First, assign the address of the string `str` to the pointer `pt` to access the string's byte array via the pointer.\n    - Use `LEN(str)` to get the length of the string and assign it to `stop` as the loop termination condition.\n\n  -- REGION Finding Valid Characters\n    - Use a `FOR` loop to traverse the string starting from `MAX(pos,1)` until `stop` is reached. `MAX(pos,1)` ensures the starting position is at least 1, avoiding invalid negative or zero values.\n    - Within the loop, access the ASCII value of the current character via the pointer `pt` and assign it to `X`.\n    - Check if `X` is a valid character:\n      - If `setup.EXTENDED_ASCII` is true, valid characters are those with ASCII values greater than 31 and not equal to 127.\n      - If `setup.EXTENDED_ASCII` is false, valid characters are those with ASCII values greater than 31 and less than 127.\n    - If a valid character is found, assign the current position `i` to `FIND_CHAR` and return immediately.\n    - If no valid character is found by the end of the loop, assign `FIND_CHAR` the value 0 to indicate no valid character was found.\n\n  -- REGION Returning the Result\n    - Finally, `FIND_CHAR` returns the position of the found valid character or 0 if no valid character was found.", "name": "FIND_CHAR"}