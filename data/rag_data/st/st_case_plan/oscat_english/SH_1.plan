Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis code is a function block written in SCL, named 'SH_1', designed to implement a simple sample-and-hold function. The block updates the output value (out) at a set time interval (PT) and triggers a signal (Trig) with each update.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables: `in` (input value, REAL type) and `PT` (sampling interval, TIME type).\n - Output variables: `out` (output value, REAL type) and `Trig` (trigger signal, BOOL type).\n - Internal variables: `last` (last sampling time, TIME type) and `tx` (current time, TIME type).\n\n- Main Logic Section\n -- REGION Main Logic\n    This section implements the core logic of the sample-and-hold function. First, the current time (in milliseconds) is obtained using the `T_PLC_MS()` function and stored in the `tx` variable after converting it to TIME type. Then, it checks whether the difference between the current time and the last sampling time is greater than or equal to the set sampling interval (PT). If the condition is met, `last` is updated to the current time, the input value `in` is assigned to the output value `out`, and the trigger signal `Trig` is set to TRUE. If the condition is not met, `Trig` is set to FALSE.\n    This logic ensures that the output value `out` is updated only once within the set time interval, and the `Trig` signal is triggered with each update.", "name": "SH_1"}