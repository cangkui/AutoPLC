Natural Language Requirements:  
```json
{
  "variables": [],
  "instructions": [],
  "planning": "- Overview\n  This code implements a CRC (Cyclic Redundancy Check) generation function named 'CRC_GEN'. It calculates the corresponding CRC value based on input parameters including a data pointer, data size, polynomial, initial value, input inversion flag, output inversion flag, and output XOR value. CRC is a widely used data verification method for detecting errors in data transmission or storage.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: Data pointer (PT), data size (SIZE), polynomial length (PL), polynomial (PN), initial value (INIT), input inversion flag (REV_IN), output inversion flag (REV_OUT), and output XOR value (XOR_OUT).\n  - Internal variables: Current position (pos), shift amount (shift), current byte (dx), and bit counter (bits).\n\n- Main Logic\n  -- REGION Initialization\n     First, the shift amount (shift) is calculated based on the polynomial length (PL), and the polynomial (PN) is left-shifted by this amount to prepare for subsequent calculations. Then, the first 4 bytes of input data are processed—bytes are reversed if the input inversion flag (REV_IN) is set—and concatenated into the CRC value. Next, the initial value (INIT) is left-shifted and XORed with the CRC value to complete initialization.\n\n  -- REGION Data Loop Processing\n     Starting from the 5th byte, the input data is processed byte by byte. For each byte, it is reversed if the input inversion flag (REV_IN) is set. Then, each bit in the byte is processed individually. If the highest bit of the CRC value is 1, a polynomial XOR operation is performed; otherwise, the CRC value is simply left-shifted. After each operation, the current byte is left-shifted by one bit to proceed to the next bit.\n\n  -- REGION Final Processing\n     After all data is processed, the CRC value undergoes an additional 32-bit processing to ensure its integrity. If the highest bit of the CRC value is 1, a polynomial XOR operation is performed; otherwise, the CRC value is left-shifted. The CRC value is then right-shifted back to its original position and XORed with the output XOR value (XOR_OUT). Finally, the CRC value is reversed if the output inversion flag (REV_OUT) is set, and the final CRC value is returned.",
  "name": "CRC_GEN"
}
```