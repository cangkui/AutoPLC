Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis functional block, named `SYS_LOG`, is designed to handle the sending of system logs. It configures the format and content of log messages through input parameters and transmits them to a specified server over a network. The block employs a state machine to control the log-sending process and uses output parameters to indicate whether the operation is complete or if an error has occurred.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - `VAR_IN_OUT`: Variables for input/output, including `IP_C` (IP control structure), `S_BUF` (send buffer), and `R_BUF` (receive buffer).\n - `VAR_INPUT`: Input variables, including `ACTIVATE` (activation signal), `LOC_DT` (local date and time), `SERVER_IP4` (server IP address), `PORT` (port number), `FACILITY` (log facility), `SEVERITY` (log severity), `TAG` (log tag), `HOSTNAME` (hostname), `MESSAGE` (log message), and `OPTION` (option flags).\n - `VAR_OUTPUT`: Output variables, including `DONE_P` (operation completion flag) and `ERROR` (error code).\n - `VAR`: Internal variables, including `ip_state` (IP state), `ip_id` (IP identifier), `IP_FIFO` (IP FIFO structure), `activate_last` (previous activation signal), `state` (state machine state), `s1` (temporary string), and `i` (temporary integer).\n\n- Main Logic Section\n-- REGION State Machine\nThe core logic of the functional block is implemented via a state machine controlled by the `state` variable, which consists of multiple states:\n   - **State 00**: Wait for activation signal.\n     - If a rising edge of the activation signal is detected (i.e., `ACTIVATE` is true and `ACTIVATE_LAST` is false), transition to State 10.\n     - Before entering State 10, initialize `ERROR` to 0 (no error), set `IP_STATE` to 1 (IP communication preparation phase), and set `DONE_P` to false (operation not yet complete).\n   \n   - **State 10**: Prepare log message.\n     - When `IP_STATE` is 3, IP communication is ready, and log message construction begins.\n     - Initialize temporary variable `i` to 0 to track the log message's position in the buffer.\n     - Based on the `OPTION` flag, construct the log message header:\n       - If the least significant bit of `OPTION` is 0, include log priority information. Use the `REPLACE` function to substitute `<P>` with the combined value of `FACILITY` and `SEVERITY`, storing the result in temporary string `s1`.\n       - Otherwise, `s1` remains an empty string.\n     - If the second least significant bit of `OPTION` is 0, include timestamp, hostname, and tag information:\n       - Convert `LOC_DT` to a string format using `OSCAT_BASIC.DT_TO_STRF` and append it to `s1`.\n       - Write `s1` to the send buffer `S_BUF` using `OSCAT_BASIC._STRING_TO_BUFFER`, updating `i`.\n       - Append `HOSTNAME` and `TAG` to `S_BUF`, followed by a space character (ASCII 32).\n     - Write the log message `MESSAGE` to `S_BUF` and update `i`.\n     - If the third bit of `OPTION` is 1, append a newline (ASCII 13 and 10) to the log message.\n     - Transition to State 30 (ready to send log message).\n     - Configure `IP_C.C_MODE` (communication mode) based on the fourth bit of `OPTION`:\n       - If the fourth bit is 1, set to Mode 0 (default).\n       - Otherwise, set to Mode 1 (alternative).\n     - If `PORT` is 0, set the default port based on `IP_C.C_MODE`:\n       - Mode 0 uses port 1468.\n       - Mode 1 uses port 514.\n     - Otherwise, use the user-specified `PORT`.\n     - Assign `SERVER_IP4` to `IP_C.C_IP` (target server IP address).\n     - Enable IP communication (`IP_C.C_ENABLE := TRUE`) and reset the timer (`IP_C.TIME_RESET := TRUE`).\n     - Set the send buffer size `S_BUF.SIZE` to `i` (log message length).\n     - Clear the receive buffer size `R_BUF.SIZE` to 0.\n\n   - **State 30**: Send log message.\n     - If `IP_C.ERROR` is not 0, an error occurred during sending. Assign the error code to `ERROR` and return to State 00.\n     - If `S_BUF.SIZE` is 0, the log message was sent successfully. Set `DONE_P` to true and return to State 00.\n     - If the state machine returns to State 00, set `IP_STATE` to 4 (IP communication complete).\n\n   After the state machine concludes, update `ACTIVATE_LAST` to record the current activation signal state and call the `IP_FIFO` functional block to handle IP communication FIFO logic. The `IP_FIFO` block manages IP communication states and identifiers to ensure reliability and sequencing.", "name": "SYS_LOG"}