Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  The function block `DLOG_STORE_RRD` is used to store data in a remote database. It handles data triggering, URL construction, DNS resolution, HTTP requests, and outputs error codes and types when errors occur.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input/Output Variables: `X` is a structure of type `DLOG_DATA` used to pass data.\n  - Input Variables: `ENABLE` (enable signal), `TRIG_M` (manual trigger signal), `TRIG_T` (automatic trigger interval), `URL` (target URL), `DTI` (date-time), `SEP` (separator), `DNS_IP4` (DNS server IP address), `TIMEOUT` (timeout duration).\n  - Output Variables: `ERROR_C` (error code), `ERROR_T` (error type).\n  - Internal Variables: Includes buffers for network communication, URL parsing results, DNS client, HTTP GET request, trigger flags, step counters, etc.\n\n- Main Logic Section\n  -- REGION Initialization and Trigger Logic\n     - First, `X.DTI` is assigned the input `DTI` to record the current timestamp.\n     - By comparing `DTI` with `dti_last` (the previous timestamp), the clock signal `X.CLOCK_TRIG` is determined. If `DTI` differs from `dti_last`, `X.CLOCK_TRIG` is true, indicating a timestamp change.\n     - If `X.CLOCK_TRIG` is true and `TRIG_T` (automatic trigger interval) is â‰¥1 second, the auto-trigger condition `trig_auto` is calculated. `trig_auto` is determined by checking if the timestamp of `DTI` modulo `TRIG_T` equals 0. If so, `trig_auto` is true, indicating the auto-trigger condition is met.\n\n  -- REGION Step 1: Enable and Data Preparation\n     - If `ENABLE` is true and `X.ID_MAX` is 0, it means the function block is enabled for the first time. Here, `X.ADD_COM` is initialized to 01 (start adding data), and `X.STORE_TYPE` is set to 1 (default storage type).\n     - Reset error variables `ERROR_T` and `ERROR_C` to 0 (no errors).\n     - Call the `UCB` (circular buffer) function block with mode 99 to initialize the buffer.\n     - Use the `STRING_TO_URL` function to parse the input `URL` and store the result in `URL_DATA`, which includes protocol, domain, path, and query string details.\n     - Convert `SEP` (separator) to a string and store it in `sep_char` for later query string construction.\n     - Set `step_1` to 30 to proceed to the next step.\n\n  -- REGION Step 1: Trigger Handling\n     - Calculate the trigger signal `trig_tmp`, which can be one of the following:\n       1. Manual trigger signal `TRIG_M` is true and the previous cycle's `trig_m_last` was false (rising edge detection).\n       2. Auto-trigger condition `trig_auto` is true.\n       3. Data add request `X.ADD_DATA_REQ` is true.\n     - If `ENABLE` is false (function block disabled), reset `X.ADD_COM` to 00 (stop adding data) and set `step_1` to 0 to end processing.\n     - If `ENABLE` is true and either `trig_tmp` or `trig_stored` is true, set `X.ADD_COM` to 03 (start storing data). Otherwise, set it to 04 (continue waiting for trigger).\n\n  -- REGION Step 2: Data Processing and Network Communication\n     - If `UCB` buffer data is lost (`X.UCB.BUF_DATA_LOST > 0`), set error code `ERROR_C` to 2 (data lost) and error type `ERROR_T` to 6 (buffer error). Then set `step_2` to 100 (error handling state).\n     - If `UCB` buffer usage exceeds 90% (`X.UCB.BUF_USED_MAX > 90`), set `ERROR_C` to 1 (buffer near full) and `ERROR_T` to 6 (buffer error).\n     - If the buffer data count reaches `X.ID_MAX` (buffer full), start constructing `URL_DATA.QUERY`. Loop through buffer data, appending each entry to the query string with `sep_char` as the separator. If the query string exceeds `OSCAT_BASIC.STRING_LENGTH`, set `ERROR_C` to 1 (string too long) and `ERROR_T` to 4 (query string error), then set `step_2` to 100.\n     - If DNS resolution completes (`DNS_CLIENT.DONE` is true), set `step_2` to 60 (HTTP GET phase).\n     - If DNS resolution fails (`DNS_CLIENT.ERROR > 0`), set `ERROR_C` to the DNS error and `ERROR_T` to 1 (DNS error), then set `step_2` to 100.\n     - If HTTP GET completes (`HTTP_GET.DONE` is true), check if the response body's first character is '0' (ASCII 48). If not, set `ERROR_C` to 1 (server error) and `ERROR_T` to 3 (HTTP error), then set `step_2` to 100.\n     - If HTTP GET fails (`HTTP_GET.ERROR > 0`), set `ERROR_C` to the HTTP error and `ERROR_T` to 2 (HTTP error), then set `step_2` to 100.\n     - If `ENABLE` is false (disabled), reset `step_2` to 0 to end processing.\n\n  -- REGION Network Function Block Calls\n     - Call `HTTP_GET` with `IP_C`, `S_BUF`, `R_BUF`, `DNS_CLIENT.IP4`, `URL_DATA`, etc., to handle HTTP GET requests (sending/receiving responses).\n     - Call `DNS_CLIENT` with `IP_C`, `S_BUF`, `R_BUF`, `URL_DATA.DOMAIN`, `DNS_IP4`, etc., to resolve domain names to IP addresses.\n     - Call `IPC` with `IP_C`, `S_BUF`, `R_BUF`, `TIMEOUT`, etc., to manage network timeouts and connections.\n\n  -- REGION Trigger Signal Update\n     - Update `trig_m_last` to the current `TRIG_M` for edge detection in the next cycle. `trig_m_last` stores the previous manual trigger state.", "name": "DLOG_STORE_RRD"}