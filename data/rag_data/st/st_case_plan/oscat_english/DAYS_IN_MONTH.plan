Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis function block, named 'DAYS_IN_MONTH', is used to calculate the number of days in the month of a given date. It accounts for both leap and non-leap years and determines the number of days in each month based on the day-of-year range.\n\n- Variable Definitions\nThe code defines one type of variable:\n - Input Variable: IDATE, representing the input date.\n\n- Main Logic\n-- REGION Calculate Days in Month\n   First, the function block calls the 'DAY_OF_YEAR' function to retrieve the day of the year for the input date and stores the result in the 'DAYS_IN_MONTH' variable.\n   \n   Next, the function block checks whether the date falls in a leap year. If it is a leap year, a 'CASE' statement is used to determine the number of days in the month based on the day-of-year range:\n   - If the day is between 32 and 60, it indicates February, which is set to 29 days.\n   - If the day is between 92 and 121, it indicates April, set to 30 days.\n   - If the day is between 153 and 182, it indicates June, set to 30 days.\n   - If the day is between 245 and 274, it indicates September, set to 30 days.\n   - If the day is between 306 and 335, it indicates November, set to 30 days.\n   - For all other cases, it indicates January, March, May, July, August, October, or December, which are set to 31 days.\n\n   If it is not a leap year, similar logic is applied, but February is set to 28 days, while the other months remain the same as in a leap year.\n\n   Finally, the function block returns the calculated number of days in the month.\n-- REGION End", "name": "DAYS_IN_MONTH"}