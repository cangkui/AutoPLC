Natural Language Requirements:  
```json
{
  "variables": [],
  "instructions": [],
  "planning": "- Overview\nThe function block is named `SHA1_TO_STRH` and is used to convert a 20-byte SHA1 hash into a readable hexadecimal string. SHA1 hash values are typically stored as byte arrays, and this function block converts them into a hexadecimal string representation.\n\n- Variable Definitions\nThe code defines the following types of variables:\n  - Input variable: `SHA1`, a byte array of length 20 that stores the SHA1 hash value.\n  - Local variables:\n    - `i`: An index variable used for looping.\n    - `tmp`: A temporary variable used to store the upper or lower 4 bits of the current byte.\n    - `pt`: A pointer to the output string, used to build the final hexadecimal string character by character.\n\n- Main Logic\n  -- REGION Conversion Logic\n      1. Initialize the pointer `pt` to point to the starting address of the output string.\n      2. Use a `FOR` loop to iterate through each byte in the `SHA1` array:\n         - Extract the upper 4 bits of the current byte and store them in `tmp`.\n         - Convert `tmp` to the corresponding hexadecimal character: If the value of `tmp` is less than or equal to 9, add 48 (ASCII codes for '0' to '9'); otherwise, add 87 (ASCII codes for 'a' to 'f').\n         - Write the converted character to the location pointed to by `pt` and increment the pointer `pt`.\n         - Extract the lower 4 bits of the current byte and store them in `tmp`.\n         - Convert `tmp` to the corresponding hexadecimal character using the same method as for the upper 4 bits.\n         - Write the converted character to the location pointed to by `pt` and increment the pointer `pt`.\n      3. After the loop ends, set the location pointed to by `pt` to 0, indicating the string terminator (`\\0`).\n\n  -- REGION Output Result\n      The final output is a null-terminated hexadecimal string representing the input SHA1 hash value. This string can be directly used for display or storage.\n\n- Key Points\n  - The function block processes each byte individually, converting the upper and lower 4 bits into hexadecimal characters.\n  - The pointer `pt` is used to dynamically build the output string, ensuring each character is written correctly.\n  - The final string is null-terminated (`\\0`), conforming to C-style string representation.\n\n- Example\n  Suppose the input `SHA1` array is `[0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE, 0xF0, ...]`. The output string would be `\"123456789abcdef0...\"`.",
  "name": "SHA1_TO_STRH"
}
```