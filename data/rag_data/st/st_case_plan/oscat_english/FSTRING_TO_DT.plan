Natural Language Requirements:  

```json
{
  "variables": [],
  "instructions": [],
  "planning": "- Overview\nThis function `FSTRING_TO_DT` is designed to convert a formatted string into a DateTime (DT) type. It parses the input string and the format string to extract information such as year, month, day, hour, minute, and second, then combines them into a DateTime value.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables: `SDT` (source data text) and `FMT` (format string).\n - Constants: `ignore` (ignored character, default is `*`) and `fchar` (format character, default is `#`).\n - Local variables: `c` (current character), `tmp` (temporary storage), `end` (end indicator), `dy` (year), `dm` (month), `dd` (day), `th` (hour), `tm` (minute), `ts` (second).\n\n- Main Logic\n-- REGION String Parsing and Conversion:\n   - Uses a `WHILE` loop to iterate through the format string `FMT`, parsing it character by character.\n   - If the current character is the ignored character `*`, it skips the character and removes the corresponding character from both `SDT` and `FMT`.\n   - If the current character is the format character `#`, it extracts the next character as a format specifier (e.g., `Y` for year, `M` for month, etc.) and retrieves the corresponding value from `SDT`.\n     - For the year `Y`, if the value is less than 100, it automatically adds 2000 (e.g., `23` becomes `2023`).\n     - For the month `M` or `N`, it converts the string to an integer using `STRING_TO_INT` or `FSTRING_TO_MONTH`, respectively.\n     - For day, hour, minute, and second, it directly converts the string to an integer using `STRING_TO_INT`.\n   - If the current character matches the corresponding character in `SDT`, it removes the matching characters from both `SDT` and `FMT`.\n   - If the characters do not match, the function exits immediately, indicating a parsing failure.\n\n-- REGION DateTime Combination:\n   - After parsing all characters, it uses the `SET_DT` function to combine the extracted year, month, day, hour, minute, and second into a DateTime value, which is then returned as the function's output.\n\n- Output Result\nThe function returns a DateTime (DT) value representing the parsed date and time from the input string. If an error occurs during parsing (e.g., character mismatch), the function exits without generating a valid DateTime value.",
  "name": "FSTRING_TO_DT"
}
```