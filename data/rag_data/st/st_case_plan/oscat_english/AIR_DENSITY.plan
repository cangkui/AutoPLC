Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  The function named `AIR_DENSITY` is used to calculate air density. It takes three input parameters—temperature, pressure, and relative humidity—and combines them with certain physical constants to compute air density using a formula.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: Temperature `T`, pressure `P`, and relative humidity `RH`.\n  - Constants: `RL` and `RX`, representing the gas constant and a constant related to relative humidity, respectively.\n  - Output variable: The function return value `AIR_DENSITY`, which represents the calculated air density.\n\n- Main Logic Section\n  -- REGION Calculate Air Density\n     The core logic of the function computes air density using the following formula:\n     \\[\n     \\text{AIR\\_DENSITY} = \\frac{\\text{OSCAT\\_BASIC.phys.PN} \\times (1.0 - \\text{RH} \\times \\text{SDD}(T, \\text{TRUE}) \\times \\text{RX} / P)}{\\text{RL} \\times (T - \\text{OSCAT\\_BASIC.phys.T0})}\n     \\]\n     Where:\n     - `OSCAT_BASIC.phys.PN` and `OSCAT_BASIC.phys.T0` are physical constants from an external library, representing standard atmospheric pressure and standard temperature, respectively.\n     - `SDD(T, TRUE)` is a function that calculates the saturation vapor pressure based on temperature `T`.\n     - `RH` is relative humidity, `P` is pressure, and `T` is temperature.\n     - `RL` and `RX` are constants representing the gas constant and a relative humidity-related constant, respectively.\n     The formula works as follows:\n     1. Compute the saturation vapor pressure at the given temperature using `SDD(T, TRUE)`.\n     2. Adjust for humidity effects in the air density calculation using relative humidity `RH` and the saturation vapor pressure.\n     3. Normalize the calculation using standard atmospheric pressure `OSCAT_BASIC.phys.PN` and standard temperature `OSCAT_BASIC.phys.T0`.\n     4. Finally, compute air density using the gas constant `RL` and the temperature difference `(T - OSCAT_BASIC.phys.T0)`.\n     The result is stored in `AIR_DENSITY` and returned as the function's output.", "name": "AIR_DENSITY"}