Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code is a function block written in SCL, named 'BOILER', designed to control the heating logic of a boiler. It determines whether to heat based on input signals such as temperature, pressure, request, and enable signals, while also handling various error states. The code implements complex control logic through a series of conditional checks.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: Include upper temperature limit (T_upper), lower temperature limit (T_lower), pressure (Pressure), enable signal (enable), request signals (Req_1 and Req_2), boost signal (Boost), temperature protection values (t_upper_min, t_upper_max, T_lower_max, T_protect_high, T_protect_low), etc.\n  - Output variables: Include heating signal (Heat), error signal (error), and status signal (status).\n  - Internal variables: Include edge detection (edge), boost mode (boost_mode), and several flags (flag_0, flag_1, flag_2).\n\n- Main Logic Section\n  -- Error Detection and Handling\n    First, the code checks if the temperature exceeds the protection range. If the upper temperature (T_upper) surpasses the maximum protection temperature (T_protect_high), heating is stopped, and an error state is set (status := 1, error := TRUE). If the upper temperature falls below the minimum protection temperature (T_protect_low), heating is initiated, and an error state is set (status := 2, error := TRUE). Similarly, if the lower temperature (T_lower) exceeds the protection range and the lower temperature is enabled (T_lower_enable), heating is stopped, and the corresponding error state is set (status := 3 or 4, error := TRUE). If the pressure signal (Pressure) is false, heating is stopped, and an error state is set (status := 5, error := TRUE).\n\n  -- Normal Heating Logic\n    If no errors are detected, the code proceeds to check if heating conditions are met. If there is a request signal (Req_1 or Req_2), an enable signal (enable), or a boost signal (Boost), the error signal is cleared (error := FALSE). Then, based on different conditions, the heating signal and status are set:\n    - If the boost signal (Boost) is true and edge detection (edge) is false, and the upper temperature (T_upper) is below the maximum upper temperature (t_upper_max), heating is initiated, and boost mode is activated (status := 101, heat := TRUE, boost_mode := TRUE).\n    - If the enable signal (enable) is true and the upper temperature (T_upper) is below the minimum upper temperature (t_upper_min), heating is initiated (status := 102, heat := TRUE).\n    - If the request signal (Req_1) is true and the upper temperature (T_upper) is below the requested temperature (T_request_1), heating is initiated (status := 103, heat := TRUE).\n    - If the request signal (Req_2) is true and the upper temperature (T_upper) is below the requested temperature (T_request_2), heating is initiated (status := 104, heat := TRUE).\n\n  -- Heating Control Logic\n    When the heating signal is true, the code further checks whether to continue heating:\n    - If the enable signal (enable) or boost mode (boost_mode) is true, a flag is set (flag_0 := TRUE). If the lower temperature is enabled (T_lower_enable) and the lower temperature (T_lower) exceeds the maximum lower temperature (T_lower_max), boost mode and the flag are turned off (flag_0 := FALSE, boost_mode := FALSE). If the lower temperature is not enabled and the upper temperature (T_upper) exceeds the maximum upper temperature (t_upper_max), boost mode and the flag are turned off (flag_0 := FALSE, boost_mode := FALSE).\n    - If the request signal (Req_1) is true and the upper temperature (T_upper) exceeds the requested temperature plus a hysteresis value (T_request_1 + T_request_hys), a flag is set (flag_1 := TRUE).\n    - If the request signal (Req_2) is true and the upper temperature (T_upper) exceeds the requested temperature plus a hysteresis value (T_request_2 + T_request_hys), a flag is set (flag_2 := TRUE).\n    - Finally, the heating signal (heat) is determined by the flags (flag_0, flag_1, flag_2). If the heating signal is false, the status is set to 100 (status := 100).\n\n  -- Default State\n    If no heating conditions are met, the status is set to 100 (status := 100), heating is stopped (heat := FALSE), and the error signal is cleared (error := FALSE).\n\n  -- Edge Detection\n    Lastly, the code updates the edge detection variable (edge := boost) to detect changes in the boost signal in the next cycle.", "name": "BOILER"}