Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis functional block, named `CLK_DIV`, implements a simple clock divider. It uses a counter to divide the input clock signal and outputs each bit of the counter to corresponding output pins. The block also supports a reset function, which can reset the counter and all outputs to 0.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variables: `clk` (clock signal) and `rst` (reset signal).\n - Output variables: `Q0` to `Q7`, corresponding to the least significant bit (LSB) to the most significant bit (MSB) of the counter.\n - Internal variable: `cnt`, an 8-bit counter storing the current count value.\n\n- Main Logic\n-- REGION Reset Logic\n   If the `rst` signal is true, the counter `cnt` and all outputs `Q0` to `Q7` are reset to 0. This implements the reset functionality, ensuring the system returns to its initial state when the reset signal is active.\n\n-- REGION Clock Division Logic\n   If the `rst` signal is false and the `clk` signal is true, the counter `cnt` increments by 1. Then, each bit of the counter `cnt` is assigned to the corresponding output pin:\n   - `Q0` corresponds to `cnt.0` (LSB)\n   - `Q1` corresponds to `cnt.1`\n   - `Q2` corresponds to `cnt.2`\n   - `Q3` corresponds to `cnt.3`\n   - `Q4` corresponds to `cnt.4`\n   - `Q5` corresponds to `cnt.5`\n   - `Q6` corresponds to `cnt.6`\n   - `Q7` corresponds to `cnt.7` (MSB)\n   In this way, each time the clock signal triggers, the counter value increases, and each bit of its binary representation is output to the corresponding pin, achieving the clock division function.\n\n- Summary\nThis functional block implements a clock divider using a simple counter and outputs each bit of the counter to corresponding pins. The reset signal can reset the counter and outputs to 0 at any time. This block is suitable for scenarios where clock signal division and output to multiple pins are required.", "name": "CLK_DIV"}