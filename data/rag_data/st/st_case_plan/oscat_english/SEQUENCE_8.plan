Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code defines a function block named `SEQUENCE_8`, which implements an 8-step sequential control logic. Each step has a wait time and a delay time. The function block executes step-by-step based on input signals and timing conditions. If an error occurs (e.g., timeout) during any step, the function block stops and sets the corresponding status.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: Include 8 Boolean input signals (`in0` to `in7`), a start signal (`start`), a reset signal (`rst`), wait and delay times for each step (`wait0` to `wait7` and `delay0` to `delay7`), and a flag (`stop_on_error`) to control whether to stop on error.\n  - Output variables: Include 8 Boolean output signals (`Q0` to `Q7`), a combined output signal (`QX`), a running flag (`run`), the current step (`step`), and status information (`status`).\n  - Local variables: Include time tracking (`last`), edge detection (`edge`), current time (`tx`), and an initialization flag (`init`).\n\n- Main Logic\n  -- REGION Initialization\n    First, the current time `tx` is converted to the `TIME` type. If the function block is not initialized, it records the current time `tx` to `last`, sets the initialization flag `init` to `TRUE`, and sets the status `status` to 110 (indicating initialization is complete). This ensures the function block initializes correctly on its first run.\n\n  -- REGION Reset Logic\n    If the reset signal `rst` is `TRUE`, the function block resets all internal states. Specific actions include:\n    - Setting the step `step` to -1, indicating the sequence is not running.\n    - Setting all output signals (`Q0` to `Q7`) to `FALSE`.\n    - Setting the status `status` to 110, indicating the function block is reset.\n    - Setting the running flag `run` to `FALSE`, stopping the sequence.\n    This ensures the function block can return to its initial state at any time via the reset signal.\n\n  -- REGION Start Logic\n    If the start signal `start` is `TRUE` and the edge detection flag `edge` is `FALSE`, the function block begins executing the sequence. Specific actions include:\n    - Setting the step `step` to 0, starting from the first step.\n    - Recording the current time `tx` to `last` for subsequent time calculations.\n    - Setting the status `status` to 111, indicating the function block is running.\n    - Setting all output signals (`Q0` to `Q7`) to `FALSE`, ensuring all outputs are low at the start.\n    - Setting the running flag `run` to `TRUE`, starting the sequence.\n    The edge detection flag `edge` ensures the start signal triggers only once on the rising edge, avoiding repeated starts.\n\n  -- REGION Error Handling\n    If the status `status` is between 1 and 99 and `stop_on_error` is `TRUE`, the function block returns immediately, stopping further logic execution. This ensures the function block can halt on error based on configuration, preventing further issues.\n\n  -- REGION Step Logic\n    The function block executes logic based on the current step `step`. Each step follows similar logic. For example, step 0:\n    - **Wait Phase**: If output `Q0` is `FALSE` and input `in0` is `TRUE` within the wait time `wait0`, it sets `Q0` to `TRUE` and records the current time `tx` to `last`. This means the function block waits for input `in0` to become `TRUE` within the specified time.\n    - **Timeout Handling**: If output `Q0` is `FALSE` and the wait time `wait0` has elapsed, it sets the status `status` to 1 (indicating step 0 timeout) and sets the running flag `run` to `FALSE`. This means the function block failed to receive input `in0` within the specified time, stopping execution and logging the error.\n    - **Delay Phase**: If output `Q0` is `TRUE` and the delay time `delay0` has elapsed, it sets the step `step` to 1 and records the current time `tx` to `last`. This means the function block waits for the specified delay time after setting `Q0` to `TRUE` before proceeding to the next step.\n    Other steps (1 to 7) follow similar logic, with corresponding inputs, outputs, wait times, and delay times. For example, step 1:\n    - **Wait Phase**: If output `Q1` is `FALSE` and input `in1` is `TRUE` within the wait time `wait1`, it sets `Q1` to `TRUE` and records the current time `tx` to `last`.\n    - **Timeout Handling**: If output `Q1` is `FALSE` and the wait time `wait1` has elapsed, it sets the status `status` to 2 (indicating step 1 timeout) and sets the running flag `run` to `FALSE`.\n    - **Delay Phase**: If output `Q1` is `TRUE` and the delay time `delay1` has elapsed, it sets the step `step` to 2 and records the current time `tx` to `last`.\n\n  -- REGION Combined Output\n    The combined output `QX` is the logical OR of all output signals (`Q0` to `Q7`), indicating whether any output signal is `TRUE`. This provides a combined signal for external monitoring of the function block's state.\n\n  -- REGION Completion Logic\n    If the step `step` is 7, output `Q7` is `TRUE`, and the delay time `delay7` has elapsed, the sequence is complete. Specific actions include:\n    - Setting the step `step` to -1, indicating the sequence has ended.\n    - Clearing output `Q7`, ensuring outputs return to low.\n    - Setting the running flag `run` to `FALSE`, stopping the sequence.\n    - Setting the status `status` to 110, indicating normal completion.\n    This ensures the function block stops correctly after all steps and returns to its initial state.", "name": "SEQUENCE_8"}