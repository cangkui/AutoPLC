Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  The function `IS_UPPER` is used to check whether the input string `str` consists entirely of uppercase letters. If it does, the function returns `TRUE`; otherwise, it returns `FALSE`.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variable: `str`, representing the string to be checked.\n  - Internal variables:\n    - `L`, representing the length of the string.\n    - `pt`, a byte pointer used to traverse each character in the string.\n    - `pos`, representing the current position of the character being traversed.\n\n- Main Logic\n  -- REGION Initialization\n    First, the address of the string `str` is obtained and assigned to the pointer `pt`. Then, the length of the string is retrieved using the `LEN` function and assigned to `L`.\n\n  -- REGION String Traversal\n    A `FOR` loop is used to traverse from the first character (`pos = 1`) to the last character (`pos = L`). In each iteration:\n    - The current character `pt^` is checked to determine if it is an uppercase letter (via the `ISC_UPPER` function).\n    - If it is not an uppercase letter, the function return value `IS_UPPER` is set to `FALSE`, and the function exits immediately.\n    - If the current character is an uppercase letter, the pointer `pt` is moved to the next character position (`pt := pt + 1`), and the next character is checked.\n\n  -- REGION Result Return\n    If all characters have been checked and are uppercase letters, the length of the string `L` is checked to see if it is greater than 0. If `L > 0`, `TRUE` is returned; otherwise, `FALSE` is returned. This handles the case of an empty string, as an empty string has no characters and thus no uppercase letters.", "name": "IS_UPPER"}