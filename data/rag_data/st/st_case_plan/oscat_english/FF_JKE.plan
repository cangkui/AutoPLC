Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\n  This code implements a simple JK Flip-Flop functional block. A JK flip-flop is a fundamental digital circuit component used to store and manipulate binary states. The block controls the output signal `Q` through input signals `J`, `K`, `CLK`, `SET`, and `RST`.\n\n- Variable Definitions\n  The code defines the following types of variables:\n  - Input variables: `SET` (set), `J` (J input), `CLK` (clock), `K` (K input), `RST` (reset).\n  - Output variable: `Q` (output state).\n  - Internal variable: `edge` (temporary variable for detecting clock rising edges).\n\n- Main Logic Section\n  -- REGION Main Logic\n     The JK flip-flop logic is triggered on the rising edge of the clock signal `CLK`. Below is a detailed description of the logic:\n     1. **Reset and Set Logic**:\n        - If `RST` or `SET` is true, these signals take priority.\n        - If `RST` is true, `Q` is forcibly set to false (`Q := NOT rst`, since `NOT rst` is false).\n        - If `SET` is true, `Q` is forcibly set to true (`Q := NOT rst`, since `NOT rst` is true).\n     2. **Clock Rising Edge Detection**:\n        - If `CLK` is true and `edge` is false, it indicates a rising edge of the clock, triggering the JK logic.\n     3. **JK Logic**:\n        - If `J` and `K` have different values (`J XOR K`), `Q` is directly set to the value of `J`.\n        - If `J` and `K` have the same value, `Q` toggles its state (`Q := K XOR Q`).\n     4. **Clock State Update**:\n        - Finally, `edge` is updated to the current value of `CLK` to detect the next clock rising edge in the subsequent cycle.\n\n- Summary\n  This functional block implements a basic JK flip-flop with reset, set, and clock-triggered functionality. The `J` and `K` input signals control the state changes of the output `Q`. The rising edge of the clock signal `CLK` triggers state updates, while the `RST` and `SET` signals forcibly set the output state.", "name": "FF_JKE"}