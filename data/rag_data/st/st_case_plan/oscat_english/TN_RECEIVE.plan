Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis code implements a function block named `TN_RECEIVE`, designed to process data received from a network buffer and parse it into specific input codes or ASCII characters. The parsed results are stored in the `Xus_TN_SCREEN` structure for subsequent processing or display.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input/Output Variables: `R_BUF` (network buffer) and `Xus_TN_SCREEN` (used to store parsed input information).\n - Internal Variables: `REQ_Size` (stores the size of received data) and `REQ1`, `REQ2`, `REQ3` (store the first three bytes of received data).\n\n- Main Logic\n -- REGION Initialization\n    First, initialize `by_Input_ASCII_Code` and `by_Input_Exten_Code` in `Xus_TN_SCREEN` to `BYTE#00`, indicating no input.\n\n -- REGION Data Processing\n    Check if `R_BUF.SIZE` is greater than 0, indicating data in the network buffer needs processing. If data exists, execute the following logic:\n     1. Assign the value of `R_BUF.SIZE` to `REQ_Size`, representing the size of received data.\n     2. Assign the first three bytes of `R_BUF.BUFFER` to `REQ1`, `REQ2`, and `REQ3`, representing the first three bytes of received data.\n\n -- REGION Parsing Logic\n    Based on the received data, execute the following parsing logic:\n     1. If `REQ1` is `BYTE#27` (ESC key) and `REQ_Size` is â‰¥ 3, further check `REQ2` and `REQ3`:\n        - If `REQ2` is `BYTE#91` and `REQ3` is between `BYTE#65` to `BYTE#68`, `BYTE#72`, or `BYTE#75`, assign `REQ3` to `Xus_TN_SCREEN.by_Input_Exten_Code`, indicating an extended input code.\n        - If `REQ2` is `BYTE#79` and `REQ3` is between `BYTE#80` to `BYTE#83`, assign `REQ3` to `Xus_TN_SCREEN.by_Input_Exten_Code`, indicating an extended input code.\n     2. If `REQ1` is an ASCII character between `BYTE#32` to `BYTE#126`, assign `REQ1` to `Xus_TN_SCREEN.by_Input_ASCII_Code`, indicating an ASCII input character. Additionally, use the `OSCAT_BASIC.ISC_NUM` function to check if `REQ1` is a number and assign the result to `Xus_TN_SCREEN.bo_Input_ASCII_IsNum`.\n     3. If `REQ1` is `BYTE#8` (Backspace), `BYTE#9` (Tab), `BYTE#13` (Enter), or `BYTE#27` (ESC), assign `REQ1` to `Xus_TN_SCREEN.by_Input_Exten_Code`, indicating an extended input code.\n\n -- REGION Buffer Cleanup\n    After processing the data, set `R_BUF.SIZE` to `UINT#00`, indicating the network buffer is cleared to receive new data.", "name": "TN_RECEIVE"}