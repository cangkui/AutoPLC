Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\nThis function `WORK_WEEK` is used to calculate the ISO workweek number for a given date. The ISO workweek is defined as follows: each week starts on Monday, and the first week is the one that contains the first Thursday of the year.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input variable: `idate`, representing the input date.\n - Internal variables:\n   - `d1`: Stores the first day of the given year.\n   - `w1`: Stores the day of the week for `d1` (1=Monday, 7=Sunday).\n   - `ds`: Stores the calculated reference date (the day before the first Thursday of the year).\n   - `yr`: Stores the year of the given date.\n   - `w31`: Used to store the day-of-week adjustment value for year transitions.\n   - `w01`: Used to store the day-of-week adjustment value for year transitions.\n   - `wm`: Used to store the maximum number of workweeks in the current year.\n\n- Main Logic\n -- REGION Calculate Reference Date\n    - First, extract the year from the input date and store it in `yr`.\n    - Use the `YEAR_BEGIN` function to get the first day of the year and store it in `d1`.\n    - Use the `DAY_OF_WEEK` function to get the day of the week for `d1` and store it in `w1`.\n    - Calculate the reference date `ds` based on the value of `w1`:\n      - If `w1` is less than 5 (i.e., the first day is Monday to Thursday), the reference date is `d1` minus `(w1 + 6)` days in seconds.\n      - Otherwise, the reference date is `d1` minus `(w1 - 1)` days in seconds.\n    - The reference date `ds` represents the day before the first Thursday of the year.\n\n -- REGION Calculate Workweek Number\n    - Calculate the difference in seconds between the input date and the reference date, then convert it to weeks and store the result in `WORK_WEEK`.\n    - If `WORK_WEEK` is 0, it means the input date belongs to the last week of the previous year. In this case:\n      - Calculate the day of the week for the last week of the previous year and store it in `w31`.\n      - If the previous year was a leap year and `w31` is greater than 1, adjust `w01`.\n      - If `w31` or `w01` equals 4 (i.e., Thursday), set `WORK_WEEK` to 53; otherwise, set it to 52.\n    - If `WORK_WEEK` is not 0, check if the current year is a leap year and calculate the maximum number of workweeks `wm` for the year:\n      - If it's a leap year and `w1` is less than 7, set `w31` to `w1 + 1`; otherwise, set it to 1.\n      - If `w31` or `w1` equals 4, set `wm` to 53; otherwise, set it to 52.\n      - If `WORK_WEEK` is greater than `wm`, reset it to 1 (indicating a transition to the first week of the next year).\n\n -- REGION Return Result\n    - Finally, the function returns the calculated `WORK_WEEK` value, representing the ISO workweek number for the input date.", "name": "WORK_WEEK"}