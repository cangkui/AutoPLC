Natural Language Requirements:  
{"variables": [], "instructions": [], "planning": "- Overview\nThis functional block, named `DNS_REV_CLIENT`, performs reverse DNS lookups to convert IP addresses into domain names. It achieves this by sending DNS requests and parsing the responses.\n\n- Variable Definitions\nThe code defines the following types of variables:\n - Input/Output Variables: `IP_C` (IP control structure), `S_BUF` (send buffer), `R_BUF` (receive buffer)\n - Input Variables: `ACTIVATE` (activation signal), `IP4` (IP address to query), `IP4_DNS` (DNS server IP address)\n - Output Variables: `DOMAIN` (resolved domain name), `DONE` (operation completion flag), `ERROR` (error code)\n - Internal Variables: `IP_FIFO` (IP FIFO structure), `ip_state` (IP state), `ip_id` (IP ID), `state` (state machine state), `ip4_copy` (IP address copy), `d` (domain string), `activate_last` (previous activation signal state), `i`, `dl`, `p1`, `char`, `char_count`, `tid` (temporary variables for loops and data processing)\n\n- Main Logic Section\n-- REGION State Machine Logic\nThe core logic of the functional block is implemented via a state machine, controlled by the `state` variable. Below is the detailed processing logic for each state:\n\n   - **State 00**:\n      - When the `ACTIVATE` signal is true and was false in the previous cycle, the block is activated to begin the reverse DNS lookup.\n      - First, the error flag `ERROR` is cleared, and the input IP address `IP4` is copied to `ip4_copy` for later use.\n      - The `ip_state` is set to `1`, indicating the start of IP address processing.\n      - The `DOMAIN` string is cleared, and the `DONE` flag is set to `FALSE`, indicating the operation is not yet complete.\n      - Next, the IP address is converted into a reverse DNS query string format. For example, the IP `1.2.3.4` becomes `4.3.2.1.in-addr.arpa`.\n        - A `FOR` loop is used to convert each byte of the IP address into a string and concatenate them into the reverse DNS format.\n      - After the IP conversion, the state transitions to `10` to prepare for sending the DNS request.\n\n   - **State 10**:\n      - When `ip_state` is `3`, it indicates IP processing is complete, and the DNS request is ready to be sent.\n      - First, the length `dl` of the reverse DNS query string is calculated.\n      - The send buffer `S_BUF` is initialized, with the first 17 bytes set to `0` to represent the DNS header.\n      - A transaction ID `tid` is generated and stored in the second byte of `S_BUF`.\n      - DNS request flags and query type are set:\n        - `S_BUF.BUFFER[2]` is set to `0x01` for a standard query.\n        - `S_BUF.BUFFER[5]` is set to `0x01` for a PTR (pointer record) query.\n      - The reverse DNS query string is then populated into `S_BUF`:\n        - A `WHILE` loop traverses the reverse DNS string, storing each character in `S_BUF`.\n        - If a `.` is encountered, it is replaced with a character count to indicate segment length.\n      - Finally, the query class is set (`S_BUF.BUFFER[i]` to `0x01` for Internet class).\n      - The IP control structure `IP_C` is configured with the DNS server IP `IP4_DNS`, port `53`, and send mode enabled.\n      - `S_BUF.SIZE` is set to the buffer length, and the receive buffer `R_BUF` is cleared.\n      - The state transitions to `30` to await the DNS response.\n\n   - **State 30**:\n      - This state handles the DNS response.\n      - First, `IP_C.ERROR` is checked for errors. If found, the error code is stored in `ERROR`, and the state machine resets to `0`.\n      - If `R_BUF` contains data and the transaction ID `tid` matches the sent request, the response is parsed.\n      - The DNS response error code (lower 4 bits of `R_BUF.BUFFER[3]`) is checked and stored in `ERROR`.\n      - If the error code is `0` (success), the domain name is parsed:\n        - The domain portion is extracted from the response and converted to string format.\n        - A `WHILE` loop traverses the receive buffer to locate the domain name start and stores it in `DOMAIN`.\n      - After parsing, the state transitions to `0`, and `DONE` is set to `TRUE` to indicate completion.\n      - If an error occurs, the state machine resets to `0`.\n\n   - **State 0**:\n      - This idle state waits for the next activation.\n      - The IP control structure `IP_C` observe flag `R_OBSERVE` is reset, and `ip_state` is set to `4` for completion.\n\n-- REGION Activation Signal Handling\nAfter the state machine logic, the `activate_last` variable is updated to track changes in `ACTIVATE`, detecting rising edges to trigger the next reverse DNS lookup.\n\n-- REGION IP FIFO Handling\nThe `IP_FIFO` block is called to manage IP state and ID updates, ensuring ordered processing of network requests and responses via the `IP_C` FIFO queue.\n\n- Summary\nThis functional block uses a state machine to control the reverse DNS lookup process, including initialization, request sending, response handling, and result parsing. It leverages IP control structures and buffers for network communication, with state and temporary variables managing query states and data. Each state has detailed logic to ensure accuracy and reliability in reverse DNS queries.", "name": "DNS_REV_CLIENT"}