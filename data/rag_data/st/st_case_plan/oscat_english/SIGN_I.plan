Natural Language Requirements: {"variables": [], "instructions": [], "planning": "- Overview\nThis is a simple function `SIGN_I` used to determine whether the sign bit (the highest bit) of an input `DINT` type variable is 1. If the sign bit is 1, it returns `TRUE`; otherwise, it returns `FALSE`. A sign bit of 1 indicates that the number is negative.\n\n- Variable Definitions\nThe code defines two types of variables:\n - Input variable: `IN`, of type `DINT`, representing the input 32-bit integer.\n - Output variable: `SIGN_I`, of type `BOOL`, indicating whether the sign bit of the input integer is 1.\n\n- Main Logic\n -- REGION Main Logic\n    The core logic of the function is to check the 31st bit (counting from 0) of the input variable `IN` to determine if the sign bit is 1. `IN.31` represents the highest bit (sign bit) of `IN`. If this bit is 1, `SIGN_I` is assigned `TRUE`, indicating the input is negative; otherwise, `SIGN_I` is assigned `FALSE`, indicating the input is positive or zero.\n\n    Implementation details:\n    ```plaintext\n    SIGN_I := IN.31;\n    ```\n    This line of code directly extracts the 31st bit of `IN` and assigns it to `SIGN_I`.\n\n- Summary\nThe function is very simple and is solely used to determine whether the sign bit of an input `DINT` type variable is 1. Its core logic is implemented through bit operations, making it suitable for scenarios requiring quick determination of an integer's sign.", "name": "SIGN_I"}