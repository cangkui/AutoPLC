{"variables": [], "instructions": [], "planning": "- 概述\n  这段代码实现了一个名为 `ARRAY_HAV` 的函数，用于计算数组中元素的调和平均数（Harmonic Average）。调和平均数是倒数平均数的倒数，常用于计算比率或速度的平均值。函数接收一个指向实数数组的指针和数组的大小作为输入，并返回调和平均数。\n\n- 变量定义\n  - 输入变量：\n    - `pt`：指向一个实数数组的指针，数组的大小为 `0..32000`。\n    - `size`：数组的大小，类型为 `UINT`。\n  - 内部变量：\n    - `i`：循环计数器，类型为 `UINT`。\n    - `stop`：循环的结束条件，类型为 `UINT`，用于确定需要处理的数组元素数量。\n\n- 主逻辑部分\n  -- REGION 初始化：\n     - 计算循环的结束条件 `stop`。`stop` 的值为 `size` 右移 2 位（相当于除以 4）再减 1。这种操作通常用于处理数组的特定部分（例如每 4 个元素中的第一个）。\n  -- REGION 调和平均数计算：\n     - 使用 `FOR` 循环遍历数组中的元素，从 `0` 到 `stop`。\n     - 在循环中，检查当前元素 `pt^[i]` 是否为 `0.0`。如果为 `0.0`，则调和平均数为 `0.0`，并立即返回（因为调和平均数的计算中不能有零值）。\n     - 如果当前元素不为 `0.0`，则将其倒数累加到 `ARRAY_HAV` 中。\n  -- REGION 结果计算：\n     - 循环结束后，将 `stop + 1`（即处理的元素数量）转换为实数，并除以累加的倒数之和，得到调和平均数。\n     - 将结果赋值给 `ARRAY_HAV` 并返回。\n\n- 关键细节\n  - 调和平均数的计算要求所有元素均为非零值。如果数组中有任何元素为零，则函数会立即返回 `0.0`。\n  - 函数通过指针访问数组，因此可以直接操作原始数据，避免了数组拷贝的开销。\n  - `stop` 的计算方式表明函数可能仅处理数组的一部分（例如每 4 个元素中的第一个），具体取决于 `size` 的值。", "name": "ARRAY_HAV"}