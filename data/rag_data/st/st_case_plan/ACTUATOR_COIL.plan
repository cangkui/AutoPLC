{"variables": [], "instructions": [], "planning": "- 概述\n这段代码实现了一个名为`ACTUATOR_COIL`的功能块，用于控制一个执行器的线圈。它根据输入信号`IN`的状态以及自激活周期和时间来控制输出`OUT`和状态`STATUS`。该功能块还支持自激活功能，即在没有输入信号的情况下，根据设定的周期和时间自动激活输出。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：`IN`（输入信号）、`self_act_cycle`（自激活周期）、`self_act_time`（自激活时间）。\n - 输出变量：`OUT`（输出信号）、`STATUS`（状态）。\n - 内部变量：`last`（上次激活时间）、`init`（初始化标志）、`tx`（时间差）、`now`（当前时间）。\n\n- 主逻辑部分\n-- REGION 初始化\n   在功能块的第一次运行时，初始化`last`变量为当前时间，并设置`init`标志为`TRUE`，以确保后续逻辑正确执行。\n\n-- REGION 输入信号处理\n   如果输入信号`IN`为`TRUE`，则直接激活输出`OUT`为`TRUE`，并将状态`STATUS`设置为`101`，表示执行器处于激活状态。同时，更新`last`变量为当前时间。\n\n-- REGION 自激活逻辑\n   如果输入信号`IN`为`FALSE`，则首先将输出`OUT`设置为`FALSE`，并将状态`STATUS`设置为`100`，表示执行器处于非激活状态。\n   然后，计算当前时间与上次激活时间的差值`tx`。如果自激活周期`self_act_cycle`大于零且`tx`大于或等于自激活周期，则激活输出`OUT`为`TRUE`，并将状态`STATUS`设置为`102`，表示执行器处于自激活状态。\n   如果`tx`进一步大于或等于自激活周期与自激活时间的总和，则将输出`OUT`设置为`FALSE`，并将状态`STATUS`重置为`100`，表示自激活过程结束。同时，更新`last`变量为当前时间。\n\n-- REGION 结束\n   功能块的逻辑执行完毕，输出信号`OUT`和状态`STATUS`根据输入信号和自激活逻辑进行了更新。", "name": "ACTUATOR_COIL"}