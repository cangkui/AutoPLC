{"variables": [], "instructions": [], "planning": "- 概述\n  这段代码实现了一个名为 `CLICK_CNT` 的功能块，用于检测输入信号的点击次数。当输入信号的点击次数达到指定次数（`N`）时，输出 `Q` 会变为 `TRUE`。功能块还使用了一个定时器（`TP` 类型）来限制点击的时间间隔。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：`IN`（输入信号）、`N`（点击次数阈值）、`TC`（时间限制）。\n  - 输出变量：`Q`（输出信号，表示点击次数是否达到阈值）。\n  - 内部变量：`tx`（定时器实例）、`edge`（用于检测输入信号的上升沿）、`cnt`（点击计数器，初始化为 -1）。\n\n- 主逻辑部分\n  -- REGION 主逻辑\n    功能块的核心逻辑如下：\n    1. **初始化输出**：将输出 `Q` 初始化为 `FALSE`。\n    2. **检测点击开始**：\n       - 如果输入信号 `IN` 为 `TRUE`，且 `edge` 为 `FALSE`（表示检测到上升沿），且定时器 `tx` 的输出 `Q` 为 `FALSE`（表示定时器未运行），则重置计数器 `cnt` 为 `0`，表示开始检测点击。\n    3. **点击计数**：\n       - 如果定时器 `tx` 的输出 `Q` 为 `TRUE`（表示定时器正在运行），且输入信号 `IN` 为 `FALSE`，且 `edge` 为 `TRUE`（表示检测到下降沿），则计数器 `cnt` 加 1，表示检测到一次点击。\n    4. **检测点击完成**：\n       - 如果定时器 `tx` 的输出 `Q` 为 `FALSE`（表示定时器已停止），则检查计数器 `cnt` 是否等于阈值 `N`。如果相等，则将输出 `Q` 设置为 `TRUE`，表示点击次数达到阈值。同时，将计数器 `cnt` 重置为 `-1`，准备下一次检测。\n    5. **更新边缘检测**：将当前输入信号 `IN` 的值存储到 `edge` 中，用于下一个周期的边缘检测。\n    6. **定时器控制**：调用定时器 `tx`，将输入信号 `IN` 和定时时间 `TC` 传递给定时器，用于控制点击的时间间隔。\n\n- 总结\n  该功能块通过检测输入信号的上升沿和下降沿，结合定时器的控制，实现了对点击次数的精确计数。当点击次数达到指定阈值时，输出 `Q` 会变为 `TRUE`。定时器的使用确保了点击操作必须在规定的时间间隔内完成，否则计数器会重置。", "name": "CLICK_CNT"}