{"variables": [], "instructions": [], "planning": "- 概述\n  该功能块 `TN_INPUT_MENU_BAR` 用于管理和显示菜单栏及其子菜单。它处理菜单的创建、更新、导航和销毁，并与屏幕输入交互。功能块的核心逻辑基于状态机，用于管理菜单的不同状态（如创建、激活、销毁等），并通过输入事件（如按键）来驱动状态转换。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 内部变量：包括菜单栏和弹出菜单的功能块实例、菜单栏的标题、行和列的位置、菜单项的计数和索引、滚动偏移量、属性标志等。\n  - 输入/输出变量：包括菜单和屏幕的全局状态，用于在功能块之间传递数据。\n\n- - 主逻辑部分\n  -- REGION 初始化菜单\n     当菜单状态为 `00`（未初始化）且 `bo_Create` 为真时，功能块进入初始化逻辑：\n     - 将菜单状态设置为 `01`（已创建），表示菜单已初始化。\n     - 重置 `bo_Create` 标志，防止重复初始化。\n     - 设置默认的菜单选择项 `in_Menu_Selected` 为 `00`。\n     - 设置 `bo_Update` 为真，表示需要更新菜单显示。\n     - 设置 `bo_Reset_Position` 为真，表示需要重置菜单项的位置。\n     - 使用 `ELEMENT_GET` 函数从菜单文本 `st_MENU_TEXT` 中提取菜单栏内容，并将其存储在 `st_MENU_BAR` 中。\n     - 使用 `ELEMENT_COUNT` 函数计算菜单栏中的菜单项数量，并将其存储在 `in_Menu_E_Count` 中。\n\n  -- REGION 处理输入事件\n     根据屏幕输入的扩展代码（`by_Input_Exten_Code`）处理不同的按键事件：\n     - 如果输入代码为 `65` 或 `66`，表示用户按下了特定的导航键（如上下键），将其传递给弹出菜单处理，存储在 `us_TN_MENU_POPUP.by_Input_Exten_Code` 中。\n     - 如果输入代码为 `27`（ESC键），表示用户按下了取消键：\n       - 如果当前状态为 `01`（已创建），则进入状态 `02`（激活菜单栏），并设置 `bo_Update` 为真，表示需要更新菜单显示。同时，设置 `bo_Menue_Bar_Dialog` 为真，表示菜单栏对话框已激活。\n       - 如果当前状态为 `02`（激活菜单栏），则销毁弹出菜单，设置 `bo_Destroy` 为真，并返回状态 `01`。同时，重置 `bo_Reset_Position` 为真，表示需要重置菜单项的位置，并设置 `bo_Menue_Bar_Dialog` 为假，表示菜单栏对话框已关闭。\n\n  -- REGION 处理菜单栏激活状态\n     在状态 `02`（激活菜单栏）下，处理以下事件：\n     - 如果输入代码为 `13`（回车键），表示用户选择了某个菜单项：\n       - 销毁弹出菜单，设置 `bo_Destroy` 为真。\n       - 返回状态 `01`，并设置 `bo_Update` 为真，表示需要更新菜单显示。\n       - 设置 `bo_Reset_Position` 为真，表示需要重置菜单项的位置。\n       - 计算当前选择的菜单项 `in_Menu_Selected`，并将其存储在 `in_Menu_Selected` 中。\n       - 重置屏幕输入代码 `by_Input_Exten_Code` 为 `00`。\n       - 设置 `bo_Menue_Bar_Dialog` 为假，表示菜单栏对话框已关闭。\n     - 如果 `bo_Destroy` 为真，表示需要销毁菜单：\n       - 销毁弹出菜单，设置 `bo_Destroy` 为真。\n       - 返回状态 `01`，并设置 `bo_Update` 为真，表示需要更新菜单显示。\n       - 设置 `bo_Reset_Position` 为真，表示需要重置菜单项的位置。\n       - 重置 `in_Menu_Selected` 为 `00`，表示没有选择任何菜单项。\n       - 重置屏幕输入代码 `by_Input_Exten_Code` 为 `00`。\n       - 设置 `bo_Menue_Bar_Dialog` 为假，表示菜单栏对话框已关闭。\n     - 如果输入代码为 `67` 或 `68`，表示用户按下了滚动键（如左右键）：\n       - 根据输入代码设置滚动偏移量 `in_Scroll_Offset` 为 `1` 或 `-1`。\n       - 设置 `bo_Update` 为真，表示需要更新菜单显示。\n       - 重置屏幕输入代码 `by_Input_Exten_Code` 为 `00`。\n\n  -- REGION 重置位置\n     如果 `bo_Reset_Position` 为真，表示需要重置菜单项的位置：\n     - 重置菜单项的屏幕位置坐标 `in_X_SM_old` 和 `in_Y_SM_old` 为 `-1`。\n     - 重置 `bo_Reset_Position` 为假，表示位置已重置。\n\n  -- REGION 更新菜单显示\n     在菜单状态大于 `00` 且 `bo_Update` 为真时，更新菜单栏的显示内容：\n     - 重置 `bo_Update` 为假，表示更新已完成。\n     - 获取菜单栏的显示位置 `in_ROW` 和 `in_COL`。\n     - 如果滚动偏移量 `in_Scroll_Offset` 不为 `00`，则调整当前菜单项的位置 `in_Cur_Menu_Item`，并使用 `OSCAT_BASIC.INC2` 函数确保其在有效范围内。然后重置 `in_Scroll_Offset` 为 `00`。\n     - 如果 `in_Cur_Menu_Item` 为 `00`，则将其设置为 `01`，表示默认选择第一个菜单项。\n     - 遍历所有菜单项，根据当前选择的菜单项设置不同的属性（如颜色）：\n       - 如果当前菜单项是选择的菜单项且状态大于 `01`，则设置属性 `by_ATTR` 为 `by_Attr_mF`（高亮显示），并更新菜单项的屏幕位置 `in_Y_SM_new` 和 `in_X_SM_new`。\n       - 否则，设置属性 `by_ATTR` 为 `by_Attr_oF`（正常显示）。\n     - 使用 `ELEMENT_GET` 函数从菜单栏中提取当前菜单项的标题，并将其存储在 `st_MENU_TITLE` 中。\n     - 计算标题的长度 `in_TITLE_Length`，并调用 `FB_TN_SC_WRITE_C` 功能块将菜单项写入屏幕。\n     - 更新菜单项的显示位置 `in_COL`，以便下一个菜单项可以正确显示。\n\n  -- REGION 处理弹出菜单\n     如果菜单项的屏幕位置 `in_X_SM_new` 发生变化，处理弹出菜单的显示：\n     - 如果弹出菜单已激活，设置 `bo_Destroy` 为真，表示需要销毁当前的弹出菜单。\n     - 调用 `FB_TN_INPUT_MENU_POPUP` 功能块更新弹出菜单的状态。\n     - 如果弹出菜单未激活，创建新的弹出菜单：\n       - 设置弹出菜单的位置 `in_Y` 和 `in_X` 为 `in_Y_SM_new` 和 `in_X_SM_new`。\n       - 设置弹出菜单的属性 `by_Attr_mF` 和 `by_Attr_oF`。\n       - 使用 `ELEMENT_GET` 函数从菜单文本 `st_MENU_TEXT` 中提取弹出菜单的内容，并将其存储在 `st_Menu_Text` 中。\n       - 设置 `bo_Create` 为真，表示需要创建新的弹出菜单。\n       - 更新菜单项的屏幕位置 `in_X_SM_old` 和 `in_Y_SM_old`，以便下次检测位置变化。\n\n  -- REGION 更新弹出菜单\n     调用 `FB_TN_INPUT_MENU_POPUP` 功能块更新弹出菜单的状态，并获取当前选择的子菜单项 `in_Cur_Item`，将其存储在 `in_Cur_Sub_Item` 中。\n\n  -- REGION 销毁菜单\n     如果当前状态为 `01`（已创建）且 `bo_Destroy` 为真，则销毁菜单：\n     - 将菜单状态重置为 `00`（未初始化）。\n     - 重置 `bo_Destroy` 为假，表示销毁已完成。\n     - 重置当前选择的菜单项 `in_Cur_Menu_Item` 和子菜单项 `in_Cur_Sub_Item` 为 `00`，表示没有选择任何菜单项。", "name": "TN_INPUT_MENU_BAR"}