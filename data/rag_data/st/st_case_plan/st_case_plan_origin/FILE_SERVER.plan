{"variables": [], "instructions": [], "planning": "- 概述\n这个功能块 `FILE_SERVER` 用于处理文件操作，包括文件的打开、关闭、读取、写入、删除、定位和获取文件大小等操作。它通过状态机（step）来控制不同的文件操作流程，并根据操作结果更新文件服务器的状态。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入输出变量：`FSD`（文件服务器数据）和 `PT`（网络缓冲区）。\n - 内部变量：包括文件操作的缓冲区大小、文件句柄、读取/写入长度、文件位置、文件名、错误代码、错误标志、文件变化标志、状态步骤等。\n - 临时变量：无显式定义，但通过 `step` 和 `command` 来控制流程。\n\n- - 主逻辑部分\n-- REGION 状态机控制\n   状态机通过 `step` 变量来控制不同的文件操作流程。每个 `step` 对应一个特定的操作步骤，如文件打开、关闭、读取、写入等。状态机的核心逻辑是通过 `CASE` 语句实现的，根据当前的 `step` 值执行相应的操作，并在操作完成后更新 `step` 值以进入下一个状态。\n   - `step = 0`：初始化状态，检查 `FSD.MODE` 的值，决定进入哪个操作流程。`FSD.MODE` 的取值范围为 1 到 5，分别对应不同的操作模式：\n     - 如果 `FSD.MODE = 4`，表示需要关闭文件。如果文件句柄 `handle` 大于 0，则设置 `File_change` 为 `TRUE`，并跳转到 `step = 32000` 执行文件关闭操作；否则直接跳转到 `step = 90` 执行文件删除操作。\n     - 如果 `FSD.MODE = 5`，直接跳转到 `step = 32000` 执行文件关闭操作。\n     - 如果 `handle = 0`，表示文件未打开，跳转到 `step = 100` 执行文件打开操作。\n     - 如果 `used_filename` 与 `FSD.FILENAME` 相同且 `FSD.MODE` 与 `last_mode` 相同，则跳转到 `step = 200` 执行文件定位操作；否则设置 `File_change` 为 `TRUE`，并跳转到 `step = 32000` 执行文件关闭操作。\n\n   - `step = 90` 和 `step = 95`：处理文件删除操作。设置 `command = 7`，表示执行文件删除操作，并跳转到 `step = 95`。如果 `command = 0`，表示删除操作完成，跳转到 `step = 30000` 进行错误处理。\n\n   - `step = 100` 和 `step = 110`：处理文件打开操作。设置 `command = 8`，表示执行获取文件大小操作，并跳转到 `step = 110`。如果 `command = 0`，表示获取文件大小操作完成，根据 `FSD.MODE` 的值设置文件打开模式：\n     - 如果 `FSD.MODE = 1`，设置打开模式为 `'r'`（只读），并更新 `FSD.FILE_SIZE`。\n     - 如果 `FSD.MODE = 2`，设置打开模式为 `'a'`（追加），并更新 `FSD.FILE_SIZE`。\n     - 如果 `FSD.MODE = 3`，设置打开模式为 `'w'`（写入），并将 `FSD.FILE_SIZE` 设置为 0。\n     然后设置 `command = 1`，表示执行文件打开操作，并跳转到 `step = 150`。\n\n   - `step = 150`：文件打开操作完成后，检查是否有错误。如果有错误，跳转到 `step = 30000` 进行错误处理；否则更新文件句柄 `handle`、文件名 `used_filename`、文件位置 `file_position`，并将 `FSD.FILE_OPEN` 设置为 `TRUE`，跳转到 `step = 200` 执行文件定位操作。\n\n   - `step = 200` 和 `step = 210`：处理文件定位操作。根据 `FSD.OFFSET` 的值决定是否需要重新定位文件：\n     - 如果 `FSD.OFFSET = 4294967294`，表示需要将文件位置定位到文件末尾，设置 `seek_position = FSD.FILE_SIZE`，并设置 `command = 5`，表示执行文件定位操作，跳转到 `step = 210`。\n     - 如果 `FSD.OFFSET > FSD.FILE_SIZE`，表示文件位置超出文件大小，设置错误代码 `error_code = 255`，并跳转到 `step = 30000` 进行错误处理。\n     - 如果 `FSD.OFFSET` 不等于 `file_position`，表示需要重新定位文件，设置 `seek_position = FSD.OFFSET`，并设置 `command = 5`，表示执行文件定位操作，跳转到 `step = 210`。\n     - 如果 `FSD.OFFSET` 等于 `file_position`，直接跳转到 `step = 300` 执行读取或写入操作。\n     在 `step = 210`，如果 `command = 0`，表示文件定位操作完成，更新 `file_position` 为 `seek_position`，并跳转到 `step = 300`。\n\n   - `step = 300`：根据 `FSD.MODE` 的值决定进入读取或写入操作：\n     - 如果 `FSD.MODE = 1`，跳转到 `step = 400` 执行文件读取操作。\n     - 如果 `FSD.MODE = 2` 或 `FSD.MODE = 3`，跳转到 `step = 500` 执行文件写入操作。\n\n   - `step = 400` 和 `step = 410`：处理文件读取操作。首先检查读取长度是否超过缓冲区大小 `buf_size`，如果超过，则将读取长度 `read_max_length` 设置为 `buf_size`；否则设置为 `PT.SIZE`。然后检查读取长度是否超出文件大小，如果超出，则调整 `read_max_length` 为 `FSD.FILE_SIZE - file_position`。如果 `read_max_length > 0`，设置 `command = 3`，表示执行文件读取操作，并跳转到 `step = 410`。如果 `command = 0`，表示读取操作完成，更新 `PT.SIZE` 和 `file_position`，并跳转到 `step = 30000` 进行错误处理。\n\n   - `step = 500` 和 `step = 510`：处理文件写入操作。首先检查写入长度是否超过缓冲区大小 `buf_size`，如果超过，则将写入长度 `write_length` 设置为 `buf_size`；否则设置为 `PT.SIZE`。如果 `write_length > 0`，设置 `command = 4`，表示执行文件写入操作，并跳转到 `step = 510`。如果 `command = 0`，表示写入操作完成，更新 `file_position` 和 `FSD.FILE_SIZE`，并跳转到 `step = 30000` 进行错误处理。\n\n   - `step = 30000`：操作完成后，重置 `FSD.MODE` 和 `FSD.ERROR`，并返回到初始状态 `step = 0`。\n\n   - `step = 32000` 和 `step = 32100`：处理文件关闭操作。如果 `handle > 0`，设置 `command = 2`，表示执行文件关闭操作，并跳转到 `step = 32100`。如果 `command = 0`，表示关闭操作完成，重置文件状态（如 `FSD.FILE_OPEN`、`file_position`、`FSD.FILE_SIZE`、`used_filename`、`handle` 等）。如果 `File_change = TRUE`，表示需要重新执行文件操作，跳转到 `step = 0`；否则跳转到 `step = 30000` 进行错误处理。\n\n-- REGION 文件操作执行\n   根据 `command` 的值执行具体的文件操作，包括文件打开、关闭、读取、写入、定位、删除和获取文件大小等。每个操作都通过调用系统函数（如 `SysFileOpen`、`SysFileClose` 等）来实现，并根据操作结果更新错误标志和错误代码。\n   - `command = 1`：执行文件打开操作，调用 `SysFileOpen` 函数打开文件，并更新 `open_handle` 和 `error` 标志。\n   - `command = 2`：执行文件关闭操作，调用 `SysFileClose` 函数关闭文件，并更新 `error` 标志。\n   - `command = 3`：执行文件读取操作，调用 `SysFileRead` 函数从文件中读取数据，并更新 `length_read` 和 `error` 标志。\n   - `command = 4`：执行文件写入操作，调用 `SysFileWrite` 函数向文件中写入数据，并更新 `length_written` 和 `error` 标志。\n   - `command = 5`：执行文件定位操作，调用 `SysFileSetPos` 函数设置文件位置，并更新 `error` 标志。\n   - `command = 6`：执行文件位置获取操作，调用 `SysFileGetPos` 函数获取文件位置，并更新 `tell_position` 和 `error` 标志。\n   - `command = 7`：执行文件删除操作，调用 `SysFileDelete` 函数删除文件，并更新 `error` 标志。\n   - `command = 8`：执行文件大小获取操作，调用 `SysFileGetSize` 函数获取文件大小，并更新 `file_size` 和 `error_code`。\n\n-- REGION 错误处理\n   在每个文件操作执行后，检查是否发生错误。如果发生错误，则设置错误标志和错误代码，并将状态机跳转到错误处理状态（`step = 30000`）。在 `step = 30000` 中，重置 `FSD.MODE` 和 `FSD.ERROR`，并返回到初始状态 `step = 0`。", "name": "FILE_SERVER"}