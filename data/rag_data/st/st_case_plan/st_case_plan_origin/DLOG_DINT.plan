{"variables": [], "instructions": [], "planning": "- 概述\n  该功能块 `DLOG_DINT` 用于记录和存储整数值及其相关信息，并支持基于增量变化的触发机制。它通过一个循环缓冲区（`UNI_CIRCULAR_BUFFER`）来存储数据，并根据输入的增量值决定是否记录新的数据。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入输出变量：`X`，一个派生类型 `DLOG_DATA`，用于存储和管理日志数据。\n  - 输入变量：`VALUE`（整数值）、`COLUMN`（字符串，长度为40）、`DELTA`（整数增量值）。\n  - 内部变量：`UCB`（派生类型 `UNI_CIRCULAR_BUFFER`，用于存储数据）、`id`（字整数，用于标识数据）、`delta_last`（上一个增量值）、`value_last`（上一个值）。\n\n- 主逻辑部分\n  -- REGION CASE 语句\n     该区域通过 `CASE` 语句处理不同的操作模式，具体逻辑如下：\n     - 01: 增加 `X.ID_MAX` 的值，并设置 `id` 为 `WORD#16#0801`。\n     - 02: 将 `COLUMN` 字符串存储到 `UCB.D_STRING` 中，并设置 `UCB.D_HEAD` 为 `id`，`UCB.D_MODE` 为 1，然后调用 `UCB` 功能块来存储数据。\n     - 03: 将上一个值 `value_last` 转换为字符串并存储到 `UCB.D_STRING` 中，设置 `UCB.D_HEAD` 为 `id`，`UCB.D_MODE` 为 1，然后调用 `UCB` 功能块来存储数据。同时，将 `delta_last` 更新为 `value_last`。\n     - 04: 检查增量值 `DELTA` 是否为非零。如果是，则检查当前值 `VALUE` 是否超过了 `delta_last` 的增量范围（即 `VALUE <= (delta_last - DELTA)` 或 `VALUE >= (delta_last + DELTA)`）。如果满足条件，则设置 `X.ADD_DATA_REQ` 为 `TRUE`，表示需要添加新数据，并将 `delta_last` 更新为当前值 `VALUE`。\n\n  -- REGION 更新上一个值\n     在处理完 `CASE` 语句后，将 `value_last` 更新为当前值 `VALUE`，以便在下一个周期中使用。", "name": "DLOG_DINT"}