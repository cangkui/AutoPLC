{"variables": [], "instructions": [], "planning": "- 概述\n该功能块 `FIND_CHAR` 用于在给定的字符串中从指定位置开始查找第一个有效字符的位置。有效字符的定义基于 ASCII 码值，并且可以通过配置 `setup.EXTENDED_ASCII` 来决定是否包含扩展 ASCII 字符。\n\n- 变量定义\n代码中定义了以下几类变量：\n  - 输入变量：`str` 是一个字符串，表示待查找的字符串；`pos` 是一个整数，表示查找的起始位置。\n  - 内部变量：`i` 是一个循环计数器；`pt` 是一个指向字符串字节数组的指针；`stop` 是一个整数，表示字符串的长度；`X` 是一个字节，用于存储当前字符的 ASCII 值。\n\n- 主逻辑部分\n  -- REGION 初始化\n    - 首先，将字符串 `str` 的地址赋值给指针 `pt`，以便通过指针访问字符串的字节数组。\n    - 使用 `LEN(str)` 获取字符串的长度，并将其赋值给 `stop`，作为循环的终止条件。\n\n  -- REGION 查找有效字符\n    - 使用 `FOR` 循环从 `MAX(pos,1)` 开始遍历字符串，直到 `stop` 结束。`MAX(pos,1)` 确保起始位置至少为 1，避免无效的负数或零值。\n    - 在循环中，通过指针 `pt` 访问当前字符的 ASCII 值，并将其赋值给 `X`。\n    - 检查 `X` 是否为有效字符：\n      - 如果 `setup.EXTENDED_ASCII` 为真，则有效字符的范围是 ASCII 码值大于 31 且不等于 127。\n      - 如果 `setup.EXTENDED_ASCII` 为假，则有效字符的范围是 ASCII 码值大于 31 且小于 127。\n    - 如果找到有效字符，则将当前字符的位置 `i` 赋值给 `FIND_CHAR`，并立即返回。\n    - 如果循环结束后仍未找到有效字符，则将 `FIND_CHAR` 赋值为 0，表示未找到。\n\n  -- REGION 返回结果\n    - 最终，`FIND_CHAR` 返回找到的有效字符的位置，或者返回 0 表示未找到有效字符。", "name": "FIND_CHAR"}