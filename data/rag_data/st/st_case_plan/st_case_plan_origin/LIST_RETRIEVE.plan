{"variables": [], "instructions": [], "planning": "- 概述\n  该功能块 `LIST_RETRIEVE` 用于从一个字符串列表中检索指定位置的子字符串，并将结果返回。同时，它会更新输入列表，移除已检索的部分。该功能块通过分隔符（`SEP`）来分割列表，并根据指定的位置（`POS`）提取相应的子字符串。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：`SEP`（分隔符，类型为 `BYTE`）、`POS`（位置，类型为 `INT`）。\n  - 输入输出变量：`LIST`（字符串列表，类型为 `STRING`，长度为 `LIST_LENGTH`）。\n  - 内部变量：`i`、`o`、`w`（用于循环和索引，类型为 `INT`），`pt` 和 `po`（指向 `LIST` 和 `LIST_RETRIEVE` 的指针，类型为 `POINTER TO ARRAY`），`cnt`（计数器，类型为 `INT`），`c`（当前字符，类型为 `BYTE`）。\n\n- 主逻辑部分\n  -- REGION 初始化\n     首先，将指针 `pt` 和 `po` 分别指向输入列表 `LIST` 和输出变量 `LIST_RETRIEVE` 的地址。同时，初始化计数器 `cnt` 为 0，用于记录当前处理的分隔符数量。\n  -- REGION 处理逻辑\n     如果 `POS` 大于 0，则进入主处理逻辑。通过一个循环遍历 `LIST` 的每个字符：\n     - 如果当前字符 `c` 为 0（字符串结束符），则将输出字符串 `LIST_RETRIEVE` 的结束符设置为 0，并根据 `cnt` 和 `POS` 的关系更新 `LIST` 的结束符。然后，函数返回。\n     - 如果 `cnt` 等于 `POS` 且当前字符 `c` 不是分隔符 `SEP`，则将当前字符复制到输出字符串 `LIST_RETRIEVE` 中，并递增输出索引 `o`。\n     - 如果 `cnt` 大于等于 `POS`，则将当前字符复制到 `LIST` 的新位置，并递增写入索引 `w`。\n     - 如果 `cnt` 小于 `POS`，则更新写入索引 `w` 为当前索引 `i`。\n     - 如果当前字符 `c` 是分隔符 `SEP`，则递增计数器 `cnt`。\n     如果 `POS` 小于等于 0，则将输出字符串 `LIST_RETRIEVE` 设置为空字符串。\n  -- REGION 返回结果\n     函数返回 `LIST_RETRIEVE`，即检索到的子字符串。", "name": "LIST_RETRIEVE"}