{"variables": [], "instructions": [], "planning": "- 概述\n  这是一个名为 `MD5_STR` 的功能块，用于计算输入字符串的 MD5 哈希值。它通过调用 `MD5_STREAM` 功能块来实现 MD5 哈希计算，并将结果存储在输出数组中。功能块的核心逻辑是一个状态机，用于管理 MD5 计算的不同阶段。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：`RUN`，用于启动 MD5 计算。\n  - 输出变量：`DONE`，用于指示 MD5 计算是否完成。\n  - 输入输出变量：`STR`，输入字符串；`MD5`，存储计算结果的字节数组。\n  - 内部变量：`run_last`，用于检测 `RUN` 信号的上升沿；`MD5_STREAM`，用于执行 MD5 计算的功能块实例；`buf`，用于存储字符串的临时缓冲区；`mode`，表示当前状态机的模式；`size`，表示字符串的长度；`pos`，表示当前处理的位置。\n\n- 主逻辑部分\n  -- REGION 状态机逻辑\n     状态机通过 `mode` 变量管理 MD5 计算的不同阶段：\n     - **模式 0（初始化）**：\n       当 `RUN` 信号从 `FALSE` 变为 `TRUE` 时，启动 MD5 计算。`DONE` 被设置为 `FALSE`，`mode` 设置为 1，`size` 被初始化为输入字符串的长度。\n     - **模式 2（处理字符串）**：\n       如果 `size` 大于 0，表示还有未处理的字符串部分。使用 `OSCAT_BASIC._STRING_TO_BUFFER` 函数将字符串的一部分复制到 `buf` 缓冲区中，以便后续计算。\n     - **模式 3（完成计算）**：\n       当 MD5 计算完成后，`DONE` 被设置为 `TRUE`，`mode` 重置为 0，表示计算完成并准备下一次计算。\n  \n  -- REGION MD5 计算调用\n     如果 `mode` 大于 0，表示 MD5 计算正在进行中，调用 `MD5_STREAM` 功能块执行实际的 MD5 计算。`MD5_STREAM` 的输入包括 `size`（字符串长度）、`mode`（当前模式）、`buf`（缓冲区）和 `MD5`（结果数组），输出是 `pos`（当前处理的位置）。\n\n  -- REGION 检测 RUN 信号变化\n     在每次循环结束时，将当前的 `RUN` 信号值存储到 `run_last` 中，以便在下一次循环中检测 `RUN` 信号的上升沿。\n\n  功能块的核心是通过状态机逐步处理输入字符串，并调用 `MD5_STREAM` 功能块完成 MD5 哈希计算。当计算完成后，`DONE` 信号被置为 `TRUE`，表示结果已存储在 `MD5` 数组中。", "name": "MD5_STR"}