{"variables": [], "instructions": [], "planning": "- 概述\n这段代码是一个使用SCL编写的功能块，名为“TN_INPUT_CONTROL”，用于管理和控制输入元素的焦点、更新和显示逻辑。它处理输入元素的选择、滚动、更新和工具提示显示等功能。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入输出变量：`Xus_TN_SCREEN`（屏幕相关数据）和`Xus_TN_INPUT_CONTROL`（输入控制相关数据），均为派生类型。\n - 局部变量：包括多个派生类型的实例（如`FB_TN_INPUT_SELECT_POPUP`、`FB_TN_INPUT_SELECT_TEXT`等）和一些基本类型的变量（如`in_index`、`in_Scroll_Offset`、`in_Focus_new`、`in_Focus_alt`、`bo_Tool_Tip_Update`）。\n\n- - 主逻辑部分\n -- REGION 初始检查\n    功能块首先检查两个条件：\n    1. `Xus_TN_INPUT_CONTROL.bo_Enable`是否为假（即输入控制是否被禁用）。\n    2. `Xus_TN_SCREEN.bo_Menue_Bar_Dialog`是否为真（即是否处于菜单栏对话框模式）。\n    如果任一条件为真，则功能块直接返回，不执行后续逻辑。这是为了确保在输入控制被禁用或处于特定对话框模式时，功能块不会进行不必要的处理。\n\n -- REGION 焦点重置\n    如果`Xus_TN_INPUT_CONTROL.bo_Reset_Fokus`为真，则执行焦点重置逻辑：\n    1. 将`bo_Reset_Fokus`设置为假，表示焦点重置已完成。\n    2. 使用一个`FOR`循环遍历所有输入元素（数量由`Xus_TN_INPUT_CONTROL.in_Count`决定），将每个输入元素的`bo_Focus`设置为假，表示取消所有输入元素的焦点。\n    3. 如果输入元素的数量大于或等于1，则将第一个输入元素的`bo_Focus`设置为真，并将`in_Focus_at`设置为1，表示焦点现在位于第一个输入元素。\n    4. 将`bo_Update_all`设置为真，表示需要更新所有输入元素的状态。\n\n -- REGION 滚动偏移计算\n    如果屏幕不处于模态对话框模式（即`Xus_TN_SCREEN.bo_Modal_Dialog`为假），则根据`Xus_TN_SCREEN.by_Input_Exten_Code`的值计算滚动偏移量（`in_Scroll_Offset`）：\n    - 如果`by_Input_Exten_Code`为`BYTE#09`，则滚动偏移量为1。\n    - 如果`by_Input_Exten_Code`为`BYTE#65`，则滚动偏移量为-1。\n    - 如果`by_Input_Exten_Code`为`BYTE#66`，则滚动偏移量为1。\n    这些偏移量用于在用户按下特定键时移动焦点。\n\n -- REGION 焦点更新\n    如果滚动偏移量（`in_Scroll_Offset`）不为零，则执行焦点更新逻辑：\n    1. 使用`LIMIT`函数确保当前焦点位置（`in_Focus_at`）在有效范围内（1到`in_Count`之间）。\n    2. 计算新的焦点位置（`in_Focus_new`），即当前焦点位置加上滚动偏移量。\n    3. 如果新的焦点位置超出输入元素的数量范围，则将其重置为1或`in_Count`，确保焦点循环滚动。\n    4. 记录旧的焦点位置（`in_Focus_alt`）。\n    5. 将旧焦点位置的输入元素的`bo_Focus`设置为假，并将`bo_Update_Input`设置为真，表示需要更新该输入元素。\n    6. 将新焦点位置的输入元素的`bo_Focus`设置为真，并将`bo_Update_Input`设置为真，表示需要更新该输入元素。\n    7. 更新`in_Focus_at`为新的焦点位置。\n    8. 将`bo_Tool_Tip_Update`设置为真，表示需要更新工具提示。\n    9. 将`in_Scroll_Offset`重置为零，表示焦点更新已完成。\n\n -- REGION 全部更新\n    如果`Xus_TN_INPUT_CONTROL.bo_Update_all`为真，则执行全部更新逻辑：\n    1. 使用一个`FOR`循环遍历所有输入元素，将每个输入元素的`bo_Update_All`设置为真，表示需要更新所有输入元素。\n    2. 将`bo_Update_all`设置为假，表示全部更新已完成。\n    3. 将`bo_Tool_Tip_Update`设置为真，表示需要更新工具提示。\n\n -- REGION 输入元素处理\n    使用一个`FOR`循环遍历所有输入元素，根据其类型（`in_Type`）执行相应的处理逻辑：\n    1. 如果输入元素的`in_Type`大于0，则进一步处理。\n    2. 如果输入元素具有焦点（`bo_Focus`为真），则更新其输入代码（`by_Input_ASCII_Code`和`by_Input_Exten_Code`）以及ASCII码是否为数字的标志（`bo_Input_ASCII_IsNum`）。\n    3. 如果`bo_Tool_Tip_Update`为真，则调用`FB_TN_SC_WRITE_C`功能块显示工具提示。工具提示的位置、属性和内容由`Xus_TN_INPUT_CONTROL`中的相关变量决定。\n    4. 根据输入元素的类型（`in_Type`），调用相应的功能块进行处理：\n       - 如果`in_Type`为1，调用`FB_TN_INPUT_EDIT_LINE`功能块处理编辑行输入。\n       - 如果`in_Type`为2，调用`FB_TN_INPUT_SELECT_TEXT`功能块处理文本选择输入。\n       - 如果`in_Type`为3，调用`FB_TN_INPUT_SELECT_POPUP`功能块处理弹出选择输入。\n    5. 如果输入元素具有焦点，则更新屏幕的光标位置（`in_Cursor_X`和`in_Cursor_Y`）为该输入元素的光标位置。\n\n -- REGION 光标位置更新\n    如果输入元素具有焦点，则更新屏幕的光标位置（`in_Cursor_X`和`in_Cursor_Y`）为该输入元素的光标位置。这确保光标在用户与输入元素交互时显示在正确的位置。", "name": "TN_INPUT_CONTROL"}