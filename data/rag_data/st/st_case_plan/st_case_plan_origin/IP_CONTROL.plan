{"variables": [], "instructions": [], "planning": "- 概述\n  这段代码实现了一个名为“IP_CONTROL”的功能块，用于管理网络连接的建立、数据传输和错误处理。它支持TCP和UDP协议，并提供了连接、发送和接收数据的控制逻辑。代码通过状态机管理连接状态，并使用定时器监控超时情况。\n\n- 变量定义\n  代码中定义了以下几类变量：\n   - 输入/输出变量：用于与外部系统交互，包括IP地址、端口号、超时时间、网络缓冲区等。\n   - 内部变量：用于存储连接状态、时间戳、错误码、发送和接收的字节数等。\n   - 常量：定义了状态机的各个状态，如初始化、连接、等待、关闭等。\n\n- - 主逻辑部分\n  -- REGION 初始化与参数设置\n      首先，获取当前时间戳（`tx`），并检查输入参数是否有效。如果端口号（`IP_C.C_PORT`）未设置，则使用默认值（`PORT`）。如果IP地址（`IP_C.C_IP`）未设置且模式（`IP_C.C_MODE`）小于4，则使用默认值（`IP`）。接着，判断是否有新的连接参数（如IP地址、端口号或模式发生变化），并设置连接使能标志（`c_enable`）。如果功能块处于停止状态（`state = STOP`）且没有错误（`IP_C.ERROR = 0`），则初始化连接参数，包括IP地址、端口号、模式等，并根据模式（UDP或TCP）进入相应的初始化状态（`UDP_INIT`、`TC_INIT`或`TS_INIT`）。\n\n  -- REGION 状态机管理\n      状态机是功能块的核心逻辑，负责管理连接的生命周期。以下是各状态的处理逻辑：\n      - **UDP_INIT**：初始化UDP连接。首先，创建UDP套接字（`SysSockCreate`）。如果创建失败，则设置错误状态（`c_status := 1`）并进入关闭状态（`C_CLOSE`）。如果成功，则设置套接字选项（广播模式和非阻塞模式），并初始化套接字地址结构（`sockaddr`）。如果模式为2或3（绑定模式），则尝试绑定套接字。如果绑定成功，则进入等待状态（`C_WAIT`）；否则，设置错误状态并进入关闭状态。\n      - **TC_INIT**：初始化TCP连接。首先，创建TCP套接字。如果创建失败，则设置错误状态并进入关闭状态。如果成功，则设置套接字选项（TCP_NODELAY和非阻塞模式），并初始化套接字地址结构。然后，进入连接状态（`TC_CONNECT`）。\n      - **TC_CONNECT**：尝试建立TCP连接。如果连接使能标志（`c_enable`）为假或发生错误（`c_status = 255`），则进入关闭状态。否则，尝试连接套接字。如果连接成功，则进入等待状态；如果失败且启用了非阻塞模式（`c_select`），则使用`select`函数等待连接完成。\n      - **TS_INIT**：初始化TCP服务器。首先，创建TCP套接字。如果创建失败，则设置错误状态并进入关闭状态。如果成功，则设置套接字选项（地址重用和非阻塞模式），并初始化套接字地址结构。然后，尝试绑定和监听套接字。如果绑定或监听失败，则设置错误状态并进入关闭状态；否则，进入打开状态（`TS_OPEN`）。\n      - **TS_OPEN**：等待客户端连接。使用`SysSockAccept`函数接收客户端连接。如果接收到有效连接，则进入等待状态；如果连接使能标志为假，则进入关闭状态。\n      - **C_WAIT**：在连接建立后，等待数据发送或接收。如果连接断开或禁用，则进入关闭状态。\n      - **C_CLOSE**：关闭连接，释放资源，并返回到停止状态。首先，关闭套接字并释放相关资源，然后重置状态为停止状态（`STOP`）。\n\n  -- REGION 连接状态更新\n      根据连接状态的变化，更新功能块的输出状态。如果连接成功建立（`c_ready`），则设置连接状态为254并重置时间戳（`IP_C.TIME_RESET := TRUE`）。如果连接断开（`NOT c_ready`），则设置连接状态为1并清除相关数据（如发送缓冲区大小和发送请求标志）。\n\n  -- REGION 数据接收\n      在连接建立后，检查接收缓冲区是否已满。如果未满，则从套接字接收数据。如果是UDP模式，则使用`SysSockRecvFrom`函数；如果是TCP模式，则使用`SysSockRecv`函数。接收到的数据存储在接收缓冲区中，并更新接收时间戳和状态。如果接收到的字节数为0（TCP模式下），则表示连接断开，设置错误状态并关闭连接。\n\n  -- REGION 数据发送\n      如果发送缓冲区中有数据（`S_BUF.SIZE > 0`）且连接正常，则启动发送过程。首先，初始化发送参数（如总字节数、当前位置和当前大小），并设置发送请求标志（`s_req`）。然后，使用`SysSockSendTo`函数（UDP模式）或`SysSockSend`函数（TCP模式）发送数据。发送完成后，更新发送状态和缓冲区指针。如果发送失败，则设置错误状态并关闭连接。\n\n  -- REGION 超时处理\n      监控连接、发送和接收的超时情况。如果连接超时（`tx - c_time > error_time`），则设置连接错误状态（`c_status := 255`）。如果发送超时（`tx - s_time > error_time`），则设置发送错误状态（`s_status := 255`）。如果接收超时（`tx - r_time > error_time`），则设置接收错误状态（`r_status := 255`）。\n\n  -- REGION 错误处理\n      根据连接、发送和接收的错误状态，更新功能块的错误输出（`IP_C.ERROR`）。如果发生严重错误，则关闭连接并返回到停止状态。错误状态会通过功能块的输出变量传递给外部系统。\n\n- 总结\n  该功能块通过状态机管理网络连接的生命周期，支持TCP和UDP协议，并提供了数据发送和接收的功能。代码通过定时器监控超时情况，并通过错误状态处理机制确保系统的稳定性。", "name": "IP_CONTROL"}