{"variables": [], "instructions": [], "planning": "- 概述\n  这个函数名为 `DAY_OF_MONTH`，用于计算给定日期对应的月份中的天数。它通过将一年中的天数减去闰年的影响，并根据预设的月份偏移量来确定当前月份中的天数。\n\n- 变量定义\n  - 输入变量：`IDATE`，表示输入的日期。\n  - 内部变量：`leap`，用于存储闰年标志（0 或 1）。\n\n- 主逻辑部分\n  -- REGION 计算一年中的天数\n     首先，函数调用 `DAY_OF_YEAR` 函数，将输入日期 `IDATE` 转换为一年中的天数，并将结果赋值给 `DAY_OF_MONTH`。\n  \n  -- REGION 判断是否为闰年\n     接着，函数调用 `LEAP_OF_DATE` 函数，判断输入日期是否属于闰年，并将结果转换为整数（0 或 1）存储在变量 `leap` 中。\n  \n  -- REGION 调整天数\n     函数将 `DAY_OF_MONTH` 减去 `leap`，以消除闰年对天数计算的影响。\n  \n  -- REGION 确定月份中的天数\n     函数通过一系列嵌套的 `IF` 语句，根据预设的月份偏移量（`setup.MTH_OFS`）来确定当前月份中的天数。具体逻辑如下：\n     1. 如果 `DAY_OF_MONTH` 大于第 9 个月的偏移量，则进一步检查是否大于第 11 个月或第 12 个月的偏移量，并相应地减去相应的偏移量。\n     2. 如果 `DAY_OF_MONTH` 大于第 5 个月的偏移量，则进一步检查是否大于第 7 个月或第 8 个月的偏移量，并相应地减去相应的偏移量。\n     3. 如果 `DAY_OF_MONTH` 大于第 3 个月的偏移量，则进一步检查是否大于第 4 个月的偏移量，并相应地减去相应的偏移量。\n     4. 如果以上条件都不满足，则将 `DAY_OF_MONTH` 加回 `leap`，并检查是否大于第 2 个月的偏移量，如果大于则减去第 2 个月的偏移量。\n  \n  -- REGION 返回结果\n     最终，函数返回计算出的月份中的天数 `DAY_OF_MONTH`。", "name": "DAY_OF_MONTH"}