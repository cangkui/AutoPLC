{"variables": [], "instructions": [], "planning": "- 概述\n此功能块名为“SEQUENCE_4”，用于实现一个四步顺序控制逻辑。它通过检查输入信号的状态和时间条件，逐步激活输出信号，并在每个步骤中监控时间限制。如果某个步骤超时或发生错误，顺序控制将停止，并设置相应的状态码。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：包括四个输入信号（in0, in1, in2, in3）、启动信号（start）、复位信号（rst）、每个步骤的等待时间和延迟时间（wait0, delay0, wait1, delay1, wait2, delay2, wait3, delay3）、以及是否在错误时停止的标志（stop_on_error）。\n - 输出变量：包括四个输出信号（Q0, Q1, Q2, Q3）、一个综合输出信号（QX）、运行标志（run）、当前步骤（step）和状态码（status）。\n - 内部变量：包括记录上次时间戳的变量（last）、启动信号的边沿检测变量（edge）、当前时间戳变量（tx）、初始化标志（init）。\n\n- - 主逻辑部分\n-- REGION 初始化\n   此区域用于初始化功能块。首先，将当前时间戳（通过T_PLC_MS()获取的毫秒数）转换为TIME类型并存储在tx中。如果功能块未初始化（init为FALSE），则设置last为当前时间戳（tx），并将状态码（status）设置为110（初始化状态），同时将init标志设置为TRUE。这确保功能块在第一次运行时正确初始化。\n\n-- REGION 复位逻辑\n   如果复位信号（rst）为真，则重置功能块的状态。具体操作包括：\n   - 将步骤（step）重置为-1，表示顺序控制未开始。\n   - 将所有输出信号（Q0, Q1, Q2, Q3）重置为0，表示所有输出信号关闭。\n   - 将状态码（status）设置为110，表示功能块处于初始化状态。\n   - 将运行标志（run）设置为0，表示顺序控制停止。\n\n-- REGION 启动逻辑\n   如果启动信号（start）为真且没有检测到启动信号的上升沿（edge为FALSE），则开始顺序控制。具体操作包括：\n   - 将步骤（step）设置为0，表示顺序控制从第一步开始。\n   - 记录当前时间戳到last，用于后续的时间计算。\n   - 将状态码（status）设置为111，表示顺序控制正在运行。\n   - 将所有输出信号（Q0, Q1, Q2, Q3）重置为0，确保初始状态干净。\n   - 将运行标志（run）设置为1，表示顺序控制正在运行。\n   最后，通过edge变量检测启动信号的上升沿，确保启动信号只触发一次。\n\n-- REGION 错误处理\n   如果状态码（status）在0到100之间且stop_on_error为真，则直接返回，停止进一步处理。此逻辑用于在发生错误时立即停止顺序控制，避免进一步的操作。\n\n-- REGION 步骤0\n   如果功能块正在运行（run为真）且当前步骤为0，则执行以下逻辑：\n   - 如果Q0为假且in0为真，并且当前时间与last的差值小于或等于wait0，则将Q0设置为真，并更新last为当前时间。这表示在等待时间（wait0）内检测到in0信号，Q0被激活。\n   - 如果Q0为假且当前时间与last的差值大于wait0，则将状态码（status）设置为1，运行标志（run）设置为假，表示步骤0超时。\n   - 如果Q0为真且当前时间与last的差值大于或等于delay0，则将步骤（step）设置为1，并更新last为当前时间。这表示Q0在激活后经过延迟时间（delay0），顺序控制进入下一步。\n\n-- REGION 步骤1\n   如果功能块正在运行（run为真）且当前步骤为1，则执行以下逻辑：\n   - 如果Q1为假且in1为真，并且当前时间与last的差值小于或等于wait1，则将Q0设置为假，Q1设置为真，并更新last为当前时间。这表示在等待时间（wait1）内检测到in1信号，Q1被激活，同时Q0关闭。\n   - 如果Q1为假且当前时间与last的差值大于wait1，则将状态码（status）设置为2，Q0设置为假，运行标志（run）设置为假，表示步骤1超时。\n   - 如果Q1为真且当前时间与last的差值大于或等于delay1，则将步骤（step）设置为2，并更新last为当前时间。这表示Q1在激活后经过延迟时间（delay1），顺序控制进入下一步。\n\n-- REGION 步骤2\n   如果功能块正在运行（run为真）且当前步骤为2，则执行以下逻辑：\n   - 如果Q2为假且in2为真，并且当前时间与last的差值小于或等于wait2，则将Q1设置为假，Q2设置为真，并更新last为当前时间。这表示在等待时间（wait2）内检测到in2信号，Q2被激活，同时Q1关闭。\n   - 如果Q2为假且当前时间与last的差值大于wait2，则将状态码（status）设置为3，Q1设置为假，运行标志（run）设置为假，表示步骤2超时。\n   - 如果Q2为真且当前时间与last的差值大于或等于delay2，则将步骤（step）设置为3，并更新last为当前时间。这表示Q2在激活后经过延迟时间（delay2），顺序控制进入下一步。\n\n-- REGION 步骤3\n   如果功能块正在运行（run为真）且当前步骤为3，则执行以下逻辑：\n   - 如果Q3为假且in3为真，并且当前时间与last的差值小于或等于wait3，则将Q2设置为假，Q3设置为真，并更新last为当前时间。这表示在等待时间（wait3）内检测到in3信号，Q3被激活，同时Q2关闭。\n   - 如果Q3为假且当前时间与last的差值大于wait3，则将状态码（status）设置为4，Q2设置为假，运行标志（run）设置为假，表示步骤3超时。\n   - 如果Q3为真且当前时间与last的差值大于或等于delay3，则将步骤（step）设置为-1，Q3设置为假，运行标志（run）设置为假，状态码（status）设置为110，表示顺序控制完成。\n\n-- REGION 综合输出\n   最后，将Q0、Q1、Q2、Q3的逻辑或结果赋值给QX，表示是否有任何一个输出信号为真。这提供了一个综合输出信号，用于指示顺序控制中是否有任何步骤正在激活状态。", "name": "SEQUENCE_4"}