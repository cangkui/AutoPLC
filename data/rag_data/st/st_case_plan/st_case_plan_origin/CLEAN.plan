{"variables": [], "instructions": [], "planning": "- 概述\n此函数名为 `CLEAN`，用于清理输入字符串 `IN`，移除其中包含在另一个字符串 `CX` 中的字符。函数返回清理后的字符串。\n\n- 变量定义\n代码中定义以下几类变量：\n  - 输入变量：\n    - `IN`：输入的字符串，需要被清理。\n    - `CX`：包含需要移除字符的字符串。\n  - 内部变量：\n    - `pos`：用于遍历输入字符串的索引，初始值为 1。\n    - `stop`：输入字符串的长度，用于控制循环的结束条件。\n\n- 主逻辑部分\n  - 初始化：\n    - 将输入字符串 `IN` 赋值给输出变量 `CLEAN`。\n    - 计算输入字符串 `IN` 的长度，并将其赋值给 `stop`，用于控制循环的结束条件。\n  - 循环处理：\n    - 使用 `WHILE` 循环遍历输入字符串 `IN`，从第一个字符开始（`pos = 1`）。\n    - 在每次循环中，使用 `MID` 函数从 `CLEAN` 中提取从第 1 个字符到当前 `pos` 位置的子字符串。\n    - 使用 `FIND` 函数检查该子字符串是否包含在 `CX` 中。如果包含，则继续增加 `pos` 的值，继续检查下一个字符。\n    - 如果不包含，则使用 `DELETE` 函数从 `CLEAN` 中删除该子字符串，并更新 `stop` 的值（减少 `pos` 的长度）。\n  - 结束条件：\n    - 当 `pos` 的值超过 `stop` 时，循环结束，函数返回清理后的字符串 `CLEAN`。\n\n- 详细逻辑\n  - 函数的核心逻辑是通过 `WHILE` 循环逐个检查输入字符串中的字符是否包含在 `CX` 中。\n  - 如果发现需要移除的字符，则将其从 `CLEAN` 中删除，并调整字符串的长度。\n  - 最终，函数返回清理后的字符串，其中不包含 `CX` 中的字符。\n\n- 输出结果\n  - 函数返回一个字符串，该字符串是输入字符串 `IN` 移除掉所有包含在 `CX` 中的字符后的结果。", "name": "CLEAN"}