{"variables": [], "instructions": [], "planning": "- 概述\n  这段代码实现了一个功能块 `FT_PDT1`，它结合了一个微分器 (`FT_DERIV`) 和一个一阶低通滤波器 (`FT_PT1`) 来对输入信号进行处理。最终输出是输入信号与处理后的微分信号的加权和。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：`IN`（输入信号）、`KP`（比例增益）、`TV`（微分时间常数）、`T1`（一阶低通滤波器的时间常数）。\n  - 输出变量：`Y`（输出信号）。\n  - 内部变量：`diff`（微分器实例）、`TP`（一阶低通滤波器实例）。\n\n- 主逻辑部分\n  -- REGION 微分器处理\n      使用 `FT_DERIV` 功能块对输入信号 `IN` 进行微分处理。微分器的输入是 `IN`，微分时间常数由 `TV` 控制。微分器的输出存储在 `diff.out` 中。\n  \n  -- REGION 一阶低通滤波器处理\n      使用 `FT_PT1` 功能块对微分器的输出 `diff.out` 进行滤波处理。滤波器的输入是 `diff.out`，时间常数由 `T1` 控制。滤波器的输出存储在 `tp.out` 中。\n\n  -- REGION 输出计算\n      最终输出 `Y` 是输入信号 `IN` 与滤波后的微分信号 `tp.out` 的加权和，加权系数由比例增益 `KP` 控制。计算公式为：\n      ```\n      Y := KP * (tp.out + IN)\n      ```", "name": "FT_PDT1"}