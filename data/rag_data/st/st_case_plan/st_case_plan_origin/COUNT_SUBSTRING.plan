{"variables": [], "instructions": [], "planning": "- 概述\n此函数名为 `COUNT_SUBSTRING`，用于计算字符串 `STR` 中子字符串 `SEARCH` 的出现次数。函数通过循环查找和替换子字符串的方式，统计其出现的次数。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：`SEARCH`（要查找的子字符串）和 `STR`（被查找的字符串）。\n - 局部变量：`pos`（用于存储子字符串在字符串中的位置）和 `size`（用于存储子字符串的长度）。\n\n- 主逻辑部分\n -- REGION 初始化\n    首先，将 `COUNT_SUBSTRING` 初始化为 0，表示子字符串的初始出现次数为 0。然后，计算子字符串 `SEARCH` 的长度，并将其存储在变量 `size` 中。\n\n -- REGION 查找与替换循环\n    使用 `REPEAT` 循环来查找子字符串 `SEARCH` 在字符串 `STR` 中的位置。每次循环中：\n    1. 使用 `FIND` 函数查找子字符串 `SEARCH` 在字符串 `STR` 中的位置，并将结果存储在变量 `pos` 中。\n    2. 如果 `pos` 大于 0，表示找到了子字符串，则执行以下操作：\n       - 使用 `REPLACE` 函数将子字符串 `SEARCH` 从字符串 `STR` 中移除。这里，`REPLACE` 函数用空字符串替换子字符串，替换的长度为 `size`，位置为 `pos`。\n       - 将 `COUNT_SUBSTRING` 的值加 1，表示找到一个子字符串。\n    3. 如果 `pos` 等于 0，表示没有找到子字符串，循环结束。\n\n -- REGION 返回结果\n    循环结束后，函数返回 `COUNT_SUBSTRING` 的值，即子字符串 `SEARCH` 在字符串 `STR` 中出现的次数。", "name": "COUNT_SUBSTRING"}