{"variables": [], "instructions": [], "planning": "- 概述\n  这段代码定义了一个名为`CALENDAR_CALC`的功能块，用于计算和更新日历相关的信息，包括本地时间、日出日落时间、节假日信息以及太阳位置等。该功能块主要用于处理与时间和日期相关的逻辑，并根据输入参数动态更新日历数据。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：`SPE`（特殊事件标志）和`H`（太阳高度角调整值）。\n  - 输入输出变量：`XCAL`（日历数据结构）和`HOLIDAYS`（节假日数据数组）。\n  - 内部变量：`last`（上一次的UTC时间）、`last_day`（上一次的日期）、`holy`（节假日计算模块）、`sun`（日出日落时间计算模块）、`last_hour`（上一次的小时数）、`utod`（UTC时间转换为TOD时间）、`pos`（太阳位置计算模块）、`plast`（上一次特殊事件处理的时间）。\n  - 临时变量：`dtemp`（临时日期变量）和`tmp`（临时小时变量）。\n\n- 主逻辑部分\n  -- REGION 时间更新与本地时间计算\n     当`XCAL.UTC`（UTC时间）发生变化时，执行以下逻辑：\n     1. 更新`last`变量为当前的`XCAL.UTC`。\n     2. 将`XCAL.UTC`转换为`TOD`（时间）格式，并存储在`utod`中。\n     3. 将`XCAL.UTC`转换为本地时间（考虑夏令时和时区偏移），并存储在`XCAL.LOCAL_DT`中。\n     4. 从`XCAL.LOCAL_DT`中提取日期、时间，并分别存储在`XCAL.LOCAL_DATE`和`XCAL.LOCAL_TOD`中。\n     5. 计算当前日期是当月的第几天，并存储在`dtemp`中。\n     6. 根据当前时间与日出日落时间的比较，判断是否为夜晚，并更新`XCAL.night`。\n\n  -- REGION 小时变化处理\n     当当前小时数（`HOUR(xcal.LOCAL_TOD)`）与`last_hour`不同时，执行以下逻辑：\n     1. 计算当前是否处于夏令时，并更新`XCAL.DST_ON`。\n     2. 更新`last_hour`为当前小时数。\n\n  -- REGION 日期变化处理\n     当当前日期（`dtemp`）与`last_day`不同时，执行以下逻辑：\n     1. 更新`last_day`为当前日期。\n     2. 从`XCAL.LOCAL_DATE`中提取年、月、日、星期几，并分别存储在`XCAL.YEAR`、`XCAL.MONTH`、`XCAL.DAY`和`XCAL.WEEKDAY`中。\n     3. 调用`HOLY`模块计算当前日期是否为节假日，并更新`XCAL.HOLIDAY`和`XCAL.HOLY_NAME`。\n     4. 调用`sun`模块计算日出、日落和正午时间，并更新`XCAL.SUN_RISE`、`XCAL.SUN_SET`和`XCAL.SUN_MIDDAY`。同时，考虑时区偏移和夏令时的影响。\n     5. 计算当前日期的工作周信息，并更新`XCAL.WORK_WEEK`。\n\n  -- REGION 特殊事件处理\n     当`SPE`（特殊事件标志）为真，并且当前时间与上一次特殊事件处理的时间（`plast`）相差超过25秒时，执行以下逻辑：\n     1. 更新`plast`为当前时间。\n     2. 调用`pos`模块计算当前的太阳位置，并更新`XCAL.SUN_HOR`（太阳水平位置）和`XCAL.SUN_VER`（太阳垂直位置）。\n\n- 输出结果\n  功能块的主要输出是通过`XCAL`和`HOLIDAYS`变量传递的。`XCAL`包含了更新后的日历信息，如本地时间、日期、日出日落时间、节假日信息、太阳位置等。`HOLIDAYS`数组则存储了节假日的详细信息。", "name": "CALENDAR_CALC"}