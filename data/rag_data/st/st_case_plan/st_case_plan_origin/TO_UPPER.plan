{"variables": [], "instructions": [], "planning": "- 概述\n这是一个名为`TO_UPPER`的函数，用于将一个字节（BYTE）类型的字符转换为大写形式。该函数通过检查输入字符的ASCII值来判断是否需要转换，并返回转换后的结果。\n\n- 变量定义\n代码中定义了两类变量：\n1. **输入变量**：`IN`，类型为`BYTE`，表示输入的字符。\n2. **输出变量**：`TO_UPPER`，类型为`BYTE`，表示转换后的大写字符。\n\n- 主逻辑部分\n-- REGION 主逻辑\n   函数的逻辑分为三个部分：\n   1. **小写字母转换**：\n      - 如果输入的字节值在96到123之间（即小写字母的ASCII范围），则通过位与操作（`AND 16#DF`）将其转换为大写字母。`16#DF`是二进制的`11011111`，用于将小写字母的第6位（从0开始计数）置为0，从而将其转换为大写字母。\n   2. **扩展ASCII字符转换**：\n      - 如果输入的字节值在223到255之间（即扩展ASCII字符范围），并且不等于247和255，同时`setup.EXTENDED_ASCII`为真，则同样通过位与操作（`AND 16#DF`）将其转换为大写形式。这一部分处理的是扩展ASCII字符集中的小写字母。\n   3. **其他情况**：\n      - 如果输入字符不满足上述条件，则直接返回原字符，不做任何转换。\n   **总结**：\n   - 该函数通过位操作实现高效的字符大小写转换，适用于标准ASCII和扩展ASCII字符集。\n   - 对于非字母字符或已经是大写的字符，函数直接返回原值。", "name": "TO_UPPER"}