{"variables": [], "instructions": [], "planning": "- 概述\n该功能块名为`BUFFER_COMP`，用于比较两个缓冲区的内容，并返回第二个缓冲区在第一个缓冲区中首次出现的位置。如果未找到匹配项，则返回-1。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：`PT1`和`PT2`分别是指向两个缓冲区的指针，`SIZE1`和`SIZE2`分别是两个缓冲区的大小，`START`是开始搜索的起始位置。\n - 内部变量：`i`和`j`是循环计数器，`end`是搜索的结束位置，`firstbyte`是第二个缓冲区的第一个字节。\n\n- 主逻辑部分\n-- REGION 主逻辑\n   首先，检查第二个缓冲区的大小是否小于或等于第一个缓冲区的大小。如果是，则计算搜索的结束位置`end`，即`SIZE1 - SIZE2`。然后，获取第二个缓冲区的第一个字节`firstbyte`。\n   接下来，从`START`位置开始遍历第一个缓冲区，直到`end`位置。在每次迭代中，检查当前字节是否与`firstbyte`匹配。如果匹配，则进一步比较两个缓冲区的剩余字节。\n   在内部`WHILE`循环中，逐个比较两个缓冲区的字节。如果发现不匹配的字节，则退出内部循环。如果内部循环成功完成（即`j`等于`SIZE2`），则返回当前的位置`i`作为匹配位置，并结束函数。\n   如果遍历完整个缓冲区仍未找到匹配项，则返回-1。", "name": "BUFFER_COMP"}