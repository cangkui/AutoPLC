{"variables": [], "instructions": [], "planning": "- 概述\n此功能块 `GET_WAN_IP` 用于通过HTTP请求从动态DNS服务（如 `checkip.dyndns.com`）获取WAN（广域网）的IPv4地址。它通过DNS解析和HTTP GET请求来获取IP地址，并处理可能发生的错误。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入输出变量：`IP_C`（IP控制结构）、`S_BUF`（发送缓冲区）、`R_BUF`（接收缓冲区）。\n - 输入变量：`ACTIVATE`（激活信号）。\n - 输出变量：`WAN_IP4`（获取的WAN IPv4地址）、`DONE`（操作完成标志）、`NEW_IP4`（新IP地址标志）、`ERROR_C`（错误代码）、`ERROR_T`（错误类型）。\n - 内部变量：`URL_DATA`（URL数据结构）、`DNS_CLIENT`（DNS客户端实例）、`HTTP_GET`（HTTP GET实例）、`activate_last`（上一个激活信号状态）、`wan_ip4_last`（上一个WAN IPv4地址）、`state`（状态机状态）、`st_ip`（存储IP地址的字符串）、`i1`, `p1`, `p2`, `p3`（临时索引变量）。\n\n- - 主逻辑部分\n-- REGION 状态机逻辑\n   状态机通过 `state` 变量控制功能块的执行流程。以下是各状态的详细逻辑：\n   - **状态 00**：\n      - 此状态是功能块的初始状态，等待 `ACTIVATE` 信号的上升沿（即从 `FALSE` 变为 `TRUE`）。\n      - 如果检测到上升沿，则进入状态 20，并初始化以下变量：\n        - `DONE` 设置为 `FALSE`，表示操作未完成。\n        - `ERROR_C` 设置为 `0`，表示无错误。\n        - `ERROR_T` 设置为 `0`，表示无错误类型。\n      - 如果没有检测到上升沿，则保持状态 00，继续等待。\n\n   - **状态 20**：\n      - 此状态准备进行DNS解析。\n      - 使用 `STRING_TO_URL` 函数将 `checkip.dyndns.com` 转换为 `URL_DATA` 结构，该结构包含域名、默认协议和路径等信息。\n      - 转换完成后，进入状态 40。\n\n   - **状态 40**：\n      - 此状态调用 `DNS_CLIENT` 实例进行DNS解析。\n      - 检查 `DNS_CLIENT.DONE` 标志：\n        - 如果 `DNS_CLIENT.DONE` 为 `TRUE`，表示DNS解析成功，进入状态 60。\n        - 如果 `DNS_CLIENT.ERROR` 大于 `0`，表示DNS解析失败，记录错误代码和类型，并跳转到状态 100。\n      - 如果DNS解析未完成且无错误，则保持状态 40，继续等待。\n\n   - **状态 60**：\n      - 此状态调用 `HTTP_GET` 实例发送HTTP GET请求。\n      - 检查 `HTTP_GET.DONE` 标志：\n        - 如果 `HTTP_GET.DONE` 为 `TRUE`，表示HTTP请求成功，进入状态 80。\n        - 如果 `HTTP_GET.ERROR` 大于 `0`，表示HTTP请求失败，记录错误代码和类型，并跳转到状态 100。\n      - 如果HTTP请求未完成且无错误，则保持状态 60，继续等待。\n\n   - **状态 80**：\n      - 此状态解析HTTP响应的正文，提取IP地址。\n      - 初始化 `st_ip` 为空字符串，`p1` 为 `0`。\n      - 使用 `FOR` 循环遍历HTTP响应的正文（从 `HTTP_GET.BODY_START` 到 `HTTP_GET.BODY_STOP`），查找冒号（`:`）的位置：\n        - 如果找到冒号，则记录其位置到 `p1`，并退出循环。\n      - 设置 `p3` 为 `p1 + 15`，表示从冒号后开始提取最多15个字符。\n      - 如果 `p1` 大于 `0` 且 `p3` 小于 `HTTP_GET.BODY_STOP`，则使用 `FOR` 循环从 `p1` 到 `p3` 提取IP地址：\n        - 如果当前字符不是 `<` 符号，则将其转换为字符串并拼接到 `st_ip` 中。\n        - 如果遇到 `<` 符号，则退出循环。\n      - 使用 `IP4_DECODE` 函数将 `st_ip` 转换为DWORD格式的IP地址，并存储在 `WAN_IP4` 中。\n      - 检查 `WAN_IP4` 是否为有效IP地址（不等于 `0`）：\n        - 如果是有效IP地址，则设置 `DONE` 为 `TRUE`，表示操作完成。\n        - 如果 `WAN_IP4` 与上一次的 `wan_ip4_last` 不同，则设置 `NEW_IP4` 为 `TRUE`，表示获取到新IP地址。\n        - 更新 `wan_ip4_last` 为当前的 `WAN_IP4`。\n        - 如果 `WAN_IP4` 无效，则记录错误代码和类型。\n      - 最后，进入状态 100。\n\n   - **状态 100**：\n      - 此状态是功能块的结束状态，检查 `HTTP_GET.DONE` 标志：\n        - 如果 `HTTP_GET.DONE` 为 `FALSE`，表示HTTP请求未完成，重置状态机到状态 0，并设置 `DONE` 标志（如果没有错误）。\n        - 如果 `HTTP_GET.DONE` 为 `TRUE`，表示HTTP请求已完成，保持状态 100。\n      - 在此状态中，`UNLOCK_BUF` 信号被激活，以释放缓冲区。\n\n-- REGION DNS_CLIENT 调用\n   - 在状态 40 中，调用 `DNS_CLIENT` 实例进行DNS解析。传入的参数包括：\n     - `IP_C`：IP控制结构。\n     - `S_BUF`：发送缓冲区。\n     - `R_BUF`：接收缓冲区。\n     - `DOMAIN`：从 `URL_DATA` 中获取的域名。\n     - `IP4_DNS`：DNS服务器的IP地址，此处为 `0`，表示使用默认DNS服务器。\n     - `ACTIVATE`：当状态为 40 时激活。\n\n-- REGION HTTP_GET 调用\n   - 在状态 60 中，调用 `HTTP_GET` 实例发送HTTP GET请求。传入的参数包括：\n     - `IP_C`：IP控制结构。\n     - `S_BUF`：发送缓冲区。\n     - `R_BUF`：接收缓冲区。\n     - `IP4`：从 `DNS_CLIENT` 中获取的IP地址。\n     - `GET`：当状态为 60 时激活。\n     - `MODE`：HTTP请求模式，此处为 `2`，表示GET请求。\n     - `UNLOCK_BUF`：当状态为 100 时激活，以释放缓冲区。\n     - `URL_DATA`：包含URL信息的数据结构。\n\n-- REGION 激活信号跟踪\n   - 在功能块的最后，`activate_last` 被更新为当前的 `ACTIVATE` 信号值，以便在下一个周期中检测上升沿。\n\n- 总结\n此功能块通过状态机控制DNS解析和HTTP请求的流程，从动态DNS服务中提取WAN IPv4地址，并处理可能的错误。它适用于需要获取外部网络IP地址的自动化系统。", "name": "GET_WAN_IP"}