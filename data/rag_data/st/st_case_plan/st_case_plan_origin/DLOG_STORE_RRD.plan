{"variables": [], "instructions": [], "planning": "- 概述\n  该功能块 `DLOG_STORE_RRD` 用于将数据存储到远程数据库中。它处理数据的触发、URL的构建、DNS解析、HTTP请求等操作，并在出现错误时输出错误代码和类型。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入输出变量：`X` 是一个 `DLOG_DATA` 类型的结构体，用于传递数据。\n  - 输入变量：`ENABLE`（使能信号）、`TRIG_M`（手动触发信号）、`TRIG_T`（自动触发时间间隔）、`URL`（目标URL）、`DTI`（日期时间）、`SEP`（分隔符）、`DNS_IP4`（DNS服务器IP地址）、`TIMEOUT`（超时时间）。\n  - 输出变量：`ERROR_C`（错误代码）、`ERROR_T`（错误类型）。\n  - 内部变量：包括用于网络通信的缓冲区、URL解析结果、DNS客户端、HTTP GET请求、触发标志、步骤计数器等。\n\n- - 主逻辑部分\n  -- REGION 初始化与触发逻辑\n     - 首先，`X.DTI` 被赋值为输入的 `DTI`，用于记录当前的时间戳。\n     - 通过比较 `DTI` 和 `dti_last`（上一次的时间戳），确定是否触发时钟信号 `X.CLOCK_TRIG`。如果 `DTI` 与 `dti_last` 不同，则 `X.CLOCK_TRIG` 为真，表示时间戳发生了变化。\n     - 如果 `X.CLOCK_TRIG` 为真且 `TRIG_T`（自动触发时间间隔）大于等于1秒，则计算自动触发条件 `trig_auto`。`trig_auto` 的计算基于 `DTI` 的时间戳与 `TRIG_T` 的模运算。如果 `DTI` 的时间戳模 `TRIG_T` 的结果为0，则 `trig_auto` 为真，表示满足自动触发条件。\n\n  -- REGION 步骤1：使能与数据准备\n     - 如果 `ENABLE` 为真且 `X.ID_MAX` 为0，表示功能块首次启用，此时初始化 `X.ADD_COM` 为01，表示开始添加数据，并设置 `X.STORE_TYPE` 为1，表示存储类型为默认值。\n     - 重置错误变量 `ERROR_T` 和 `ERROR_C` 为0，表示无错误。\n     - 调用 `UCB`（循环缓冲区）功能块，设置其模式为99，表示初始化缓冲区。\n     - 使用 `STRING_TO_URL` 函数解析输入的 `URL`，并将结果存储在 `URL_DATA` 中。`URL_DATA` 包含解析后的协议、域名、路径和查询字符串等信息。\n     - 将 `SEP`（分隔符）转换为字符串并存储在 `sep_char` 中，用于后续构建查询字符串。\n     - 将 `step_1` 设置为30，进入下一步处理。\n\n  -- REGION 步骤1：触发处理\n     - 计算触发信号 `trig_tmp`，它可以是以下三种情况之一：\n       1. 手动触发信号 `TRIG_M` 为真且上一个周期的 `trig_m_last` 为假（上升沿检测）。\n       2. 自动触发条件 `trig_auto` 为真。\n       3. 数据添加请求 `X.ADD_DATA_REQ` 为真。\n     - 如果 `ENABLE` 为假，表示功能块被禁用，此时重置 `X.ADD_COM` 为00，表示停止添加数据，并将 `step_1` 设置为0，结束处理。\n     - 如果 `ENABLE` 为真且 `trig_tmp` 或 `trig_stored` 为真，表示需要触发数据存储操作，此时设置 `X.ADD_COM` 为03，表示开始存储数据。否则，设置 `X.ADD_COM` 为04，表示继续等待触发。\n\n  -- REGION 步骤2：数据处理与网络通信\n     - 如果 `UCB` 缓冲区数据丢失（`X.UCB.BUF_DATA_LOST > 0`），则设置错误代码 `ERROR_C` 为2，表示数据丢失，并设置错误类型 `ERROR_T` 为6，表示缓冲区错误。同时将 `step_2` 设置为100，进入错误处理状态。\n     - 如果 `UCB` 缓冲区使用率超过90%（`X.UCB.BUF_USED_MAX > 90`），则设置错误代码 `ERROR_C` 为1，表示缓冲区接近满，并设置错误类型 `ERROR_T` 为6，表示缓冲区错误。\n     - 如果 `UCB` 缓冲区中的数据数量达到 `X.ID_MAX`，表示缓冲区已满，此时开始构建 `URL_DATA.QUERY`。通过循环遍历缓冲区中的数据，将数据逐条添加到查询字符串中，并使用 `sep_char` 作为分隔符。如果查询字符串的长度超过 `OSCAT_BASIC.STRING_LENGTH`，则设置错误代码 `ERROR_C` 为1，表示字符串过长，并设置错误类型 `ERROR_T` 为4，表示查询字符串错误。同时将 `step_2` 设置为100，进入错误处理状态。\n     - 如果 DNS 解析完成（`DNS_CLIENT.DONE` 为真），则将 `step_2` 设置为60，进入 HTTP GET 请求阶段。\n     - 如果 DNS 解析出错（`DNS_CLIENT.ERROR > 0`），则设置错误代码 `ERROR_C` 为 DNS 解析错误，并设置错误类型 `ERROR_T` 为1，表示 DNS 错误。同时将 `step_2` 设置为100，进入错误处理状态。\n     - 如果 HTTP GET 请求完成（`HTTP_GET.DONE` 为真），则检查响应体中的第一个字符是否为 '0'（ASCII码48）。如果不是，则设置错误代码 `ERROR_C` 为1，表示服务器返回错误，并设置错误类型 `ERROR_T` 为3，表示 HTTP 错误。同时将 `step_2` 设置为100，进入错误处理状态。\n     - 如果 HTTP GET 请求出错（`HTTP_GET.ERROR > 0`），则设置错误代码 `ERROR_C` 为 HTTP 请求错误，并设置错误类型 `ERROR_T` 为2，表示 HTTP 错误。同时将 `step_2` 设置为100，进入错误处理状态。\n     - 如果 `ENABLE` 为假，表示功能块被禁用，此时将 `step_2` 重置为0，结束处理。\n\n  -- REGION 网络功能块调用\n     - 调用 `HTTP_GET` 功能块，传递 `IP_C`、`S_BUF`、`R_BUF`、`DNS_CLIENT.IP4`、`URL_DATA` 等参数，处理 HTTP GET 请求。`HTTP_GET` 功能块负责发送 HTTP 请求并接收响应。\n     - 调用 `DNS_CLIENT` 功能块，传递 `IP_C`、`S_BUF`、`R_BUF`、`URL_DATA.DOMAIN`、`DNS_IP4` 等参数，处理 DNS 解析。`DNS_CLIENT` 功能块负责将域名解析为 IP 地址。\n     - 调用 `IPC` 功能块，传递 `IP_C`、`S_BUF`、`R_BUF`、`TIMEOUT` 等参数，处理网络通信的超时控制。`IPC` 功能块负责管理网络连接和超时处理。\n\n  -- REGION 触发信号更新\n     - 更新 `trig_m_last` 为当前的 `TRIG_M`，以便在下一次循环中进行边缘检测。`trig_m_last` 用于记录上一个周期的手动触发信号状态。", "name": "DLOG_STORE_RRD"}