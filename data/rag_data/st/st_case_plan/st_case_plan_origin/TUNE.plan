{"variables": [], "instructions": [], "planning": "- 概述\n这段代码实现了一个名为“TUNE”的功能块，用于调节输出值`Y`。它通过处理输入信号（如`SET`、`SU`、`SD`、`RST`等）来控制`Y`的变化，并根据时间参数（`T1`、`T2`）和步进值（`SS`、`S1`、`S2`）实现平滑调节。输出值`Y`被限制在`LIMIT_L`和`LIMIT_H`之间。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：`SET`、`SU`、`SD`、`RST`用于控制逻辑；`SS`、`Limit_L`、`LIMIT_H`、`RST_val`、`SET_val`、`T1`、`T2`、`S1`、`S2`用于配置调节行为。\n - 输出变量：`Y`表示调节后的输出值。\n - 内部变量：`tx`用于记录当前时间；`start`、`start2`用于记录事件开始时间；`state`表示当前状态；`in`用于临时存储输入信号；`step`、`SPEED`、`Y_start`、`Y_start2`用于计算`Y`的变化。\n\n- 主逻辑部分\n-- REGION 初始化与重置\n   - 如果`RST`为真，则将`Y`设置为`RST_val`，并将状态`state`重置为0。\n   - 如果`SET`为真，则将`Y`设置为`SET_val`，并将状态`state`重置为0。\n\n-- REGION 状态处理\n   - 如果`state`大于0，表示当前处于调节状态：\n     - 如果`state`为1，则`in`取`SU`的值；如果`state`为2，则`in`取`SD`的值。\n     - 如果`in`为假且当前时间减去`start`小于或等于`T1`，则`Y`增加`step`，并将`state`重置为0。\n     - 如果`in`为真且当前时间减去`start`大于或等于`T2`，则`Y`根据`S2`和`SPEED`计算新的值。\n     - 如果`in`为真且当前时间减去`start`大于或等于`T1`，则`Y`根据`S1`和`SPEED`计算新的值，并更新`start2`和`Y_start2`。\n     - 如果`in`为假，则将`state`重置为0。\n\n-- REGION 启动调节\n   - 如果`SU`为真，则将`state`设置为1，记录当前时间到`start`，初始化`step`、`SPEED`和`Y_start`。\n   - 如果`SD`为真，则将`state`设置为2，记录当前时间到`start`，初始化`step`、`SPEED`和`Y_start`。\n\n-- REGION 输出限制\n   - 最后，使用`LIMIT`函数将`Y`限制在`LIMIT_L`和`LIMIT_H`之间。\n\n- 总结\n此功能块通过状态机实现输出值`Y`的平滑调节，支持手动设置、重置、递增和递减操作，并确保输出值在指定范围内。时间参数和步进值允许灵活配置调节行为。", "name": "TUNE"}