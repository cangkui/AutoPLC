{"variables": [], "instructions": [], "planning": "- 概述\n这个功能块名为 `DLOG_BOOL`，用于处理布尔类型的数据记录。它根据输入的状态和条件，将数据记录到一个循环缓冲区中。功能块通过状态机的方式处理数据，并根据不同的条件将数据写入缓冲区。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入输出变量：`X`，类型为 `DLOG_DATA`，用于与外部数据记录系统交互。\n - 输入变量：`STATE`（布尔状态）、`OFF`（状态为假时的字符串描述）、`ON`（状态为真时的字符串描述）、`COLUMN`（列名，最大长度为40）、`DELTA`（布尔值，表示是否需要检测状态变化）。\n - 内部变量：`UCB`（循环缓冲区实例）、`id`（用于标识数据的ID）、`last_delta`（上一次的状态变化记录）、`state_last`（上一次的状态值）。\n\n- 主逻辑部分\n功能块的核心逻辑通过一个 `CASE` 语句实现，根据 `X.ADD_COM` 的值执行不同的操作：\n -- CASE 01:\n    将 `X.ID_MAX` 的值加1，并设置 `id` 为固定值 `WORD#16#0601`。这个步骤用于为数据记录生成一个唯一的ID。\n -- CASE 02:\n    将 `COLUMN` 的值写入循环缓冲区 `UCB` 的 `D_STRING` 字段，并将 `id` 和模式值1写入缓冲区的 `D_HEAD` 和 `D_MODE` 字段。然后调用 `UCB` 功能块将数据写入缓冲区。这一步用于记录列名。\n -- CASE 03:\n    根据 `X.STORE_TYPE` 的值决定如何记录状态。如果 `X.STORE_TYPE` 为 `BYTE#05`，则将状态值转换为字符串 '0' 或 '1'；否则，根据 `state_last` 的值选择 `OFF` 或 `ON` 字符串。然后将这些数据写入缓冲区。最后，更新 `last_delta` 为当前状态值。\n -- CASE 04:\n    如果 `DELTA` 为真且当前状态与 `last_delta` 不同，则设置 `X.ADD_DATA_REQ` 为真，表示需要添加数据记录。同时，更新 `last_delta` 为当前状态值。\n\n在 `CASE` 语句结束后，更新 `state_last` 为当前状态值，以便在下一个周期中使用。\n\n- 总结\n`DLOG_BOOL` 功能块主要用于记录布尔类型的数据，并根据状态变化和配置条件将数据写入循环缓冲区。它通过状态机的方式处理数据记录的逻辑，并支持动态选择状态描述字符串。该功能块适用于需要记录布尔状态变化的场景，例如日志系统或监控系统。", "name": "DLOG_BOOL"}