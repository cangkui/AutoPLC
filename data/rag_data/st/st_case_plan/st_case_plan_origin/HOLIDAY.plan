{"variables": [], "instructions": [], "planning": "- 概述\n  该功能块名为 `HOLIDAY`，用于判断给定日期是否为假日，并根据输入的语言设置返回假日的名称。它支持固定假日、基于复活节的假日以及每周的固定假日（如周五、周六、周日）。此外，它还允许用户通过输入参数自定义是否将周五、周六和周日视为假日。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：`DATE_IN`（输入日期）、`LANGU`（语言设置）、`FRIDAY`（是否将周五视为假日）、`SATURDAY`（是否将周六视为假日）、`SUNDAY`（是否将周日视为假日）。\n  - 输入输出变量：`HOLIDAYS`（假日数据数组，包含假日的名称、月份、日期等信息）。\n  - 常量：`SIZE`（假日数组的最大索引值）。\n  - 输出变量：`Y`（是否为假日）、`NAME`（假日名称）。\n  - 内部变量：`last_active`（上次处理的日期）、`ostern`（复活节日期）、`i`（循环索引）、`jahr`（年份）、`x_date`（临时日期）、`lx`（语言索引）、`wdx`（星期几的索引）。\n\n- 主逻辑部分\n  -- REGION 初始化\n    首先，检查输入的日期 `DATE_IN` 是否与上次处理的日期 `last_active` 相同。如果相同，则直接返回，避免重复处理。否则，更新 `last_active` 为当前输入日期。\n\n  -- REGION 语言设置\n    根据输入的语言参数 `LANGU`，设置语言索引 `lx`。如果 `LANGU` 为 0，则使用默认语言；否则，使用 `LANGU` 和语言最大值中的较小值。\n\n  -- REGION 年份和复活节计算\n    从输入日期 `DATE_IN` 中提取年份 `jahr`，并计算该年份的复活节日期 `ostern`。同时，计算输入日期的星期几 `wdx`。\n\n  -- REGION 假日检查\n    使用循环遍历假日数组 `HOLIDAYS`，检查输入日期是否为假日：\n    - 如果假日的 `USE` 值为 1 且 `MONTH` 大于 0，则表示该假日为固定日期假日。通过 `SET_DATE` 函数构造假日日期 `x_date`，并与输入日期 `DATE_IN` 进行比较。如果匹配，则设置输出 `Y` 为 `TRUE`，并返回假日名称 `NAME`。\n    - 如果假日的 `USE` 值为 1 且 `MONTH` 为 0，则表示该假日基于复活节日期。通过 `DATE_ADD` 函数计算假日日期，并与输入日期 `DATE_IN` 进行比较。如果匹配，则设置输出 `Y` 为 `TRUE`，并返回假日名称 `NAME`。\n    - 如果假日的 `USE` 值为负数，则表示该假日为每周的固定假日（如周五、周六、周日）。检查输入日期的星期几是否与假日的 `USE` 值匹配，并确保输入日期在假日前一周内。如果匹配，则设置输出 `Y` 为 `TRUE`，并返回假日名称 `NAME`。\n\n  -- REGION 周末假日检查\n    如果输入日期不是任何假日，且满足以下条件之一，则将其视为周末假日：\n    - 星期五且 `FRIDAY` 为 `TRUE`。\n    - 星期六且 `SATURDAY` 为 `TRUE`。\n    - 星期日且 `SUNDAY` 为 `TRUE`。\n    如果是周末假日，则设置输出 `Y` 为 `TRUE`，并根据语言索引 `lx` 返回周末的名称 `NAME`。否则，将 `NAME` 设置为空字符串。\n\n- 输出结果\n  功能块的输出为：\n  - `Y`：表示输入日期是否为假日。\n  - `NAME`：表示假日的名称。如果输入日期不是假日，则 `NAME` 为空字符串。", "name": "HOLIDAY"}