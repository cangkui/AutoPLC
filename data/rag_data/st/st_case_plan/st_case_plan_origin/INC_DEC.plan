{"variables": [], "instructions": [], "planning": "- 概述\n这个功能块 `INC_DEC` 实现了一个简单的增量/减量计数器。它通过检测两个输入信号 `CHa` 和 `CHb` 的变化来决定计数器的方向（增加或减少），并根据方向更新计数器值 `cnt`。此外，计数器可以通过 `RST` 信号进行复位。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：`CHa` 和 `CHb` 是两个输入信号，用于检测变化；`RST` 是复位信号，用于将计数器复位为 0。\n - 输出变量：`dir` 表示计数器的方向（TRUE 为增加，FALSE 为减少）；`cnt` 是当前的计数器值。\n - 内部变量：`edgea` 和 `edgeb` 用于检测 `CHa` 和 `CHb` 的边沿变化；`clka` 和 `clkb` 表示 `CHa` 和 `CHb` 的边沿变化信号；`clk` 是 `clka` 和 `clkb` 的逻辑或，表示任意一个输入信号的变化；`axb` 是 `CHa` 和 `CHb` 的异或结果，用于确定计数器的方向。\n\n- 主逻辑部分\n-- REGION 检测输入信号变化\n   此区域通过异或操作检测 `CHa` 和 `CHb` 的边沿变化，并将结果存储在 `clka` 和 `clkb` 中。`edgea` 和 `edgeb` 用于存储上一个周期的 `CHa` 和 `CHb` 值，以便与当前值进行比较。`clk` 是 `clka` 和 `clkb` 的逻辑或，表示任意一个输入信号的变化。\n   - `axb := cha XOR chb;`：计算 `CHa` 和 `CHb` 的异或结果，用于确定计数器的方向。\n   - `clka := cha XOR edgea;`：检测 `CHa` 的边沿变化。\n   - `edgea := cha;`：存储当前 `CHa` 的值，以便下一个周期进行比较。\n   - `clkb := chb XOR edgeb;`：检测 `CHb` 的边沿变化。\n   - `edgeb := chb;`：存储当前 `CHb` 的值，以便下一个周期进行比较。\n   - `clk := clka OR clkb;`：检测任意一个输入信号的变化。\n\n-- REGION 确定计数器方向\n   此区域根据 `axb` 和 `clka` 或 `clkb` 的值确定计数器的方向。\n   - `IF axb AND clka THEN dir := TRUE; END_IF;`：如果 `axb` 为真且 `clka` 为真，则设置方向为增加。\n   - `IF axb AND clkb THEN dir := FALSE; END_IF;`：如果 `axb` 为真且 `clkb` 为真，则设置方向为减少。\n\n-- REGION 更新计数器值\n   此区域根据计数器的方向和 `clk` 信号更新计数器值 `cnt`。\n   - `IF clk AND dir THEN cnt := cnt + 1; END_IF;`：如果 `clk` 为真且方向为增加，则计数器值加 1。\n   - `IF clk AND NOT dir THEN cnt := cnt -1; END_IF;`：如果 `clk` 为真且方向为减少，则计数器值减 1。\n\n-- REGION 复位计数器\n   此区域通过 `RST` 信号将计数器复位为 0。\n   - `IF rst THEN cnt := 0; END_IF;`：如果 `RST` 为真，则计数器值复位为 0。", "name": "INC_DEC"}