{"variables": [], "instructions": [], "planning": "- 概述\n  这是一个名为 `BIT_LOAD_DW2` 的函数，用于对输入的 DWORD 类型数据进行位操作。根据输入的布尔值 `D`，函数会执行不同的位操作逻辑，并返回处理后的 DWORD 值。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：\n    - `I`：DWORD 类型，表示输入的 32 位数据。\n    - `D`：BOOL 类型，决定函数的操作模式（左移或右移）。\n    - `P`：INT 类型，表示旋转的位数。\n    - `N`：INT 类型，表示掩码的位数。\n  - 输出变量：\n    - `BIT_LOAD_DW2`：DWORD 类型，表示函数处理后的结果。\n\n- 主逻辑部分\n  -- REGION 主逻辑：\n    函数根据输入 `D` 的值执行不同的位操作逻辑：\n    - 如果 `D` 为 TRUE：\n      1. 使用 `SHR(DWORD#4294967295, 32 - N)` 生成一个掩码，其中高 `N` 位为 1，其余位为 0。\n      2. 使用 `ROR(I, P)` 将输入数据 `I` 向右旋转 `P` 位。\n      3. 将掩码和旋转后的数据进行按位或操作（`OR`）。\n      4. 最后，使用 `ROL` 将结果向左旋转 `P` 位，并返回。\n    - 如果 `D` 为 FALSE：\n      1. 使用 `SHL(DWORD#4294967295, N)` 生成一个掩码，其中低 `N` 位为 1，其余位为 0。\n      2. 使用 `ROR(I, P)` 将输入数据 `I` 向右旋转 `P` 位。\n      3. 将掩码和旋转后的数据进行按位与操作（`AND`）。\n      4. 最后，使用 `ROL` 将结果向左旋转 `P` 位，并返回。\n    这种逻辑可以实现对输入数据的特定位进行提取或掩码操作，并根据需要旋转数据。", "name": "BIT_LOAD_DW2"}