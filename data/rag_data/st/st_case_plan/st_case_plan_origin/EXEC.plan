{"variables": [], "instructions": [], "planning": "- 概述\n此函数名为`EXEC`，用于解析一个包含数学表达式的字符串，并返回计算结果。函数支持基本的数学运算符（如加、减、乘、除）和一些数学函数（如平方根、正弦、余弦、正切等）。如果输入的字符串无效或包含错误，函数将返回`'ERROR'`。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：`str`，表示输入的字符串。\n - 内部变量：\n   - `pos`：用于存储字符串中非数字字符的位置。\n   - `R1`和`R2`：用于存储从字符串中提取的两个实数。\n   - `operator`：用于存储从字符串中提取的操作符。\n\n- 主逻辑部分\n-- REGION 字符串预处理\n   首先，函数对输入的字符串进行预处理，包括去除空格并将其转换为大写。处理后的字符串存储在`EXEC`中。\n-- REGION 提取数字和操作符\n   接下来，函数通过`FINDB_NONUM`函数找到字符串中第一个非数字字符的位置`pos`。如果`pos`大于1，则将字符串中`pos`之前的部分转换为实数`R1`。然后，将`pos`之后的部分转换为实数`R2`。最后，提取操作符并存储在`operator`中。\n-- REGION 处理空操作符\n   如果`operator`为空且输入字符串也为空，则函数返回空字符串。如果`operator`为空但输入字符串不为空，则函数直接返回原始字符串。\n-- REGION 计算并返回结果\n   根据提取的操作符，函数执行相应的数学运算，并将结果转换为字符串存储在`EXEC`中。如果操作符是`'/'`且`R2`为0，则返回`'ERROR'`。如果操作符无效，则返回`'ERROR'`。\n-- REGION 格式化结果\n   如果计算结果不是`'ERROR'`，则函数对结果进行格式化，确保结果包含小数点和小数部分。例如，如果结果是整数，则添加`.0`；如果结果以小数点结尾，则添加`0`。\n-- REGION 返回结果\n   最后，函数返回处理后的结果字符串。\n\n- 详细说明\n - **字符串预处理**：通过`UPPERCASE(TRIM(str))`去除字符串中的空格并转换为大写，确保后续处理不受大小写和空格的影响。\n - **提取数字和操作符**：使用`FINDB_NONUM`找到第一个非数字字符的位置，然后分别提取操作符前后的数字部分，并将其转换为实数。\n - **处理空操作符**：如果操作符为空，函数根据输入字符串的情况直接返回空字符串或原始字符串。\n - **计算并返回结果**：根据操作符执行相应的数学运算，并将结果转换为字符串。如果操作符是除法且除数为0，则返回`'ERROR'`。\n - **格式化结果**：确保结果字符串包含小数点和小数部分，避免返回不完整的浮点数。\n - **返回结果**：最终返回处理后的结果字符串，如果计算结果为`'ERROR'`，则直接返回。\n\n- 示例\n - 输入`'3.14 + 2.71'`，返回`'5.85'`。\n - 输入`'10 / 0'`，返回`'ERROR'`。\n - 输入`'SQRT(16)'`，返回`'4.0'`。", "name": "EXEC"}