{"variables": [], "instructions": [], "planning": "- 概述\n这段代码实现了一个名为 `RDM` 的函数，用于生成一个基于输入 `last` 值的伪随机实数。该函数通过操作当前系统时间（以毫秒为单位）和其他位操作来生成随机数，最后将其映射到 `[0, 1]` 范围内的实数。\n\n- 变量定义\n代码中定义了以下几类变量：\n  - 输入变量：`last`，一个实数，用于限制随机数的范围。\n  - 内部变量：\n    - `tn`，一个双字（DWORD）类型的变量，用于存储和操作时间值。\n    - `tc`，一个整数（INT）类型的变量，用于存储 `tn` 的位计数。\n\n- 主逻辑部分\n  -- REGION 时间获取与位操作：\n     - `tn := T_PLC_MS();`  \n       获取当前 PLC 的系统时间（以毫秒为单位），并将其存储在 `tn` 中。\n     - `tc := BIT_COUNT(tn);`  \n       计算 `tn` 中二进制值为 `1` 的位数，并将结果存储在 `tc` 中。\n     - 对 `tn` 的位进行重新排列：\n       ```plaintext\n       tn.31 := tn.2;\n       tn.30 := tn.5;\n       tn.29 := tn.4;\n       tn.28 := tn.1;\n       tn.27 := tn.0;\n       tn.26 := tn.7;\n       tn.25 := tn.6;\n       tn.24 := tn.3;\n       ```\n       这些操作将 `tn` 的某些位重新排列，以增加随机性。\n     - `tn := ROL(tn, BIT_COUNT(tn)) OR 16#80000001;`  \n       对 `tn` 进行循环左移（ROL），移动的位数为 `tn` 的位计数，然后与常量 `16#80000001` 进行按位或操作，进一步增加随机性。\n     - `tn := tn MOD 71474513 + INT_TO_DWORD(tc + 77);`  \n       对 `tn` 取模运算（模数为 71474513），然后加上 `tc + 77`，生成一个新的 `tn` 值。\n\n  -- REGION 随机数生成与映射：\n     - `RDM := FRACT(DWORD_TO_REAL(tn) / 10000000.0 * (math.E - LIMIT(0.0, last, 1.0)));`  \n       将 `tn` 转换为实数，除以 10000000.0，然后乘以 `(math.E - LIMIT(0.0, last, 1.0))`。`LIMIT(0.0, last, 1.0)` 将 `last` 限制在 `[0, 1]` 范围内。`math.E` 是自然常数 e（约 2.71828）。`FRACT` 函数提取结果的小数部分，生成最终的随机数 `RDM`。\n\n- 输出结果\n  函数返回一个 `[0, 1]` 范围内的伪随机实数，其值基于输入 `last` 和当前系统时间。", "name": "RDM"}