{"variables": [], "instructions": [], "planning": "- 概述\n这段代码实现了一个名为`EXPN`的函数，用于计算实数`X`的整数幂`N`。该函数通过逐次平方和乘法来计算幂，并支持负指数的情况。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：`X`（实数类型，表示底数），`N`（整数类型，表示指数）。\n - 局部变量：`sign`（布尔类型，用于存储指数的符号，`TRUE`表示负指数，`FALSE`表示正指数）。\n\n- 主逻辑部分\n-- REGION 符号处理\n   首先，通过检查`N`的最高位（第15位）来确定指数的符号。如果最高位为1，则表示`N`为负数，将`sign`设置为`TRUE`；否则设置为`FALSE`。接着，使用`ABS`函数将`N`转换为绝对值，确保后续计算使用正指数。\n\n-- REGION 初始化\n   如果`N`的最低位为1，则将`EXPN`初始化为`X`；否则，将`EXPN`初始化为`1.0`。然后，通过右移操作`SHR`将`N`除以2，准备进入循环。\n\n-- REGION 幂计算\n   使用`WHILE`循环逐次计算`X`的幂。在每次循环中，首先将`X`平方。如果`N`的最低位为1，则将当前的`X`乘到`EXPN`中。然后，再次通过右移操作将`N`除以2，继续循环直到`N`为0。\n\n-- REGION 负指数处理\n   如果`sign`为`TRUE`，表示原始指数为负数，则将`EXPN`取倒数，得到`X`的负幂结果。\n\n- 输出结果\n函数最终返回计算得到的`EXPN`值，即`X`的`N`次幂。", "name": "EXPN"}