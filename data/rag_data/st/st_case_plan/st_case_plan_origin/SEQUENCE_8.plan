{"variables": [], "instructions": [], "planning": "- 概述\n  这段代码定义了一个名为 `SEQUENCE_8` 的功能块，用于实现一个 8 步的序列控制逻辑。每个步骤都有一个等待时间和延迟时间，功能块会根据输入信号和定时条件逐步执行，并在每个步骤完成后进入下一个步骤。如果在某个步骤中发生错误（例如超时），功能块会停止运行并设置相应的状态。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：包括 8 个布尔输入信号 (`in0` 到 `in7`)、启动信号 (`start`)、复位信号 (`rst`)、每个步骤的等待时间和延迟时间 (`wait0` 到 `wait7` 和 `delay0` 到 `delay7`)，以及一个标志 (`stop_on_error`) 用于控制在发生错误时是否停止运行。\n  - 输出变量：包括 8 个布尔输出信号 (`Q0` 到 `Q7`)、一个综合输出信号 (`QX`)、运行标志 (`run`)、当前步骤 (`step`) 和状态信息 (`status`)。\n  - 局部变量：包括时间记录 (`last`)、边缘检测 (`edge`)、当前时间 (`tx`) 和初始化标志 (`init`)。\n\n- - 主逻辑部分\n  -- REGION 初始化\n    首先，将当前时间 `tx` 转换为 `TIME` 类型。如果功能块未初始化，则记录当前时间 `tx` 到 `last`，设置初始化标志 `init` 为 `TRUE`，并将状态 `status` 设置为 110（表示初始化完成）。这一步确保功能块在首次运行时正确初始化。\n\n  -- REGION 复位逻辑\n    如果复位信号 `rst` 为 `TRUE`，则功能块会重置所有内部状态。具体操作包括：\n    - 将步骤 `step` 设置为 -1，表示序列未运行。\n    - 将所有输出信号 (`Q0` 到 `Q7`) 设置为 `FALSE`。\n    - 将状态 `status` 设置为 110，表示功能块已复位。\n    - 将运行标志 `run` 设置为 `FALSE`，停止序列运行。\n    这一步确保功能块可以在任何时候通过复位信号恢复到初始状态。\n\n  -- REGION 启动逻辑\n    如果启动信号 `start` 为 `TRUE` 且边缘检测标志 `edge` 为 `FALSE`，则功能块开始运行序列。具体操作包括：\n    - 将步骤 `step` 设置为 0，表示从第一步开始。\n    - 记录当前时间 `tx` 到 `last`，用于后续的时间计算。\n    - 将状态 `status` 设置为 111，表示功能块正在运行。\n    - 将所有输出信号 (`Q0` 到 `Q7`) 设置为 `FALSE`，确保序列开始时所有输出为低电平。\n    - 将运行标志 `run` 设置为 `TRUE`，启动序列。\n    边缘检测标志 `edge` 用于确保启动信号只在上升沿触发一次，避免重复启动。\n\n  -- REGION 错误处理\n    如果状态 `status` 在 1 到 99 之间且 `stop_on_error` 为 `TRUE`，则功能块直接返回，停止后续逻辑执行。这一步确保在发生错误时，功能块可以根据配置停止运行，避免错误进一步扩大。\n\n  -- REGION 步骤逻辑\n    功能块根据当前步骤 `step` 执行相应的逻辑。每个步骤的逻辑类似，以步骤 0 为例：\n    - **等待阶段**：如果输出 `Q0` 为 `FALSE` 且输入 `in0` 为 `TRUE`，并且在等待时间 `wait0` 内，则设置 `Q0` 为 `TRUE`，并记录当前时间 `tx` 到 `last`。这一步表示功能块在等待输入信号 `in0` 变为 `TRUE`，并在规定时间内完成。\n    - **超时处理**：如果输出 `Q0` 为 `FALSE` 且等待时间 `wait0` 已过，则设置状态 `status` 为 1（表示步骤 0 超时），并将运行标志 `run` 设置为 `FALSE`。这一步表示功能块在规定时间内未能接收到输入信号 `in0`，因此停止运行并记录错误状态。\n    - **延迟阶段**：如果输出 `Q0` 为 `TRUE` 且延迟时间 `delay0` 已过，则将步骤 `step` 设置为 1，并记录当前时间 `tx` 到 `last`。这一步表示功能块在输出 `Q0` 为 `TRUE` 后，等待规定的延迟时间，然后进入下一步。\n    其他步骤（1 到 7）的逻辑与步骤 0 类似，只是对应的输入、输出、等待时间和延迟时间不同。例如，在步骤 1 中：\n    - **等待阶段**：如果输出 `Q1` 为 `FALSE` 且输入 `in1` 为 `TRUE`，并且在等待时间 `wait1` 内，则设置 `Q1` 为 `TRUE`，并记录当前时间 `tx` 到 `last`。\n    - **超时处理**：如果输出 `Q1` 为 `FALSE` 且等待时间 `wait1` 已过，则设置状态 `status` 为 2（表示步骤 1 超时），并将运行标志 `run` 设置为 `FALSE`。\n    - **延迟阶段**：如果输出 `Q1` 为 `TRUE` 且延迟时间 `delay1` 已过，则将步骤 `step` 设置为 2，并记录当前时间 `tx` 到 `last`。\n\n  -- REGION 综合输出\n    综合输出 `QX` 是所有输出信号 (`Q0` 到 `Q7`) 的逻辑或，用于表示是否有任意一个输出信号为 `TRUE`。这一步提供一个综合信号，方便外部监控功能块的运行状态。\n\n  -- REGION 结束逻辑\n    如果步骤 `step` 为 7 且输出 `Q7` 为 `TRUE` 且延迟时间 `delay7` 已过，则表示序列已完成。具体操作包括：\n    - 将步骤 `step` 设置为 -1，表示序列结束。\n    - 清除输出 `Q7`，确保输出信号恢复为低电平。\n    - 将运行标志 `run` 设置为 `FALSE`，停止序列运行。\n    - 将状态 `status` 设置为 110，表示序列正常结束。\n    这一步确保功能块在完成所有步骤后正确停止，并恢复到初始状态。", "name": "SEQUENCE_8"}