{"variables": [], "instructions": [], "planning": "- 概述\n此函数 `WORK_WEEK` 用于计算给定日期对应的 ISO 工作周数。ISO 工作周的定义是：每周从星期一开始，第一周是包含当年第一个星期四的那一周。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：`idate`，表示输入的日期。\n - 内部变量：\n   - `d1`：存储给定年份的第一天。\n   - `w1`：存储 `d1` 对应的星期几（1=星期一，7=星期日）。\n   - `ds`：存储计算出的基准日期（当年第一个星期四的前一天）。\n   - `yr`：存储给定日期的年份。\n   - `w31`：用于存储跨年时的星期几调整值。\n   - `w01`：用于存储跨年时的星期几调整值。\n   - `wm`：用于存储当年最多的工作周数。\n\n- 主逻辑部分\n -- REGION 计算基准日期\n    - 首先，提取输入日期的年份并存储在 `yr` 中。\n    - 使用 `YEAR_BEGIN` 函数获取该年份的第一天，并存储在 `d1` 中。\n    - 使用 `DAY_OF_WEEK` 函数获取 `d1` 对应的星期几，并存储在 `w1` 中。\n    - 根据 `w1` 的值计算基准日期 `ds`：\n      - 如果 `w1` 小于 5（即第一天是星期一至星期四），则基准日期为 `d1` 减去 `(w1 + 6)` 天的秒数。\n      - 否则，基准日期为 `d1` 减去 `(w1 - 1)` 天的秒数。\n    - 基准日期 `ds` 表示当年第一个星期四的前一天。\n\n -- REGION 计算工作周数\n    - 计算输入日期与基准日期之间的秒数差，并将其转换为周数，结果存储在 `WORK_WEEK` 中。\n    - 如果 `WORK_WEEK` 为 0，则表示输入日期属于上一年的最后一周。此时：\n      - 计算上一年的最后一周的星期几，并存储在 `w31` 中。\n      - 如果上一年是闰年且 `w31` 大于 1，则调整 `w01`。\n      - 如果 `w31` 或 `w01` 等于 4（即星期四），则将 `WORK_WEEK` 设置为 53，否则为 52。\n    - 如果 `WORK_WEEK` 不为 0，则检查当年是否为闰年，并计算当年的最大工作周数 `wm`：\n      - 如果是闰年且 `w1` 小于 7，则 `w31` 为 `w1 + 1`，否则为 1。\n      - 如果 `w31` 或 `w1` 等于 4，则 `wm` 为 53，否则为 52。\n      - 如果 `WORK_WEEK` 大于 `wm`，则将其重置为 1（表示跨年到下一年的第一周）。\n\n -- REGION 返回结果\n    - 最终，函数返回计算出的 `WORK_WEEK` 值，表示输入日期对应的 ISO 工作周数。", "name": "WORK_WEEK"}