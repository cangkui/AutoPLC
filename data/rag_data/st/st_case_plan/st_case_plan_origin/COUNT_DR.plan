{"variables": [], "instructions": [], "planning": "- 概述\n  这段代码定义了一个名为 `COUNT_DR` 的功能块，用于实现一个带有上限和步长的计数器。计数器支持设置、递增、递减和复位操作。计数器的值可以在指定的范围内变化，并且可以通过步长控制每次递增或递减的幅度。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：`SET`（设置计数器值）、`IN`（输入值）、`UP`（递增信号）、`DN`（递减信号）、`STEP`（步长值，默认为 1）、`MX`（计数器上限值，默认为最大值 16#FFFFFFFF）、`RST`（复位信号）。\n  - 输出变量：`CNT`（当前计数器值）。\n  - 内部变量：`last_up`（记录上一个周期的 `UP` 信号状态）、`last_dn`（记录上一个周期的 `DN` 信号状态）。\n\n- 主逻辑部分\n  -- REGION 计数器逻辑\n    计数器的逻辑通过一系列条件判断来实现：\n    1. **复位操作**：如果 `RST` 信号为真，则将计数器值 `CNT` 重置为 0。\n    2. **设置操作**：如果 `SET` 信号为真，则将计数器值 `CNT` 设置为 `IN` 的值，并通过 `LIMIT` 函数确保 `CNT` 在 0 和 `MX` 之间。\n    3. **递增操作**：如果 `UP` 信号为真且上一个周期的 `UP` 信号为假（即 `UP` 信号的上升沿），则根据步长 `STEP` 递增计数器值。如果递增后超出上限 `MX`，则计数器值会回绕到 `STEP - (MX - CNT) - 1`。\n    4. **递减操作**：如果 `DN` 信号为真且上一个周期的 `DN` 信号为假（即 `DN` 信号的上升沿），则根据步长 `STEP` 递减计数器值。如果递减后小于 0，则计数器值会回绕到 `MX - (STEP - CNT) + 1`。\n    5. **记录信号状态**：在每个周期结束时，记录当前 `UP` 和 `DN` 信号的状态到 `last_up` 和 `last_dn`，以便在下个周期中进行边缘检测。\n\n  -- REGION 输出\n    计数器的当前值 `CNT` 直接输出到功能块的输出变量中。\n\n- 总结\n  该功能块实现了一个灵活的计数器，支持设置、递增、递减和复位操作，并提供了上限和步长控制。通过边缘检测机制，确保了每次 `UP` 或 `DN` 信号的变化只会触发一次计数操作。计数器值在超出范围时会自动回绕，确保始终保持在有效范围内。", "name": "COUNT_DR"}