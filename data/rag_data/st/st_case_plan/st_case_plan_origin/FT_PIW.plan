{"variables": [], "instructions": [], "planning": "- 概述  \n该功能块 `FT_PIW` 实现了一个比例积分控制器（PI控制器），并包含输出限幅功能。它通过比例增益 `KP` 和积分增益 `KI` 对输入信号进行处理，并将输出限制在指定的范围内。\n\n- 变量定义  \n代码中定义了以下几类变量：  \n  - **输入变量**：  \n    - `IN`：输入信号，类型为 `REAL`。  \n    - `KP`：比例增益，默认值为 `1.0`。  \n    - `KI`：积分增益，默认值为 `1.0`。  \n    - `LIM_L`：输出下限，默认值为 `-1E+38`。  \n    - `LIM_H`：输出上限，默认值为 `1E+38`。  \n    - `RST`：复位信号，类型为 `BOOL`，用于重置积分器。  \n  - **输出变量**：  \n    - `Y`：控制器输出，类型为 `REAL`。  \n    - `LIM`：限幅标志，类型为 `BOOL`，表示输出是否被限制。  \n  - **内部变量**：  \n    - `integ`：积分器功能块实例，类型为 `FT_INT`，用于计算积分部分。  \n\n- 主逻辑部分  \n  -- **REGION 积分器计算**：  \n    调用 `FT_INT` 功能块计算积分部分。积分器的输入为 `IN`，增益为 `KI`，运行条件为 `NOT LIM`（即输出未限幅时运行积分器），复位信号为 `RST`。  \n  -- **REGION 输出计算**：  \n    计算控制器输出 `Y`，公式为：  \n    ```\n    Y = KP * IN + integ.Out\n    ```  \n    其中，`KP * IN` 是比例部分，`integ.Out` 是积分部分。  \n  -- **REGION 输出限幅**：  \n    检查输出 `Y` 是否超出限幅范围：  \n    - 如果 `Y < LIM_L`，则将 `Y` 设置为 `LIM_L`，并设置限幅标志 `LIM` 为 `TRUE`。  \n    - 如果 `Y > LIM_H`，则将 `Y` 设置为 `LIM_H`，并设置限幅标志 `LIM` 为 `TRUE`。  \n    - 如果 `Y` 在限幅范围内，则将限幅标志 `LIM` 设置为 `FALSE`。  \n\n- 总结  \n该功能块通过比例和积分作用对输入信号进行处理，并确保输出在指定的范围内。积分器在输出未限幅时运行，当输出超出限幅范围时，积分器停止工作，防止积分饱和。限幅标志 `LIM` 用于指示输出是否被限制。  ", "name": "FT_PIW"}