{"variables": [], "instructions": [], "planning": "- 概述\n  这段代码定义了一个名为 `DRIVER_1` 的功能块，用于控制一个布尔输出 `Q`。该功能块支持多种操作模式，包括直接设置、复位、输入触发以及超时控制。它使用了一个定时器 (`TON`) 来实现超时功能。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：\n    - `Toggle_Mode`：用于切换输入触发模式（切换或直接设置）。\n    - `Timeout`：定义输出 `Q` 的超时时间。\n    - `SET`：直接设置输出 `Q` 为 `TRUE`。\n    - `IN`：输入信号，用于触发输出 `Q`。\n    - `RST`：直接复位输出 `Q` 为 `FALSE`。\n  - 输出变量：\n    - `Q`：布尔输出，表示功能块的状态。\n  - 内部变量：\n    - `off`：一个 `TON` 定时器实例，用于实现超时功能。\n    - `edge`：用于检测 `IN` 信号的上升沿。\n\n- 主逻辑部分\n  -- REGION 超时控制\n    如果定时器 `off` 的输出 `Q` 为 `TRUE`，则说明超时时间已到，将输出 `Q` 设置为 `FALSE`。\n\n  -- REGION 复位控制\n    如果输入 `RST` 为 `TRUE`，则直接将输出 `Q` 设置为 `FALSE`，并忽略其他逻辑。\n\n  -- REGION 设置控制\n    如果输入 `SET` 为 `TRUE`，则直接将输出 `Q` 设置为 `TRUE`，并忽略其他逻辑。\n\n  -- REGION 输入触发控制\n    如果输入 `IN` 为 `TRUE` 且检测到上升沿（即 `edge` 为 `FALSE`），则根据 `Toggle_Mode` 的值决定如何更新输出 `Q`：\n    - 如果 `Toggle_Mode` 为 `TRUE`，则切换输出 `Q` 的状态（即 `Q := NOT Q`）。\n    - 如果 `Toggle_Mode` 为 `FALSE`，则直接将输出 `Q` 设置为 `TRUE`。\n\n  -- REGION 边缘检测\n    更新 `edge` 变量以存储当前 `IN` 信号的值，用于下一次循环的上升沿检测。\n\n  -- REGION 超时定时器启动\n    如果 `Timeout` 大于 `0` 秒，则启动定时器 `off`。定时器的输入为当前输出 `Q`，预设时间为 `Timeout`。如果输出 `Q` 为 `TRUE`，定时器开始计时；如果输出 `Q` 变为 `FALSE`，定时器停止并重置。\n\n- 总结\n  该功能块通过简单的逻辑实现了多种控制模式，包括直接设置、复位、输入触发和超时控制。它使用了一个定时器来确保输出 `Q` 在设定的超时时间后自动复位，同时支持切换模式来灵活控制输出的状态变化。", "name": "DRIVER_1"}