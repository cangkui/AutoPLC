{"variables": [], "instructions": [], "planning": "- 概述\n这段代码定义了一个名为 `TN_INPUT_SELECT_TEXT` 的功能块，用于处理文本输入的选择和显示逻辑。它通过控制输入焦点、更新输入内容以及管理屏幕显示来实现功能。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入相关变量：`in_count` 用于存储输入数据的元素数量，`by_Attr` 用于存储属性值，`st_String` 用于存储处理后的字符串。\n - 功能块实例：`FB_TN_SC_WRITE` 是用于屏幕写入的功能块实例。\n - 结构体变量：`Xus_TN_SCREEN` 和 `Xus_TN_INPUT_CONTROL_DATA` 是用于存储屏幕和输入控制数据的结构体。\n\n- 主逻辑部分\n -- REGION 输入焦点处理\n    如果 `Xus_TN_INPUT_CONTROL_DATA.bo_Focus` 为真（表示当前输入有焦点），则处理输入事件：\n     - 如果输入的是空格键（ASCII 码为 32），则增加 `in_selected` 的值，并设置 `bo_Update_Input` 为真，表示需要更新输入。\n     - 如果输入的是回车键（扩展码为 13），则设置 `bo_Input_Entered` 为真，表示输入完成。\n\n -- REGION 输入更新处理\n    如果 `bo_Update_Input` 或 `bo_Update_All` 为真，则执行以下逻辑：\n     - 如果 `bo_Update_All` 为真，表示需要更新所有内容：\n       - 根据 `in_Title_X_Offset` 和 `in_Title_Y_Offset` 的值计算标题的显示位置，并调用 `FB_TN_SC_WRITE` 功能块将标题写入屏幕。\n     - 计算输入数据的元素数量，并存储在 `in_count` 中。\n     - 如果 `in_count` 大于 0，则处理输入数据：\n       - 确保 `in_selected` 的值在有效范围内（1 到 `in_count` 之间）。\n       - 根据 `in_selected` 的值获取对应的输入元素，并使用 `OSCAT_BASIC.FIX` 函数对其进行格式化。\n       - 将格式化后的字符串存储在 `st_String` 中，并根据焦点状态设置属性值 `by_Attr`。\n       - 调用 `FB_TN_SC_WRITE` 功能块将格式化后的字符串写入屏幕。\n     - 更新光标位置到输入位置。\n     - 重置 `bo_Update_All` 和 `bo_Update_Input` 为假，表示更新完成。", "name": "TN_INPUT_SELECT_TEXT"}