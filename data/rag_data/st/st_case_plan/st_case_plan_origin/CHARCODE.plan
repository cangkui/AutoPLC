{"variables": [], "instructions": [], "planning": "- 概述\n  这个功能块名为 `CHARCODE`，用于将输入的字符串转换为对应的字符编码（ASCII码）。如果输入字符串长度为1，则直接返回其字符编码；如果输入字符串长度大于1，则将其视为HTML实体（如 `&amp;`），并尝试查找对应的字符编码。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：`STR`，类型为 `STRING[10]`，表示输入的字符串。\n  - 内部变量：\n    - `found`，类型为 `STRING[1]`，用于存储找到的字符。\n    - `search`，类型为 `STRING[10]`，用于存储搜索的字符串。\n    - `pos`，类型为 `INT`，用于存储字符在字符串中的位置。\n    - `i`，类型为 `INT`，用于循环计数。\n\n- 主逻辑部分\n  -- REGION 主逻辑\n    1. **输入字符串长度为1的情况**：\n       - 如果输入的字符串长度为1，则直接使用 `CODE` 函数获取该字符的ASCII码，并将其赋值给 `CHARCODE`。\n    2. **输入字符串长度大于1的情况**：\n       - 首先，将输入的字符串与 `&` 和 `;` 拼接，形成类似HTML实体的格式（如 `&amp;`），并存储在 `search` 变量中。\n       - 然后，使用 `WHILE` 循环在 `setup.CHARNAMES` 数组中查找与 `search` 匹配的实体。`setup.CHARNAMES` 是一个预设的数组，包含常见的HTML实体及其对应的字符。\n       - 循环从 `i = 0` 开始，每次递增 `i`，直到找到匹配的实体或 `i` 达到3（最多尝试4次）。\n       - 如果找到匹配的实体，则使用 `MID` 函数提取对应的字符，并存储在 `found` 变量中。\n       - 最后，使用 `CODE` 函数获取 `found` 字符的ASCII码，并将其赋值给 `CHARCODE`。\n    3. **默认情况**：\n       - 如果输入字符串为空或不满足上述条件，则不执行任何操作，`CHARCODE` 保持默认值（未定义）。", "name": "CHARCODE"}