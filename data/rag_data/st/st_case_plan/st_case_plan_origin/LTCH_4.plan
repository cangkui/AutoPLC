{"variables": [], "instructions": [], "planning": "- 概述\n这段代码是一个简单的锁存器功能块，名为`LTCH_4`。它通过输入信号`D0`到`D3`和锁存信号`L`来控制输出信号`Q0`到`Q3`的状态。同时，复位信号`RST`可以强制将所有输出复位为`FALSE`。\n\n- 变量定义\n代码中定义了以下几类变量：\n  - 输入变量：`D0`、`D1`、`D2`、`D3`（数据输入），`L`（锁存信号），`RST`（复位信号）。\n  - 输出变量：`Q0`、`Q1`、`Q2`、`Q3`（锁存输出）。\n\n- 主逻辑部分\n  -- REGION 复位逻辑\n     - 如果`RST`信号为`TRUE`，则将所有输出`Q0`、`Q1`、`Q2`、`Q3`强制复位为`FALSE`。复位信号具有最高优先级，无论锁存信号`L`的状态如何，都会执行复位操作。\n  \n  -- REGION 锁存逻辑\n     - 如果`RST`信号为`FALSE`且锁存信号`L`为`TRUE`，则将输入信号`D0`、`D1`、`D2`、`D3`的值分别赋值给输出信号`Q0`、`Q1`、`Q2`、`Q3`。锁存信号`L`的作用是将输入数据“锁存”到输出中，即保持输出值直到下一次锁存或复位操作。\n\n- 输出结果\n  - 输出信号`Q0`、`Q1`、`Q2`、`Q3`的状态由复位信号`RST`和锁存信号`L`共同决定：\n    - 如果`RST`为`TRUE`，所有输出为`FALSE`。\n    - 如果`RST`为`FALSE`且`L`为`TRUE`，输出值等于输入值。\n    - 如果`RST`为`FALSE`且`L`为`FALSE`，输出值保持不变（保持上一次锁存的值）。\n\n- 总结\n`LTCH_4`功能块实现了一个简单的4位锁存器，支持复位和锁存操作。复位信号`RST`用于清除所有输出，锁存信号`L`用于将输入数据传递到输出。这种设计常用于需要保持数据状态的场景，例如状态保持或信号同步。", "name": "LTCH_4"}