{"variables": [], "instructions": [], "planning": "- 概述\n该功能块名为 `SHA1_TO_STRH`，用于将一个长度为20字节的SHA1哈希值转换为一个可读的十六进制字符串。SHA1哈希值通常以字节数组的形式存储，而该功能块将其转换为十六进制字符串表示。\n\n- 变量定义\n代码中定义了以下几类变量：\n  - 输入变量：`SHA1`，一个长度为20的字节数组，存储SHA1哈希值。\n  - 局部变量：\n    - `i`：用于循环的索引变量。\n    - `tmp`：临时变量，用于存储当前字节的高4位或低4位。\n    - `pt`：指向输出字符串的指针，用于逐个字符构建最终的十六进制字符串。\n\n- 主逻辑部分\n  -- REGION 转换逻辑\n      1. 初始化指针 `pt`，指向输出字符串的起始地址。\n      2. 使用 `FOR` 循环遍历 `SHA1` 数组中的每个字节：\n         - 将当前字节的高4位提取出来，存储在 `tmp` 中。\n         - 将 `tmp` 转换为对应的十六进制字符：如果 `tmp` 的值小于等于9，则加上48（ASCII码中的 '0' 到 '9'）；否则加上87（ASCII码中的 'a' 到 'f'）。\n         - 将转换后的字符写入指针 `pt` 指向的位置，并将指针 `pt` 递增。\n         - 将当前字节的低4位提取出来，存储在 `tmp` 中。\n         - 将 `tmp` 转换为对应的十六进制字符，方法与高4位相同。\n         - 将转换后的字符写入指针 `pt` 指向的位置，并将指针 `pt` 递增。\n      3. 在循环结束后，将指针 `pt` 指向的位置设置为0，表示字符串的结束符（`\\0`）。\n\n  -- REGION 输出结果\n      最终的输出是一个以 `\\0` 结尾的十六进制字符串，表示输入的SHA1哈希值。该字符串可以直接用于显示或存储。\n\n- 关键点\n  - 该功能块通过逐字节处理，将每个字节的高4位和低4位分别转换为十六进制字符。\n  - 使用指针 `pt` 动态构建输出字符串，确保每个字符都被正确写入。\n  - 最终的字符串以 `\\0` 结尾，符合C语言风格的字符串表示。\n\n- 示例\n  假设输入的 `SHA1` 数组为 `[0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE, 0xF0, ...]`，则输出字符串为 `\"123456789abcdef0...\"`。", "name": "SHA1_TO_STRH"}