{"variables": [], "instructions": [], "planning": "- 概述\n  这个函数名为 `IP4_TO_STRING`，它的作用是将一个32位的DWORD类型的IP地址转换为点分十进制格式的字符串。例如，将 `0xC0A80101` 转换为 `\"192.168.1.1\"`。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：`IP4`，表示一个32位的IP地址，类型为DWORD。\n  - 内部变量：`tmp`，用于临时存储每个字节转换后的字符串，类型为STRING[3]。\n\n- 主逻辑部分\n  -- REGION 逻辑处理\n    1. **提取最低字节**：\n       - 使用 `DWORD_TO_BYTE` 函数从 `IP4` 中提取最低字节（即IP地址的最后一个部分）。\n       - 使用 `BYTE_TO_STRING` 函数将该字节转换为字符串，并存储在 `tmp` 中。\n       - 使用 `CONCAT` 函数将 `tmp` 与初始字符串 `'...'` 连接，形成 `IP4_TO_STRING` 的初始值。\n\n    2. **提取次低字节**：\n       - 使用 `SHR(IP4, 8)` 将 `IP4` 右移8位，提取次低字节。\n       - 使用 `DWORD_TO_BYTE` 和 `BYTE_TO_STRING` 将该字节转换为字符串，并存储在 `tmp` 中。\n       - 使用 `INSERT` 函数将 `tmp` 插入到 `IP4_TO_STRING` 的第二个位置。\n\n    3. **提取次高字节**：\n       - 使用 `SHR(IP4, 16)` 将 `IP4` 右移16位，提取次高字节。\n       - 使用 `DWORD_TO_BYTE` 和 `BYTE_TO_STRING` 将该字节转换为字符串，并存储在 `tmp` 中。\n       - 使用 `INSERT` 函数将 `tmp` 插入到 `IP4_TO_STRING` 的第一个位置。\n\n    4. **提取最高字节**：\n       - 使用 `SHR(IP4, 24)` 将 `IP4` 右移24位，提取最高字节。\n       - 使用 `DWORD_TO_BYTE` 和 `BYTE_TO_STRING` 将该字节转换为字符串，并存储在 `tmp` 中。\n       - 使用 `CONCAT` 函数将 `tmp` 与 `IP4_TO_STRING` 连接，形成最终的IP地址字符串。\n\n  -- REGION 输出结果\n    最终，`IP4_TO_STRING` 返回一个点分十进制格式的IP地址字符串。例如，输入 `0xC0A80101` 会返回 `\"192.168.1.1\"`。", "name": "IP4_TO_STRING"}