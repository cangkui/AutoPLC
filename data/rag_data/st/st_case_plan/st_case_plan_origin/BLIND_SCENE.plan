{"variables": [], "instructions": [], "planning": "- 概述\n这段代码是一个使用SCL编写的功能块，名为“BLIND_SCENE”，用于控制百叶窗的场景。它根据输入信号（如上升、下降、场景选择等）来设置百叶窗的位置和角度，并输出相应的状态和参数。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：UP（上升信号）、DN（下降信号）、S_IN（状态输入）、PI（位置输入）、AI（角度输入）、ENABLE（使能信号）、SWRITE（场景写入信号）、SCENE（场景选择）。\n - 输出变量：QU（上升输出）、QD（下降输出）、STATUS（状态输出）、PO（位置输出）、AO（角度输出）。\n - 保留变量：sx（一个16x3的数组，用于存储场景的位置、角度和使能状态）。\n - 临时变量：x（用于存储场景索引）。\n\n- 主逻辑部分\n-- REGION 场景选择与输出控制\n   首先，计算场景索引 `x`，它是 `SCENE` 输入与 `16#0F` 的按位与结果。然后，检查使能信号 `ENABLE` 是否为真，并且当前场景的使能状态 `sx[x,2]` 是否大于 0，同时上升信号 `UP` 和下降信号 `DN` 是否为真。如果条件满足，则从场景数组 `sx` 中读取位置和角度，并将其赋值给输出 `PO` 和 `AO`，同时设置状态输出 `STATUS` 为 `160 + x`，并置 `QU` 和 `QD` 为真。如果条件不满足，则直接将输入信号 `UP` 和 `DN` 赋值给输出 `QU` 和 `QD`，并将输入状态 `S_IN`、位置 `PI` 和角度 `AI` 赋值给输出 `STATUS`、`PO` 和 `AO`。\n\n-- REGION 场景写入\n   如果 `SWRITE` 信号为真，则进入场景写入逻辑。首先，设置状态输出 `STATUS` 为 `176`。然后，将输入位置 `PI` 和角度 `AI` 写入场景数组 `sx` 的相应位置 `sx[x,0]` 和 `sx[x,1]`。如果使能信号 `ENABLE` 为真，则将场景的使能状态 `sx[x,2]` 设置为 1，否则设置为 0。\n\n- 总结\n该功能块通过场景选择信号 `SCENE` 来读取或写入百叶窗的位置和角度，并根据输入信号 `UP` 和 `DN` 来控制百叶窗的上升和下降。状态输出 `STATUS` 用于指示当前的操作状态，如场景选择成功或场景写入完成。保留变量 `sx` 用于存储不同场景的位置、角度和使能状态，确保在断电后数据不会丢失。", "name": "BLIND_SCENE"}