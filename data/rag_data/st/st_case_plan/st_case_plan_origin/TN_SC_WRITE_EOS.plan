{"variables": [], "instructions": [], "planning": "- 概述\n该功能块名为 `TN_SC_WRITE_EOS`，用于将字符串数据写入特定屏幕位置。它通过调用另一个功能块 `TN_SC_WRITE` 来实现其功能，并将输入参数传递给该功能块。\n\n- 变量定义\n代码中定义了以下几类变量：\n - `TN_SC_WRITE`：一个派生类型的变量，用于调用 `TN_SC_WRITE` 功能块。\n - `Iby_ATTR`：一个 `BYTE` 类型的输入变量，表示写入字符串时的属性（如颜色、字体等）。\n - `Ist_STRING`：一个 `STRING` 类型的输入变量，表示要写入的字符串内容。\n - `Xus_TN_SCREEN`：一个派生类型的输入输出变量，表示屏幕的相关信息，包括偏移量等。\n\n- 主逻辑部分\n-- REGION 主逻辑\n  该功能块的主要逻辑是调用 `TN_SC_WRITE` 功能块，并将输入参数传递给它。具体步骤如下：\n  1. 计算屏幕位置：\n     - `Iin_Y`：通过 `Xus_TN_SCREEN.in_EOS_Offset / 80` 计算屏幕的行位置（Y 坐标）。\n     - `Iin_X`：通过 `Xus_TN_SCREEN.in_EOS_Offset MOD 80` 计算屏幕的列位置（X 坐标）。\n  2. 传递属性：\n     - `Iby_ATTR` 直接传递给 `TN_SC_WRITE`，用于定义字符串的显示属性。\n  3. 传递字符串：\n     - `Ist_STRING` 直接传递给 `TN_SC_WRITE`，表示要写入的字符串内容。\n  4. 传递屏幕信息：\n     - `Xus_TN_SCREEN` 作为输入输出变量传递给 `TN_SC_WRITE`，用于更新屏幕状态或获取屏幕信息。\n  通过以上步骤，`TN_SC_WRITE_EOS` 实现了将字符串写入指定屏幕位置的功能。", "name": "TN_SC_WRITE_EOS"}