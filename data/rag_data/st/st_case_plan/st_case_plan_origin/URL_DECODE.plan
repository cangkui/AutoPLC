{"variables": [], "instructions": [], "planning": "- 概述\n  这个函数名为`URL_DECODE`，用于解码URL编码的字符串。URL编码中，某些特殊字符会被替换为`%`后跟两个十六进制字符的形式。该函数的作用是将这些编码的字符还原为原始字符。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：`IN`，类型为`STRING`，表示需要解码的URL编码字符串。\n  - 内部变量：\n    - `pos`，类型为`INT`，用于存储`%`字符在字符串中的位置。\n    - `seq`，类型为`STRING(3)`，用于存储`%`后跟的两个十六进制字符。\n    - `new`，类型为`STRING(1)`，用于存储解码后的字符。\n\n- 主逻辑部分\n  -- REGION 解码逻辑：\n    1. **初始化**：将输入字符串`IN`赋值给`URL_DECODE`，作为初始的待解码字符串。\n    2. **查找`%`字符**：使用`FIND`函数查找字符串中第一个`%`字符的位置，并将结果赋值给`pos`。\n    3. **循环解码**：\n       - 如果`pos`大于0（即找到了`%`字符），则执行以下步骤：\n         - 使用`MID`函数从`%`字符后的位置提取两个字符（即十六进制编码），并将其赋值给`seq`。\n         - 使用`OSCAT_BASIC.HEX_TO_DWORD`将`seq`转换为十进制数值，然后使用`OSCAT_BASIC.CHR_TO_STRING`将该数值转换为对应的字符，并将其赋值给`new`。\n         - 使用`REPLACE`函数将`%`及其后的两个字符替换为解码后的字符`new`。\n         - 再次使用`FIND`函数查找下一个`%`字符的位置，更新`pos`。\n       - 重复上述步骤，直到字符串中没有更多的`%`字符。\n    4. **返回结果**：最终，`URL_DECODE`变量中存储的是解码后的字符串，函数将其作为返回值。\n\n  该函数通过循环查找并替换所有URL编码的字符，最终返回解码后的字符串。", "name": "URL_DECODE"}