{"variables": [], "instructions": [], "planning": "- 概述\n  这段代码实现了一个CRC（循环冗余校验）生成函数，名为“CRC_GEN”。它通过输入的数据指针、数据大小、多项式、初始值、输入反转标志、输出反转标志和输出异或值，计算出相应的CRC值。CRC是一种常用的数据校验方法，用于检测数据传输或存储中的错误。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：数据指针（PT）、数据大小（SIZE）、多项式长度（PL）、多项式（PN）、初始值（INIT）、输入反转标志（REV_IN）、输出反转标志（REV_OUT）、输出异或值（XOR_OUT）。\n  - 内部变量：当前位置（pos）、移位量（shift）、当前字节（dx）、位计数器（bits）。\n\n- 主逻辑部分\n  -- REGION 初始化\n     首先，根据多项式长度（PL）计算移位量（shift），并将多项式（PN）左移相应的位数，以便后续计算。然后，处理输入数据的前4个字节，根据输入反转标志（REV_IN）决定是否反转字节，并将其拼接到CRC值中。接着，将初始值（INIT）左移后与CRC值进行异或操作，完成初始化。\n\n  -- REGION 数据循环处理\n     从第5个字节开始，逐字节处理输入数据。对于每个字节，根据输入反转标志（REV_IN）决定是否反转字节。然后，逐位处理字节中的每一位。如果CRC值的最高位为1，则进行多项式异或操作；否则，直接左移CRC值。每次处理后，将当前字节左移一位，继续处理下一位。\n\n  -- REGION 最终处理\n     在处理完所有数据后，继续对CRC值进行32位处理，以确保CRC值的完整性。如果CRC值的最高位为1，则进行多项式异或操作；否则，直接左移CRC值。接着，将CRC值右移回原始位置，并与输出异或值（XOR_OUT）进行异或操作。最后，根据输出反转标志（REV_OUT）决定是否反转CRC值，并返回最终的CRC值。", "name": "CRC_GEN"}