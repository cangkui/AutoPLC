{"variables": [], "instructions": [], "planning": "- 概述\n  这个功能块名为 `LIST_NEXT`，用于从字符串列表中提取下一个元素。它通过分隔符（`SEP`）来分割列表，并将提取的元素存储在输出变量 `LEL` 中。同时，它还会检测是否到达列表的末尾，并通过输出变量 `NUL` 来指示。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：\n    - `SEP`：分隔符，用于标识列表中的元素边界。\n    - `RST`：复位信号，用于重置内部指针到列表的开头。\n  - 输入输出变量：\n    - `LIST`：输入的字符串列表，包含多个元素。\n  - 输出变量：\n    - `LEL`：提取的下一个元素。\n    - `NUL`：布尔值，指示是否到达列表的末尾。\n  - 内部变量：\n    - `pos`：当前指针位置，用于遍历列表。\n    - `pt`：指向输入列表的指针。\n    - `po`：指向输出列表的指针。\n    - `c`：临时变量，用于存储当前字符。\n    - `write`：写入位置，用于构建输出元素。\n\n- 主逻辑部分\n  -- REGION 初始化\n     在功能块的开始，将指针 `pt` 和 `po` 分别指向输入列表 `LIST` 和输出列表 `LEL` 的地址。如果复位信号 `RST` 为真，则将指针 `pos` 重置为 1，表示从列表的开头开始遍历。\n\n  -- REGION 检测列表末尾\n     首先检查当前指针位置 `pos` 是否指向列表的末尾（即字符为 0）或者是否已经到达列表的最大长度 `LIST_LENGTH`。如果是，则将输出列表 `LEL` 清空，并将 `NUL` 设置为 `TRUE`，表示没有更多的元素可以提取。\n\n  -- REGION 提取下一个元素\n     如果当前指针位置没有到达列表末尾，则将 `NUL` 设置为 `FALSE`，并初始化写入位置 `write` 为 1。然后从当前指针位置的下一个位置开始遍历列表：\n     - 如果当前字符 `c` 是分隔符 `SEP` 或列表结束符（0），则在输出列表 `LEL` 的当前位置写入结束符（0），并结束功能块的执行。\n     - 如果当前字符不是分隔符或结束符，则将其复制到输出列表 `LEL` 的当前位置，并递增写入位置 `write`。\n\n  -- REGION 结束\n     如果遍历完整个列表仍未找到分隔符或结束符，则功能块结束。\n\n- 总结\n  这个功能块通过遍历输入列表 `LIST`，并根据分隔符 `SEP` 提取下一个元素。它支持通过复位信号 `RST` 重置遍历指针，并通过输出变量 `NUL` 指示是否到达列表的末尾。提取的元素存储在输出变量 `LEL` 中。", "name": "LIST_NEXT"}