{"variables": [], "instructions": [], "planning": "- 概述\n该功能块名为“HTTP_GET”，用于通过HTTP协议从指定的URL获取数据。它支持基本的HTTP请求，包括GET请求、身份验证、HTTP/1.0和HTTP/1.1协议，并能够处理响应头、响应体以及错误状态。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入输出变量：URL数据、IP配置、发送缓冲区、接收缓冲区\n - 输入变量：IP地址、GET触发信号、模式、解锁缓冲区\n - 输出变量：HTTP状态、响应头起始和结束位置、响应体起始和结束位置、完成标志、错误码\n - 内部变量：读取HTTP、Base64编码、Base64字符串、身份验证标志、IP FIFO、IP状态、IP ID、GET触发信号记录、存储的IP地址、状态机状态、计数器、HTTP/1.1主机标志、总大小、文本、分隔符、分隔符位置、接收超时、连接关闭标志\n\n- - 主逻辑部分\n-- REGION 状态机\n   状态机是功能块的核心逻辑，用于处理HTTP请求的各个阶段。状态机从状态0开始，根据输入信号和内部条件逐步执行，直到完成请求或发生错误。以下是每个状态的详细逻辑：\n\n   - 状态0：初始化\n     - 将`DONE`标志设置为`FALSE`，表示请求未完成。\n     - 检测`GET`信号的上升沿（即`GET`为真且`GET_LAST`为假），表示需要发起一个新的HTTP请求。\n     - 如果检测到`GET`信号的上升沿，则：\n       - 存储当前的IP地址到`ip4_stored`。\n       - 初始化相关变量，如`total_size`（总数据大小）、`HEADER_START`（响应头起始位置）、`HEADER_STOP`（响应头结束位置）、`BODY_START`（响应体起始位置）、`BODY_STOP`（响应体结束位置）、`HTTP_STATUS`（HTTP状态码）、`ERROR`（错误码）等。\n       - 设置`ip_state`为1，表示开始IP连接。\n       - 如果URL中包含用户名和密码，则进行Base64编码：\n         - 将用户名和密码拼接为`b64_str1`。\n         - 设置`b64_start`为`TRUE`，启动Base64编码。\n         - 设置`authentication`为`TRUE`，表示需要进行身份验证。\n         - 进入状态5进行Base64编码。\n       - 如果URL中不包含用户名和密码，则直接进入状态10。\n\n   - 状态5：Base64编码\n     - 如果`b64_start`为`TRUE`且`b64_done`为`TRUE`，表示Base64编码已完成：\n       - 将`b64_start`设置为`FALSE`。\n       - 进入状态10，准备构建HTTP请求。\n\n   - 状态10：构建HTTP请求\n     - 如果`ip_state`为3，表示IP连接已建立，开始构建HTTP GET请求：\n       - 初始化`idx`为0，用于记录发送缓冲区中的位置。\n       - 将`GET`请求的路径写入发送缓冲区，并更新`idx`。\n       - 如果URL中包含查询参数，则将查询参数写入发送缓冲区，并更新`idx`。\n       - 根据`MODE`的值，选择HTTP协议版本（HTTP/1.0或HTTP/1.1），并将协议版本写入发送缓冲区，更新`idx`。\n       - 根据`MODE`的值，设置`Connection`头（Keep-Alive或Close），并将头信息写入发送缓冲区，更新`idx`。\n       - 如果URL中包含自定义头信息，则将其写入发送缓冲区，更新`idx`。\n       - 如果需要进行身份验证，则将`Authorization`头（包含Base64编码的用户名和密码）写入发送缓冲区，更新`idx`。\n       - 将`Host`头（包含URL的域名）写入发送缓冲区，更新`idx`。\n       - 根据URL的协议（HTTP或HTTPS），设置IP配置的端口号（HTTP为80，HTTPS为443）。\n       - 设置IP配置的其他参数，如IP地址、模式、启用标志、超时重置标志等。\n       - 将发送缓冲区的大小设置为`idx`，表示已写入的数据量。\n       - 进入状态30，等待HTTP响应。\n\n   - 状态30：处理HTTP响应\n     - 在此状态下，功能块等待HTTP响应并处理响应头和响应体：\n       - 检查是否发生接收超时（`rcv_timeout`）或连接关闭（`con_rdce`）。\n       - 如果发送缓冲区的大小为0，表示请求已发送，开始处理响应：\n         - 如果`total_size`为0，表示尚未解析响应头：\n           - 在接收缓冲区中查找响应头的结束分隔符（`$0D$0A$0D$0A`或`$0A$0A`）。\n           - 如果找到分隔符，则设置`HEADER_START`和`HEADER_STOP`，表示响应头的起始和结束位置。\n           - 解析HTTP状态码，如果状态码为200（成功），则进一步解析`Content-Length`头，计算响应体的总大小。\n           - 如果状态码不是200，则设置错误码为`DWORD#16#000000FC`。\n         - 如果`total_size`大于0，表示已解析响应头，等待响应体：\n           - 如果接收缓冲区中的数据量达到`total_size`，或者发生超时或连接关闭，则设置`BODY_START`和`BODY_STOP`，表示响应体的起始和结束位置。\n           - 将`DONE`标志设置为`TRUE`，表示请求已完成。\n           - 禁用IP连接，进入状态40完成请求。\n       - 如果IP连接发生错误，则设置错误码，并进入状态40完成请求。\n\n   - 状态40：完成请求\n     - 在此状态下，功能块根据请求是否成功或发生错误，设置完成标志并禁用IP连接：\n       - 如果`UNLOCK_BUF`为`TRUE`或`DONE`为`FALSE`，表示需要重置状态机：\n         - 将`ip_state`设置为4，表示IP连接已关闭。\n         - 将`DONE`标志设置为`FALSE`。\n         - 重置状态机到状态0，准备处理下一个请求。\n\n-- REGION 其他逻辑\n   在状态机之外，功能块还处理以下逻辑：\n   - Base64编码：当身份验证需要时，对用户名和密码进行Base64编码。\n   - IP FIFO：管理IP连接的FIFO队列，确保IP连接的顺序和状态正确。\n   - GET信号记录：记录`GET`信号的当前状态，用于检测上升沿。\n   - 错误处理：如果IP连接发生错误，则设置错误码并进入状态40完成请求。\n\n- 总结\n该功能块通过状态机实现了HTTP GET请求的完整流程，包括请求构建、身份验证、响应处理和错误处理。它能够处理HTTP/1.0和HTTP/1.1协议，并支持HTTPS连接。通过Base64编码和IP FIFO管理，功能块能够高效地处理复杂的HTTP请求场景。", "name": "HTTP_GET"}