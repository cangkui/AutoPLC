{"variables": [], "instructions": [], "planning": "- 概述\n这段代码实现了一个基本的复位优先（Reset-Dominant）的SR触发器（Set-Reset Flip-Flop）功能块，名为“FF_RSE”。它根据输入信号（Set、Reset 和 Reset 优先信号）来设置或重置输出信号 `Q`。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：`CS`（Set 信号）、`CR`（Reset 信号）、`RST`（Reset 优先信号）。\n - 输出变量：`Q`（触发器的输出）。\n - 内部变量：`es`（用于存储上一个周期的 Set 信号状态）、`er`（用于存储上一个周期的 Reset 信号状态）。\n\n- 主逻辑部分\n-- REGION 主逻辑\n   此区域实现了 SR 触发器的核心逻辑，优先级顺序为：`RST` > `CR` > `CS`。\n   1. **Reset 优先逻辑**：\n      - 如果 `RST` 为真，则强制将输出 `Q` 设置为 `FALSE`，无论其他输入信号的状态如何。这是最高优先级的操作。\n   2. **Reset 逻辑**：\n      - 如果 `CR` 为真，并且 `er`（上一个周期的 `CR` 状态）为假（即 `CR` 信号从假变为真），则将输出 `Q` 设置为 `FALSE`。\n   3. **Set 逻辑**：\n      - 如果 `CS` 为真，并且 `es`（上一个周期的 `CS` 状态）为假（即 `CS` 信号从假变为真），则将输出 `Q` 设置为 `TRUE`。\n   4. **状态更新**：\n      - 在每个周期结束时，更新 `es` 和 `er` 的值为当前周期的 `CS` 和 `CR` 状态，以便在下个周期中使用。\n\n- 状态机解释\n   这个功能块没有显式的状态机，但通过 `es` 和 `er` 变量实现了对信号边沿的检测。这种设计确保了只有在输入信号从假变为真时，才会触发相应的操作（Set 或 Reset）。\n\n- 输出结果\n   - 输出 `Q` 的值由 `RST`、`CR` 和 `CS` 信号决定，优先级顺序为 `RST` > `CR` > `CS`。\n   - 如果 `RST` 为真，`Q` 强制为 `FALSE`。\n   - 如果 `CR` 为真且 `er` 为假，`Q` 设置为 `FALSE`。\n   - 如果 `CS` 为真且 `es` 为假，`Q` 设置为 `TRUE`。\n   - 如果以上条件均不满足，`Q` 保持上一个周期的值。\n\n- 总结\n   这个功能块实现了一个简单的复位优先 SR 触发器，适用于需要根据输入信号优先级来控制输出的场景。通过存储上一个周期的输入信号状态，功能块能够检测信号的上升沿并执行相应的操作。", "name": "FF_RSE"}