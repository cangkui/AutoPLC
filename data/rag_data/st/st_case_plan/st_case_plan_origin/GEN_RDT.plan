{"variables": [], "instructions": [], "planning": "- 概述\n这段代码定义了一个名为 `GEN_RDT` 的功能块，用于生成一个随机时间间隔的脉冲信号。该功能块通过一个随机的延迟时间（在最小和最大时间范围内）来触发输出信号，并且输出信号的持续时间由 `TP_Q` 参数控制。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：`Enable`（使能信号）、`Min_Time_ms`（最小时间间隔）、`Max_Time_ms`（最大时间间隔）、`TP_Q`（输出信号持续时间）。\n - 输出变量：`xQ`（输出信号）。\n - 内部变量：`tonRDMTimer`（用于生成随机延迟的定时器）、`tof_xQ`（用于控制输出信号持续时间的定时器）、`tRDMTime`（随机延迟时间）、`rRDMTime`（随机值，用于计算随机延迟时间）。\n\n- 主逻辑部分\n-- REGION 定时器逻辑\n    - `tonRDMTimer` 是一个 `TON`（延时接通）定时器，用于生成随机延迟时间。其输入 `IN` 由 `Enable` 控制，定时时间 `PT` 由 `tRDMTime` 决定。\n    - `tof_xQ` 是一个 `TOF`（延时断开）定时器，用于控制输出信号 `xQ` 的持续时间。其输入 `IN` 由 `tonRDMTimer.Q`（`tonRDMTimer` 的输出）控制，定时时间 `PT` 由 `TP_Q` 决定。\n    - 输出信号 `xQ` 直接由 `tof_xQ.Q`（`tof_xQ` 的输出）控制。\n\n-- REGION 随机时间生成逻辑\n    - 当 `tonRDMTimer.Q` 为 `TRUE` 时，表示定时器已经完成计时，此时：\n        - 将输出信号 `xQ` 设置为 `TRUE`。\n        - 调用 `RDM` 函数生成一个新的随机值 `rRDMTime`，该函数基于上一个随机值生成一个新的随机数。\n        - 根据 `rRDMTime` 计算新的随机延迟时间 `tRDMTime`，公式为：\n          ```plaintext\n          tRDMTime = REAL_TO_TIME(rRDMTime * (Max_Time_ms - Min_Time_ms) + Min_Time_ms)\n          ```\n          其中，`Max_Time_ms` 和 `Min_Time_ms` 分别定义了随机延迟时间的最大值和最小值。\n        - 重置 `tonRDMTimer` 的输入 `IN` 为 `FALSE`，以重新启动定时器。\n\n- 输出结果\n输出信号 `xQ` 是一个脉冲信号，其触发时间间隔是随机的（在 `Min_Time_ms` 和 `Max_Time_ms` 之间），且每次触发后，输出信号会持续 `TP_Q` 时间。", "name": "GEN_RDT"}