{"variables": [], "instructions": [], "planning": "- 概述\n这段代码是一个使用SCL编写的功能块，名为“TN_INPUT_MENU_POPUP”，用于在终端屏幕上显示和管理弹出菜单。它处理菜单的创建、更新、用户输入响应以及销毁。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 功能块实例：用于屏幕操作的功能块实例，如保存屏幕区域、恢复屏幕区域、绘制线条、添加阴影、绘制框、写入字符等。\n - 输入变量：菜单的行数、列数、索引、滚动偏移量等。\n - 内部变量：用于存储菜单的激活状态、创建状态、销毁状态、更新状态、当前项、菜单文本、屏幕信息等。\n - 临时变量：用于在循环中临时存储行、列、索引等值。\n\n- - 主逻辑部分\n-- REGION 菜单创建\n   此区域处理菜单的创建逻辑。首先，检查菜单是否未激活且需要创建。如果是，则设置菜单为激活状态，并清除创建标志。然后，计算菜单项的数量，并确定菜单的行数和列数。接着，调整菜单的位置，确保它不会超出屏幕边界。最后，保存屏幕区域、绘制菜单框、添加阴影，并绘制菜单项。\n   - 计算菜单项数量：使用ELEMENT_COUNT函数计算菜单文本中的元素数量，以分隔符BYTE#35（#）为分隔符。\n   - 确定菜单行数和列数：将菜单项数量赋值给行数，初始化列数为0。通过循环遍历每个菜单项，使用ELEMENT_GET函数获取每个菜单项的长度，并更新最大列数。\n   - 调整菜单位置：检查菜单的X和Y坐标加上列数和行数是否超出屏幕边界。如果是，则调整菜单的X和Y坐标，确保菜单完全显示在屏幕内。\n   - 保存屏幕区域：使用FB_TN_SC_AREA_SAVE功能块保存菜单区域的屏幕内容，以便在菜单销毁时恢复。\n   - 绘制菜单框：使用FB_TN_SC_BOX功能块绘制菜单框，设置填充字符、边框和属性。\n   - 添加阴影：使用FB_TN_SC_ADD_SHADOW功能块为菜单框添加阴影，增强视觉效果。\n   - 绘制菜单项：初始化列和行变量，遍历每个菜单项。如果菜单项是分隔符（'-'），则使用FB_TN_SC_LINE功能块绘制分隔线。\n\n-- REGION 用户输入处理\n   此区域处理用户输入的响应逻辑。首先，检查菜单是否处于激活状态。如果是，则根据用户输入的扩展代码执行相应的操作，如滚动菜单项、销毁菜单等。\n   - 扩展代码65：表示用户按下上箭头键，设置滚动偏移量为-1，并设置更新标志为TRUE。\n   - 扩展代码66：表示用户按下下箭头键，设置滚动偏移量为1，并设置更新标志为TRUE。\n   - 扩展代码13：表示用户按下回车键，设置销毁标志为TRUE。\n   - 扩展代码27：表示用户按下ESC键，设置销毁标志为TRUE，并将当前项重置为0。\n   - 扩展代码67..68：表示用户按下其他键，设置销毁标志为TRUE，并将当前项重置为0。\n\n-- REGION 菜单更新\n   此区域处理菜单的更新逻辑。首先，检查菜单是否处于激活状态且需要更新。如果是，则清除更新标志，并确定当前菜单项的位置。然后，根据滚动偏移量调整当前菜单项，并确保不选中分隔符。最后，重新绘制菜单项，突出显示当前选中的项。\n   - 确定当前项：将当前项赋值给临时变量in_index。如果当前项小于1或大于菜单项数量，则设置滚动偏移量为1，并将当前项设置为菜单项数量。\n   - 检查分隔符：如果当前项是分隔符，则设置滚动偏移量为1，并跳过该分隔符。\n   - 调整当前项：如果滚动偏移量不为0，则使用循环根据滚动偏移量调整当前项，确保不选中分隔符。\n   - 重新绘制菜单项：初始化列和行变量，遍历每个菜单项。如果当前项是选中的项，则使用选中属性（by_Attr_mF）绘制；否则，使用未选中属性（by_Attr_oF）绘制。使用FB_TN_SC_WRITE_C功能块将菜单项文本写入屏幕。\n\n-- REGION 菜单销毁\n   此区域处理菜单的销毁逻辑。首先，检查菜单是否处于激活状态且需要销毁。如果是，则清除销毁标志，并设置菜单为未激活状态。然后，恢复屏幕区域，并清除模态对话框标志。\n   - 恢复屏幕区域：使用FB_TN_SC_AREA_RESTORE功能块恢复之前保存的屏幕区域。\n   - 清除模态对话框标志：将屏幕的模态对话框标志设置为FALSE。", "name": "TN_INPUT_MENU_POPUP"}