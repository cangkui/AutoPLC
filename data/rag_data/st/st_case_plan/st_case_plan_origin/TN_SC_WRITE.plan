{"variables": [], "instructions": [], "planning": "- 概述\n该功能块 `TN_SC_WRITE` 用于将字符串写入到屏幕的指定位置，并支持设置字符的颜色属性。它通过计算偏移量将字符逐个写入屏幕缓冲区，并在必要时更新颜色属性。\n\n- 变量定义\n代码中定义了以下几类变量：\n  - 内部变量：`bo_Color`（布尔类型，用于判断是否需要设置颜色），`in_Offset`（整型，用于计算字符在屏幕缓冲区中的偏移量），`in_Char_Index`（整型，用于循环遍历字符串的索引），`in_String_Length`（整型，存储字符串的长度）。\n  - 输入变量：`Iin_Y`（整型，表示屏幕行号），`Iin_X`（整型，表示屏幕列号），`Iby_ATTR`（字节类型，表示字符的颜色属性），`Ist_STRING`（字符串类型，表示要写入的字符串）。\n  - InOut变量：`Xus_TN_SCREEN`（用户自定义类型 `us_TN_SCREEN`，表示屏幕缓冲区，包含字符和颜色数据）。\n\n- 主逻辑部分\n-- REGION 初始化与输入验证\n   - 首先，计算输入字符串的长度并存储到 `in_String_Length` 中。\n   - 调用 `TN_SC_XY_ERROR` 函数检查字符串是否超出屏幕范围。如果超出范围，则直接返回，不执行后续逻辑。\n   - 将屏幕缓冲区中对应行的更新标志 `bya_Line_Update` 设置为 `TRUE`，表示该行需要更新。\n   - 计算字符串在屏幕缓冲区中的起始偏移量 `in_Offset`，公式为 `(Iin_Y * 80) + Iin_X`（假设屏幕宽度为 80 列）。\n   - 判断是否需要设置颜色属性，如果 `Iby_ATTR` 不为 `BYTE#00`，则将 `bo_Color` 设置为 `TRUE`。\n\n-- REGION 字符串写入与颜色设置\n   - 使用 `FOR` 循环遍历字符串的每个字符：\n     - 如果 `bo_Color` 为 `TRUE`，则将颜色属性 `Iby_ATTR` 写入屏幕缓冲区的 `bya_COLOR` 数组的对应位置。\n     - 使用 `OSCAT_BASIC.CODE` 函数获取字符串中当前字符的 ASCII 码，并将其写入屏幕缓冲区的 `bya_CHAR` 数组的对应位置。\n     - 将偏移量 `in_Offset` 递增，以便处理下一个字符。\n\n-- REGION 结束处理\n   - 将屏幕缓冲区的 `in_EOS_Offset`（End of String Offset）设置为当前偏移量，表示字符串写入的结束位置。", "name": "TN_SC_WRITE"}