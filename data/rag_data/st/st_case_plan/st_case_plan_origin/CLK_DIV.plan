{"variables": [], "instructions": [], "planning": "- 概述\n这个功能块名为`CLK_DIV`，实现了一个简单的时钟分频器。它通过一个计数器将输入的时钟信号分频，并将计数器的每一位输出到对应的输出引脚。功能块还支持复位功能，可以将计数器和所有输出复位为0。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：`clk`（时钟信号）和`rst`（复位信号）。\n - 输出变量：`Q0`到`Q7`，分别对应计数器的最低有效位（LSB）到最高有效位（MSB）。\n - 内部变量：`cnt`，一个8位计数器，用于存储当前的计数值。\n\n- 主逻辑部分\n-- REGION 复位逻辑\n   如果`rst`信号为真，则将计数器`cnt`和所有输出`Q0`到`Q7`复位为0。这是复位功能的实现，确保在复位信号激活时，系统能够回到初始状态。\n\n-- REGION 时钟分频逻辑\n   如果`rst`信号为假且`clk`信号为真，则计数器`cnt`加1。然后，将计数器`cnt`的每一位分别赋值给对应的输出引脚：\n   - `Q0`对应`cnt.0`（最低有效位）\n   - `Q1`对应`cnt.1`\n   - `Q2`对应`cnt.2`\n   - `Q3`对应`cnt.3`\n   - `Q4`对应`cnt.4`\n   - `Q5`对应`cnt.5`\n   - `Q6`对应`cnt.6`\n   - `Q7`对应`cnt.7`（最高有效位）\n   这样，每次时钟信号触发时，计数器的值会增加，并且其二进制表示的每一位都会被输出到相应的引脚，实现分频功能。\n\n- 总结\n这个功能块通过一个简单的计数器实现了时钟分频功能，并将计数器的每一位输出到对应的引脚。复位信号可以随时将计数器和输出复位为0。该功能块适用于需要将时钟信号分频并输出到多个引脚的场景。", "name": "CLK_DIV"}