{"variables": [], "instructions": [], "planning": "- 概述\n这个功能块名为 `SHA1_STR`，用于计算输入字符串的 SHA1 哈希值。它通过调用 `SHA1_STREAM` 功能块来实现 SHA1 哈希计算，并将结果存储在 `SHA1` 输出数组中。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：`RUN`，用于启动 SHA1 计算。\n - 输出变量：`DONE`，用于指示计算是否完成。\n - 输入输出变量：\n   - `STR`，输入的字符串，用于计算 SHA1 哈希值。\n   - `SHA1`，存储计算结果的字节数组。\n - 内部变量：\n   - `run_last`，用于检测 `RUN` 信号的上升沿。\n   - `SHA1_STREAM`，用于执行 SHA1 计算的功能块实例。\n   - `buf`，用于存储字符串转换后的字节缓冲区。\n   - `mode`，表示当前的计算模式。\n   - `size`，表示字符串的长度。\n   - `pos`，表示当前处理的字节位置。\n\n- 主逻辑部分\n-- REGION 模式处理\n   功能块的核心逻辑通过 `mode` 变量控制，分为以下几个模式：\n   - **模式 0**：等待 `RUN` 信号的上升沿。当 `RUN` 从假变为真时，初始化计算过程：将 `DONE` 置为假，设置 `mode` 为 1，并获取输入字符串的长度 `size`。\n   - **模式 2**：如果 `size` 大于 0，将字符串的一部分转换为字节并存储到 `buf` 中。这里使用 `OSCAT_BASIC._STRING_TO_BUFFER` 函数将字符串转换为字节。\n   - **模式 3**：计算完成，将 `DONE` 置为真，并重置 `mode` 为 0，准备下一次计算。\n\n-- REGION SHA1 计算\n   如果 `mode` 大于 0，调用 `SHA1_STREAM` 功能块进行 SHA1 计算。`SHA1_STREAM` 的输入参数包括 `size`（字符串长度）、`mode`（当前模式）、`buf`（字节缓冲区）和 `SHA1`（结果数组），输出参数为 `pos`（当前处理的字节位置）。\n\n-- REGION 边缘检测\n   在每次循环结束时，将当前的 `RUN` 信号值存储到 `run_last` 中，以便在下一次循环中检测 `RUN` 信号的上升沿。\n\n- 总结\n这个功能块通过状态机模式 (`mode`) 控制 SHA1 计算过程。它首先检测 `RUN` 信号的上升沿来启动计算，然后将字符串转换为字节并调用 `SHA1_STREAM` 功能块进行哈希计算，最后在计算完成后设置 `DONE` 信号。整个过程是分步骤进行的，确保计算的正确性和效率。", "name": "SHA1_STR"}