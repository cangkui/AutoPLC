{"variables": [], "instructions": [], "planning": "- 概述\n  这个功能块名为 `HYST_2`，实现了一个简单的滞回比较器逻辑。它根据输入值 `IN` 和参考值 `VAL`，结合滞回宽度 `HYS`，判断输出 `Q` 的状态，并输出一个窗口信号 `WIN`。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：`IN`（输入值）、`VAL`（参考值）、`HYS`（滞回宽度）。\n  - 输出变量：`Q`（输出状态）、`WIN`（窗口信号，表示输入值是否在滞回范围内）。\n  - 内部变量：`tmp`（临时变量，用于计算滞回的下限值）。\n\n- 主逻辑部分\n  -- REGION 滞回比较逻辑\n     1. 首先计算滞回的下限值 `tmp`，公式为 `tmp := VAL - HYS * 0.5`。\n     2. 根据输入值 `IN` 与 `tmp` 和 `tmp + HYS` 的比较，判断输出 `Q` 和窗口信号 `WIN` 的状态：\n        - 如果 `IN < tmp`，表示输入值低于下限，输出 `Q` 为 `FALSE`，窗口信号 `WIN` 为 `FALSE`。\n        - 如果 `IN > tmp + HYS`，表示输入值高于上限，输出 `Q` 为 `TRUE`，窗口信号 `WIN` 为 `FALSE`。\n        - 如果 `IN` 在 `tmp` 和 `tmp + HYS` 之间，表示输入值处于滞回范围内，窗口信号 `WIN` 为 `TRUE`，输出 `Q` 保持之前的状态。\n  \n  通过这种逻辑，`HYST_2` 实现了滞回控制，避免输入值在参考值附近波动时导致输出频繁切换。", "name": "HYST_2"}