{"variables": [], "instructions": [], "planning": "- 概述\n  该功能块名为“INTERLOCK”，用于实现一个简单的互锁逻辑。它通过两个输入信号和两个定时器来确保两个输出信号不会同时为真，从而实现互锁功能。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：`I1` 和 `I2` 是两个布尔类型的输入信号，`TL` 是一个时间类型的输入，用于设置定时器的延时时间。\n  - 输出变量：`Q1` 和 `Q2` 是两个布尔类型的输出信号，表示互锁后的结果。\n  - 内部变量：`T1` 和 `T2` 是两个 `TON` 类型的定时器，用于实现延时功能。\n\n- 主逻辑部分\n  -- REGION 定时器逻辑\n      该区域包含两个定时器 `T1` 和 `T2` 的初始化与运行逻辑。定时器 `T1` 的输入信号是 `I1`，定时器 `T2` 的输入信号是 `I2`，两个定时器的延时时间均由输入变量 `TL` 设置。当输入信号为真时，定时器开始计时；当计时达到设定的延时时间时，定时器的输出 `Q` 变为真。\n\n  -- REGION 互锁逻辑\n      该区域实现了互锁逻辑。输出 `Q1` 的逻辑是 `I1` 为真且 `T2` 的输出 `Q` 为假，表示在 `I1` 为真且 `T2` 未完成延时的情况下，`Q1` 为真。输出 `Q2` 的逻辑是 `I2` 为真且 `T1` 的输出 `Q` 为假，表示在 `I2` 为真且 `T1` 未完成延时的情况下，`Q2` 为真。通过这种方式，`Q1` 和 `Q2` 不会同时为真，从而实现互锁功能。\n\n- 总结\n  该功能块通过定时器和简单的逻辑运算，确保两个输出信号 `Q1` 和 `Q2` 不会同时为真，适用于需要互锁控制的场景。定时器的延时时间由输入变量 `TL` 控制，使得该功能块具有灵活性。", "name": "INTERLOCK"}