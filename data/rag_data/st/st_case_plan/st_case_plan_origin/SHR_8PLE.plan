{"variables": [], "instructions": [], "planning": "- 概述\n这段代码实现了一个8位并行移位寄存器功能块，名为`SHR_8PLE`。它支持左移、右移、加载和复位操作，并根据输入信号动态更新寄存器的值。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：`Din`（数据输入）、`Dload`（加载数据）、`CLK`（时钟信号）、`UP`（移位方向，默认向上/左移）、`load`（加载信号）、`RST`（复位信号）。\n - 输出变量：`DOut`（数据输出）。\n - 内部变量：`edge`（时钟边缘检测标志，默认值为真）、`register`（8位寄存器，用于存储当前状态）。\n\n- 主逻辑部分\n-- REGION 移位寄存器逻辑\n   1. **时钟信号和边缘检测**：\n      - 当`CLK`为真且`edge`为真且`RST`为假时，表示检测到时钟上升沿，开始执行移位或加载操作。\n      - 执行操作后，将`edge`设置为假，以避免在同一时钟周期内重复操作。\n      - 当`CLK`为假时，将`edge`重新设置为真，以便在下一个时钟上升沿时再次检测。\n\n   2. **移位操作**：\n      - 如果`UP`为真，执行左移操作：\n        - 使用`SHL`函数将寄存器左移一位。\n        - 将`Din`的值写入寄存器的最低位（`register.0`）。\n        - 将寄存器的最高位（`register.7`）作为输出`DOut`。\n      - 如果`UP`为假，执行右移操作：\n        - 使用`SHR`函数将寄存器右移一位。\n        - 将`Din`的值写入寄存器的最高位（`register.7`）。\n        - 将寄存器的最低位（`register.0`）作为输出`DOut`。\n\n   3. **加载操作**：\n      - 如果`load`为真，将`Dload`的值加载到寄存器中。\n      - 根据`UP`的值，将寄存器的最高位（`register.7`）或最低位（`register.0`）作为输出`DOut`。\n\n   4. **复位操作**：\n      - 如果`RST`为真，将寄存器清零，并将输出`DOut`设置为假。\n\n-- REGION 输出更新\n   - 输出`DOut`的值由移位或加载操作决定，具体取决于寄存器的当前状态和`UP`的值。\n\n- 总结\n该功能块通过时钟信号控制移位或加载操作，支持左移、右移、加载和复位功能。复位信号具有最高优先级，会覆盖其他操作。输出`DOut`始终反映寄存器的最低位或最高位，具体取决于移位方向。", "name": "SHR_8PLE"}