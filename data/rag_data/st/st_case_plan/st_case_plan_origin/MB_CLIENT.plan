{"variables": [], "instructions": [], "planning": "- 概述\n  此功能块名为“MB_CLIENT”，用于处理Modbus通信协议的客户端逻辑。它支持多种Modbus功能码（FC），包括读取和写入寄存器、线圈等操作。功能块通过状态机管理通信流程，并处理错误和超时情况。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入/输出变量：IP_C（IP配置）、S_BUF（发送缓冲区）、R_BUF（接收缓冲区）、DATA（数据数组）。\n  - 输入变量：数据大小、使能、UDP模式、功能码、单元ID、读取地址、读取点数、读取数据地址、读取数据位位置、写入地址、写入点数、写入数据地址、写入数据位位置、延迟时间。\n  - 输出变量：错误码、忙状态。\n  - 内部变量：IP状态、IP ID、IP FIFO、掩码、临时变量（如w_tmp、idx1、idx2等）、状态、事务ID、响应、比较值、定时器（TON_1）。\n\n- - 主逻辑部分\n  -- REGION 状态机逻辑\n    状态机通过`CASE`语句管理功能块的运行流程。以下是每个状态的详细处理逻辑：\n    - **状态 00**：\n      此状态是功能块的初始状态。首先，初始化定时器TON_1，并检查使能信号（ENABLE）或延迟时间（DELAY）是否满足条件。如果定时器超时（TON_1.Q为真）或延迟时间为0，则停止定时器（TON_1(IN:=FALSE)），并将状态设置为20，同时将IP状态（IP_STATE）设置为1。此状态的主要作用是等待使能信号或延迟时间，以启动通信流程。\n\n    - **状态 20**：\n      此状态是功能块的核心处理状态之一。如果IP状态为3，表示IP通信已准备好，功能块将根据功能码（FC）处理不同的Modbus请求。以下是各功能码的处理逻辑：\n      - **FC 1-2（读取线圈或离散输入）**：\n        验证读取点数（R_POINTS）是否小于等于2000。如果满足条件，则构建发送缓冲区（S_BUF），包括读取地址（R_ADDR）和读取点数。计算响应数据长度（Response）并设置比较值（comp）。如果读取点数超出范围，则设置错误码（ERROR）为2。\n      - **FC 3-4（读取保持寄存器或输入寄存器）**：\n        验证读取点数是否小于等于125。如果满足条件，则构建发送缓冲区，包括读取地址和读取点数。计算响应数据长度并设置比较值。如果读取点数超出范围，则设置错误码为2。\n      - **FC 5（写入单个线圈）**：\n        验证写入数据地址（W_DATA_ADR）是否在数据大小（DATA_SIZE）范围内。如果满足条件，则构建发送缓冲区，包括写入地址（W_ADDR）和写入数据（DATA[W_DATA_ADR]）。设置响应数据长度和比较值。如果写入数据地址超出范围，则设置错误码为2。\n      - **FC 6（写入单个寄存器）**：\n        验证写入数据地址是否在数据大小范围内。如果满足条件，则构建发送缓冲区，包括写入地址和写入数据。设置响应数据长度和比较值。如果写入数据地址超出范围，则设置错误码为2。\n      - **FC 15（写入多个线圈）**：\n        验证写入数据地址和写入点数（W_POINTS）是否在数据大小范围内，且写入点数小于等于1968。如果满足条件，则构建发送缓冲区，包括写入地址、写入点数和写入数据。通过循环将数据逐位写入缓冲区。设置响应数据长度和比较值。如果写入数据地址或点数超出范围，则设置错误码为2。\n      - **FC 16（写入多个寄存器）**：\n        验证写入数据地址和写入点数是否在数据大小范围内，且写入点数小于等于123。如果满足条件，则构建发送缓冲区，包括写入地址、写入点数和写入数据。通过循环将数据逐字写入缓冲区。设置响应数据长度和比较值。如果写入数据地址或点数超出范围，则设置错误码为2。\n      - **FC 22（读写多个寄存器）**：\n        验证写入数据地址和写入点数是否在数据大小范围内，且写入点数小于等于121，同时读取点数（R_POINTS）小于等于125。如果满足条件，则构建发送缓冲区，包括写入地址、写入点数、读取地址和读取点数。通过循环将数据逐字写入缓冲区。设置响应数据长度和比较值。如果写入数据地址、写入点数或读取点数超出范围，则设置错误码为2。\n      - **FC 23（读写多个寄存器和线圈）**：\n        验证写入数据地址和写入点数是否在数据大小范围内，且写入点数小于等于121，同时读取点数小于等于125。如果满足条件，则构建发送缓冲区，包括写入地址、写入点数、读取地址和读取点数。通过循环将数据逐字写入缓冲区。设置响应数据长度和比较值。如果写入数据地址、写入点数或读取点数超出范围，则设置错误码为2。\n      - **无效功能码**：\n        如果功能码不在上述范围内，则设置错误码为1。\n\n      如果所有验证通过且未发生错误，则增加事务ID（Transaction_ID），并进入状态30。否则，设置IP状态为4，并返回状态00。\n\n    - **状态 30**：\n      此状态是功能块的响应处理状态。首先，检查IP_C的错误状态（IP_C.ERROR）。如果有错误，则设置错误码（ERROR）为IP_C.ERROR，并将IP状态设置为4，返回状态00。如果发送缓冲区为空且接收缓冲区（R_BUF）不为空，则处理响应数据：\n      - 检查响应数据的格式和内容是否匹配。如果响应数据长度（R_BUF.SIZE）大于等于9且响应功能码（R_BUF.BUFFER[7]）大于128，则表示响应中包含错误，设置错误码为响应数据中的错误码（R_BUF.BUFFER[8]），并将IP状态设置为4，返回状态00。\n      - 如果响应数据长度与预期长度（Response + 9）匹配，且响应数据内容与发送缓冲区内容一致，则根据功能码处理接收到的数据：\n        - **FC 1-2（读取线圈或离散输入）**：\n          将接收到的数据逐位写入DATA数组的指定位置。\n        - **FC 3-4（读取保持寄存器或输入寄存器）**：\n          将接收到的数据逐字写入DATA数组的指定位置。\n        - **其他功能码**：\n          如果功能码无效，则设置错误码为1。\n      - 如果响应数据无效，则设置错误码为3。\n\n      处理完成后，设置IP状态为4，并返回状态00。\n\n  -- REGION IP FIFO管理\n    使用IP_FIFO功能块管理IP通信的FIFO队列。根据IP状态（IP_STATE）和IP ID（IP_ID）更新FIFO状态。此部分逻辑确保IP通信的FIFO队列能够正确处理发送和接收的数据。\n\n  -- REGION 忙状态管理\n    根据IP状态是否为3，设置忙状态（BUSY）的输出值。如果IP状态为3，表示功能块正在处理通信请求，忙状态为真；否则，忙状态为假。\n\n- 总结\n  此功能块通过状态机实现了Modbus客户端通信的逻辑，支持多种功能码和操作。状态00用于初始化通信流程，状态20用于构建请求，状态30用于处理响应。功能块通过定时器和状态机管理通信流程，并处理错误和超时情况。IP FIFO管理和忙状态管理确保通信的可靠性和实时性。", "name": "MB_CLIENT"}