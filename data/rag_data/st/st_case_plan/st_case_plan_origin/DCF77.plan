{"variables": [], "instructions": [], "planning": "- 概述\n该功能块 `DCF77` 用于处理来自DCF77时间信号的数据，并将其转换为可用的日期和时间信息。它还支持夏令时（DST）和时区偏移的处理。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入变量：接收信号（REC）、设置信号（SET）、设置日期时间（SDT）、夏令时输入（DSI）、同步超时时间（SYNC_TIMEOUT）、时间偏移（TIME_OFFSET）、夏令时使能（DST_EN）。\n - 输出变量：时间脉冲（TP）、夏令时状态（DS）、星期几（WDAY）、错误标志（ERROR）、实时时钟（RTC）、调整后的实时时钟（RTC1）、毫秒（MSEC）、同步状态（SYNC）。\n - 内部变量：本地时间（mez）、协调世界时（utc）、状态（state）、边缘检测（edge）、时间变量（tx, ty, last）、位数组（bits）、计数器（cnt, i）、旧时间（old_time）、分钟（minute）、小时（hour）、日（day）、月（month）、年（year）、最后同步时间（last_sync）、时间变量（t1, tz）、初始化标志（init）。\n\n- - 主逻辑部分\n-- REGION 信号处理\n   此区域是功能块的核心部分，负责处理来自DCF77时间信号的输入数据，并将其解码为日期和时间信息。以下是详细的逻辑流程：\n   - **信号检测与边缘检测**：\n     - 使用 `rec XOR edge` 检测信号的变化（上升沿或下降沿）。\n     - 根据信号的高低电平和时间差（`tx`）判断信号类型：\n       - 如果信号为低电平且时间差在 1700ms 到 2000ms 之间，表示新的一分钟开始，重置状态变量 `state` 为 0，并设置时间脉冲标志 `tp`。\n       - 如果信号为低电平且时间差在 700ms 到 1000ms 之间，表示一个位（bit）的结束，递增状态变量 `state`。\n       - 如果信号为高电平且时间差小于 120ms，表示位值为 0。\n       - 如果信号为高电平且时间差在 120ms 到 250ms 之间，表示位值为 1。\n       - 如果信号不符合上述条件，则设置错误标志 `error` 为真，并重置状态变量 `state` 为 0。\n   - **完整信号解析**：\n     - 当状态变量 `state` 达到 58 时，表示接收到完整的 DCF77 信号（58 位）。\n     - 首先，检查信号的起始位（`bits[0]`）和校验位（`bits[17]` 和 `bits[18]` 的异或结果，以及 `bits[20]`）。如果校验失败，则设置错误标志 `error` 为真。\n     - **解析分钟**：\n       - 从位数组中提取分钟信息（`bits[21]` 到 `bits[28]`），并计算分钟值。\n       - 检查分钟值是否有效（0 到 59），并校验校验位（`bits[28]`）。如果无效，则设置错误标志 `error` 为真。\n     - **解析小时**：\n       - 从位数组中提取小时信息（`bits[29]` 到 `bits[35]`），并计算小时值。\n       - 检查小时值是否有效（0 到 23），并校验校验位（`bits[35]`）。如果无效，则设置错误标志 `error` 为真。\n     - **解析日**：\n       - 从位数组中提取日信息（`bits[36]` 到 `bits[41]`），并计算日值。\n       - 检查日值是否有效（1 到 31）。如果无效，则设置错误标志 `error` 为真。\n     - **解析星期**：\n       - 从位数组中提取星期信息（`bits[42]` 到 `bits[44]`），并计算星期值。\n       - 检查星期值是否有效（1 到 7）。如果无效，则设置错误标志 `error` 为真。\n     - **解析月**：\n       - 从位数组中提取月信息（`bits[45]` 到 `bits[49]`），并计算月值。\n       - 检查月值是否有效（1 到 12）。如果无效，则设置错误标志 `error` 为真。\n     - **解析年**：\n       - 从位数组中提取年信息（`bits[50]` 到 `bits[57]`），并计算年值。\n       - 将年值转换为完整的年份（如果年值大于等于 70，则加 1900；否则加 2000）。\n     - **奇偶校验**：\n       - 对位数组中的第 36 到 58 位进行奇偶校验，检查位值为 1 的数量是否为偶数。如果校验失败，则设置错误标志 `error` 为真。\n     - **时间连续性检查**：\n       - 检查解析出的时间是否与上一次的时间连续（例如，分钟是否递增）。如果时间不连续，则设置错误标志 `error` 为真。\n     - **夏令时处理**：\n       - 根据位 `bits[17]` 判断当前是否处于夏令时（`DS`），并调整协调世界时（`UTC`）。\n\n-- REGION 时间同步\n   此区域负责处理时间同步逻辑，确保实时时钟（RTC）和调整后的实时时钟（RTC1）保持更新：\n   - **初始化**：\n     - 如果初始化标志 `init` 为假或设置了设置信号 `SET`，则初始化时间变量 `utc` 为设置日期时间 `SDT`，并设置时间脉冲标志 `tp` 为真。\n   - **时间脉冲处理**：\n     - 如果时间脉冲标志 `tp` 为真，则根据夏令时状态 `DS` 和时区偏移 `TIME_OFFSET` 调整实时时钟 `RTC` 和调整后的实时时钟 `RTC1`。\n     - 设置同步状态 `SYNC` 为真，并更新最后同步时间 `last_sync`。\n   - **时间递增**：\n     - 如果实时时钟 `RTC` 大于 0 且时间差 `t1 - ty` 超过 1 秒，则递增实时时钟 `RTC` 和调整后的实时时钟 `RTC1`，并更新同步状态 `SYNC` 和星期几 `WDAY`。\n   - **毫秒计算**：\n     - 计算当前时间与上一次时间更新之间的毫秒数 `msec`。\n\n-- REGION 夏令时处理\n   此区域根据夏令时使能标志 `DST_EN` 和协调世界时 `utc`，判断当前是否处于夏令时，并更新夏令时状态 `DS`。\n\n-- REGION 错误处理\n   此区域负责处理错误逻辑：\n   - 如果信号检测或数据校验失败，则设置错误标志 `error` 为真。\n   - 如果时间信息不连续（例如，分钟未递增），则设置错误标志 `error` 为真。\n\n-- REGION 输出更新\n   此区域更新输出变量：\n   - 根据时间脉冲标志 `tp`、夏令时状态 `DS`、实时时钟 `RTC`、调整后的实时时钟 `RTC1`、同步状态 `SYNC`、星期几 `WDAY` 和毫秒数 `msec`，更新相应的输出变量。\n   - 如果同步超时，则设置同步状态 `SYNC` 为假。", "name": "DCF77"}