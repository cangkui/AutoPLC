{"variables": [], "instructions": [], "planning": "- 概述\n  这段代码实现了一个名为 `FT_TN16` 的功能块，用于对输入的 `REAL` 类型数据进行滤波处理。它通过一个长度为 16 的数组存储输入数据，并在指定的时间间隔内更新输出值。每次更新时，还会触发一个布尔信号 `trig` 表示数据已更新。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：`in` 是输入的实数值，`T` 是滤波的时间间隔。\n  - 输出变量：`out` 是滤波后的实数值，`trig` 是一个布尔信号，表示输出值已更新。\n  - 内部变量：\n    - `length` 是数组的长度，固定为 16。\n    - `X` 是一个长度为 16 的数组，用于存储输入数据。\n    - `cnt` 是当前数组索引，用于循环更新数组。\n    - `last` 是上一次更新的时间戳。\n    - `tx` 是当前的时间戳。\n    - `init` 是一个布尔标志，用于初始化功能块。\n\n- 主逻辑部分\n  -- REGION 初始化与时间计算\n    首先，获取当前时间戳 `tx`，并将其转换为 `TIME` 类型。然后，初始化 `trig` 为 `FALSE`，表示当前没有触发更新。\n    如果 `init` 为 `FALSE`，表示功能块尚未初始化，此时将输入值 `in` 存储到数组 `X` 的当前索引位置，并设置 `init` 为 `TRUE`，同时记录当前时间戳 `last`。\n\n  -- REGION 滤波与更新\n    如果功能块已经初始化，则检查当前时间戳 `tx` 与上一次更新时间戳 `last` 的差值是否大于或等于 `T / length`（即每个数组元素的时间间隔）。如果满足条件，则执行以下操作：\n    1. 更新索引 `cnt`：如果 `cnt` 达到数组长度减 1，则将其重置为 0；否则，将 `cnt` 加 1。\n    2. 将数组 `X` 中当前索引位置的值赋给输出 `out`。\n    3. 将输入值 `in` 存储到数组 `X` 的当前索引位置。\n    4. 更新上一次更新时间戳 `last` 为当前时间戳 `tx`。\n    5. 将 `trig` 设置为 `TRUE`，表示输出值已更新。\n\n- 输出结果\n  每次满足时间间隔条件时，功能块会更新输出值 `out` 并触发 `trig` 信号。`out` 是数组 `X` 中当前索引位置的值，而 `trig` 为 `TRUE` 表示数据已更新。\n\n- 总结\n  该功能块通过一个固定长度的数组实现了对输入数据的滤波处理，并在指定的时间间隔内更新输出值。`trig` 信号用于指示输出值的更新，适用于需要周期性处理数据的场景。", "name": "FT_TN16"}