{"variables": [], "instructions": [], "planning": "- 概述\n  该功能块 `TN_SC_LINE` 用于在屏幕缓冲区中绘制垂直线或水平线，并根据线条的连接点选择合适的字符。它支持两种不同的边框风格，并允许用户指定线条的起始和结束坐标、属性以及边框风格。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 连接字符变量：用于存储线条连接点的字符（如顶部、底部、左侧、右侧、交叉点等）。\n  - 线条字符变量：用于存储垂直和水平线条的字符。\n  - 旧字符变量：用于存储屏幕缓冲区中当前字符的值。\n  - 坐标和偏移量变量：用于存储线条的起始和结束坐标，以及屏幕缓冲区的偏移量。\n  - 属性变量：用于存储线条的属性（如颜色）。\n  - 屏幕缓冲区变量：用于存储屏幕的字符和颜色数据。\n\n- 主逻辑部分\n  -- REGION 输入验证\n    首先，通过调用 `TN_SC_XY2_ERROR` 函数验证输入的坐标是否有效。如果坐标无效，则直接返回，不执行后续逻辑。\n\n  -- REGION 边框风格设置\n    根据 `Iby_Border` 的值设置连接字符和线条字符：\n    - 如果 `Iby_Border` 为 `BYTE#01`，则使用第一种边框风格。\n    - 如果 `Iby_Border` 为 `BYTE#02`，则使用第二种边框风格。\n    - 如果 `Iby_Border` 为其他值，则将所有连接字符和线条字符设置为 `Iby_Border` 的值。\n\n  -- REGION 垂直线绘制\n    如果起始和结束的 X 坐标相同，则绘制垂直线：\n    - 计算起始偏移量 `in_Offset_1`。\n    - 使用循环从起始 Y 坐标到结束 Y 坐标，逐行更新屏幕缓冲区中的字符和颜色。\n    - 如果当前字符是水平线条字符，则根据位置选择顶部、底部或交叉点连接字符。\n    - 更新屏幕缓冲区中的字符和颜色，并标记该行需要更新。\n\n  -- REGION 水平线绘制\n    如果起始和结束的 Y 坐标相同，则绘制水平线：\n    - 标记该行需要更新。\n    - 计算起始偏移量 `in_Offset_1`。\n    - 使用循环从起始 X 坐标到结束 X 坐标，逐列更新屏幕缓冲区中的字符和颜色。\n    - 如果当前字符是垂直线条字符，则根据位置选择左侧、右侧或交叉点连接字符。\n    - 更新屏幕缓冲区中的字符和颜色。\n\n- 输出结果\n  功能块执行后，屏幕缓冲区中的字符和颜色数据将被更新，以反映新绘制的垂直线或水平线。同时，相关行的更新标志被设置为 `TRUE`，以便后续处理。", "name": "TN_SC_LINE"}