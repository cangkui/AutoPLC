{"variables": [], "instructions": [], "planning": "- 概述\n这段代码定义了一个名为“TN_SC_VIEWPORT”的功能块，用于在屏幕上显示日志信息。它通过读取日志控制信息，并根据颜色属性将日志信息写入屏幕。代码中使用了定时器（TON）来控制更新频率，并使用了循环来处理多条日志信息。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 功能块实例：`FB_TN_SC_WRITE`（用于屏幕写入操作）、`FB_TON`（定时器实例）。\n - 输入变量：`in_index`（索引）、`in_Color`（颜色值）、`by_Attr`（属性字节）、`in_count`（计数器）。\n - 结构体实例：`Xus_LOG_VIEWPORT`（日志视口信息）、`Xus_LOG_CONTROL`（日志控制信息）、`Xus_TN_SCREEN`（屏幕信息）。\n - 位置和尺寸变量：`Iin_X`（X坐标）、`Iin_Y`（Y坐标）、`Iin_Width`（宽度）。\n - 属性变量：`Idw_ATTR_1`和`Idw_ATTR_2`（属性值）。\n - 时间变量：`Iti_TIME`（定时器时间）。\n\n- 主逻辑部分\n-- REGION 日志更新处理\n   此区域处理日志信息的更新和显示。首先，检查`Xus_LOG_VIEWPORT.UPDATE`标志和定时器`FB_TON.Q`是否为真。如果满足条件，则开始处理日志更新。\n   - 将`Xus_LOG_VIEWPORT.UPDATE`标志设置为`FALSE`，表示开始处理更新。\n   - 使用`FOR`循环遍历日志信息，从`1`到`Xus_LOG_VIEWPORT.COUNT`。\n   - 在循环中，从`Xus_LOG_VIEWPORT.LINE_ARRAY`中获取当前日志的索引`in_index`。\n   - 从`Xus_LOG_CONTROL.MSG_OPTION`中提取颜色值`in_Color`，并将其转换为整数。\n   - 使用`CASE`语句根据颜色值选择属性字节`by_Attr`：\n     - 如果颜色值在`0..3`范围内，则从`Idw_ATTR_1`中提取属性字节。\n     - 如果颜色值在`4..7`范围内，则从`Idw_ATTR_2`中提取属性字节。\n     - 否则，使用默认值（`Idw_ATTR_1`的第0字节）。\n   - 调用`FB_TN_SC_WRITE`功能块，将日志信息写入屏幕。传入的参数包括Y坐标、X坐标、属性字节和格式化后的日志字符串。\n   - 在循环结束后，重置定时器`FB_TON`，并设置定时器的时间为`Iti_TIME`。\n-- REGION 定时器控制\n   此区域控制定时器的启动和运行。\n   - 将定时器`FB_TON`的输入`IN`设置为`TRUE`，启动定时器。\n   - 设置定时器的时间为`Iti_TIME`。\n   - 调用定时器实例`FB_TON()`，使其运行。\n\n- 输出结果\n代码的主要功能是将日志信息显示在屏幕上。通过定时器控制更新频率，并根据日志的颜色属性选择不同的显示属性。最终，日志信息被格式化并写入屏幕的指定位置。", "name": "TN_SC_VIEWPORT"}