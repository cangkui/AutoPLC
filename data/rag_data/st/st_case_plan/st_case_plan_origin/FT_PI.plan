{"variables": [], "instructions": [], "planning": "- 概述\n  该功能块 `FT_PI` 实现了一个比例积分（PI）控制器。它通过比例项和积分项的组合来计算输出值，并支持积分限幅和复位功能。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：输入值 `IN`、比例增益 `KP`、积分增益 `KI`、积分下限 `ILIM_L`、积分上限 `ILIM_H`、积分使能 `IEN`、复位信号 `RST`。\n  - 输出变量：输出值 `Y`、限幅标志 `LIM`。\n  - 内部变量：积分器实例 `integ`，用于执行积分运算。\n\n- 主逻辑部分\n  -- REGION 积分器调用\n    调用积分器功能块 `FT_INT` 来计算积分项。积分器的输入包括：\n    - `IN`：输入值，作为积分器的输入。\n    - `K`：积分增益 `KI`，用于调整积分作用。\n    - `RUN`：积分使能 `IEN`，控制是否执行积分运算。\n    - `RST`：复位信号 `RST`，用于重置积分器。\n    - `OUT_MIN` 和 `OUT_MAX`：积分下限 `ILIM_L` 和上限 `ILIM_H`，用于限制积分输出范围。\n    积分器的输出结果存储在 `integ.Out` 中，同时积分器的限幅标志 `integ.LIM` 被赋值给 `LIM`。\n\n  -- REGION 输出计算\n    计算 PI 控制器的输出值 `Y`，公式为：\n    ```\n    Y = KP * IN + integ.Out\n    ```\n    其中：\n    - `KP * IN` 是比例项，直接与输入值 `IN` 成比例。\n    - `integ.Out` 是积分项，由积分器计算得到。\n    最终输出值 `Y` 是比例项和积分项的和。\n\n  -- REGION 限幅标志传递\n    将积分器的限幅标志 `integ.LIM` 传递给输出变量 `LIM`，用于指示积分输出是否达到限幅范围。\n\n- 总结\n  该功能块通过比例项和积分项的组合实现了一个简单的 PI 控制器。积分器支持限幅和复位功能，输出值 `Y` 是比例项和积分项的和，限幅标志 `LIM` 用于指示积分输出是否达到限幅范围。", "name": "FT_PI"}