{"variables": [], "instructions": [], "planning": "- 概述\n  这个功能块 `CTRL_PID` 实现了一个带有手动/自动切换和输出限制的PID控制器。它通过调用两个子功能块 `FT_PIDWL` 和 `CTRL_OUT` 来完成PID控制和输出处理。输入包括实际值、设定值、偏差、偏移量、手动输入值、手动模式、复位信号以及PID参数。输出包括控制输出、偏差值和限制标志。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：实际值（`ACT`）、设定值（`SET`）、偏差（`SUP`）、偏移量（`OFS`）、手动输入值（`M_I`）、手动模式（`MAN`）、复位信号（`RST`）、比例增益（`KP`）、积分时间（`TN`）、微分时间（`TV`）、输出下限（`LL`）、输出上限（`LH`）。\n  - 输出变量：控制输出（`Y`）、偏差值（`DIFF`）、限制标志（`LIM`）。\n  - 内部变量：PID控制器实例（`pid`）、输出控制器实例（`co`）。\n\n- 主逻辑部分\n  -- REGION 偏差计算\n    首先，通过调用 `CTRL_IN` 函数计算设定值与实际值之间的偏差，并将结果存储在 `DIFF` 变量中。这个偏差值将作为PID控制器的输入。\n  -- REGION PID控制\n    接下来，调用 `FT_PIDWL` 功能块（`pid`）进行PID控制。输入参数包括偏差值（`in`）、比例增益（`kp`）、积分时间（`tn`）、微分时间（`tv`）、输出下限（`lim_l`）、输出上限（`lim_h`）和复位信号（`rst`）。PID控制器的输出存储在 `pid.Y` 中。\n  -- REGION 输出处理\n    然后，调用 `CTRL_OUT` 功能块（`co`）处理PID控制器的输出。输入参数包括PID输出（`ci`）、偏移量（`OFFSET`）、手动输入值（`man_in`）、输出下限（`lim_l`）、输出上限（`lim_h`）和手动模式（`MANUAL`）。输出控制器的输出存储在 `co.Y` 中，限制标志存储在 `co.LIM` 中。\n  -- REGION 输出赋值\n    最后，将输出控制器的输出赋值给功能块的输出变量 `Y`，并将限制标志赋值给 `LIM`。", "name": "CTRL_PID"}