{"variables": [], "instructions": [], "planning": "- 概述\n这段代码实现了一个名为 `EASTER` 的函数，用于计算给定年份的复活节日期。复活节日期的计算基于高斯算法，该算法通过一系列数学运算确定复活节在公历中的具体日期。\n\n- 变量定义\n代码中定义了以下几类变量：\n  - 输入变量：`year`，表示需要计算复活节日期的年份。\n  - 局部变量：\n    - `b`：用于存储中间计算结果，与年份和模数运算相关。\n    - `c`：用于存储中间计算结果，与年份、位移运算和模数运算相关。\n    - `oday`：用于存储复活节在3月或4月中的日期偏移量。\n\n- 主逻辑部分\n  -- REGION 计算复活节日期\n    1. 计算变量 `b`：\n       - 使用公式 `(204 - 11 * (year MOD 19)) MOD 30` 计算 `b` 的初始值。\n       - 如果 `b` 大于 27，则将 `b` 减去 1。这一步是为了调整某些特殊情况下的结果。\n    2. 计算变量 `c`：\n       - 使用公式 `(year + SHR(year, 2) + b - 13) MOD 7` 计算 `c` 的值。`SHR(year, 2)` 表示将 `year` 右移两位，相当于 `year / 4`。\n    3. 计算变量 `oday`：\n       - 使用公式 `28 + b - c` 计算 `oday` 的值。`oday` 表示复活节在3月或4月中的日期偏移量。\n    4. 确定复活节日期：\n       - 如果 `oday` 大于 33，则复活节日期为4月的 `oday - 31` 日。\n       - 否则，复活节日期为3月的 `oday` 日。\n    5. 返回结果：\n       - 使用 `SET_DATE` 函数将计算出的日期封装为 `DATE` 类型，并作为函数的返回值。\n\n- 输出结果\n函数返回一个 `DATE` 类型的值，表示给定年份的复活节日期。该日期通过高斯算法计算得出，并考虑了公历中的规则和特殊情况。", "name": "EASTER"}