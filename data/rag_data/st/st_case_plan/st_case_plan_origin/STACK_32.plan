{"variables": [], "instructions": [], "planning": "- 概述\n  这个功能块 `STACK_32` 实现了一个栈（Stack）数据结构，栈的大小可以通过常量 `n` 来配置（默认大小为 32）。栈支持基本的入栈（Push）、出栈（Pop）、重置（Reset）操作，并提供了栈空（EMPTY）和栈满（FULL）的状态指示。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：\n    - `Din`：输入数据（32位无符号整数）。\n    - `E`：使能信号，控制栈操作的执行。\n    - `RD`：出栈信号，触发从栈中读取数据。\n    - `WD`：入栈信号，触发将数据写入栈。\n    - `RST`：重置信号，清空栈并重置状态。\n  - 输出变量：\n    - `Dout`：输出数据，表示从栈中读取的值。\n    - `EMPTY`：栈空标志，表示栈是否为空。\n    - `FULL`：栈满标志，表示栈是否已满。\n  - 内部变量：\n    - `stack`：一个数组，用于存储栈中的数据。\n    - `pt`：栈指针，指向栈顶的下一个位置。\n  - 常量：\n    - `n`：栈的最大容量，默认值为 31（表示栈的大小为 32）。\n\n- 主逻辑部分\n  -- REGION 重置逻辑\n    当 `RST` 信号为真时，执行重置操作：\n    - 将栈指针 `pt` 重置为 0。\n    - 设置 `EMPTY` 为真，表示栈为空。\n    - 设置 `FULL` 为假，表示栈未满。\n    - 将输出 `Dout` 重置为 0。\n\n  -- REGION 栈操作逻辑\n    当 `E` 信号为真时，执行栈操作：\n    - 出栈操作（`RD` 为真且栈不为空）：\n      - 将栈指针 `pt` 减 1。\n      - 将栈顶元素赋值给 `Dout`。\n      - 更新 `EMPTY` 和 `FULL` 标志：\n        - 如果 `pt` 为 0，设置 `EMPTY` 为真。\n        - 设置 `FULL` 为假。\n    - 入栈操作（`WD` 为真且栈未满）：\n      - 将输入数据 `Din` 写入栈顶（`stack[pt]`）。\n      - 将栈指针 `pt` 加 1。\n      - 更新 `EMPTY` 和 `FULL` 标志：\n        - 如果 `pt` 超过 `n`，设置 `FULL` 为真。\n        - 设置 `EMPTY` 为假。\n\n  -- REGION 状态更新\n    在每次操作后，根据栈指针 `pt` 的值更新 `EMPTY` 和 `FULL` 标志：\n    - `EMPTY` 为真当且仅当 `pt` 为 0。\n    - `FULL` 为真当且仅当 `pt` 超过 `n`。", "name": "STACK_32"}