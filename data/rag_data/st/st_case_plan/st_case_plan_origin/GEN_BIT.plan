{"variables": [], "instructions": [], "planning": "- 概述\n  这个功能块 `GEN_BIT` 用于生成一系列位信号，基于输入的四个32位无符号整数（`in0`, `in1`, `in2`, `in3`）。它通过时钟信号（`clk`）逐步输出这些位，并支持重复次数（`rep`）和步数（`steps`）的控制。功能块还提供了复位功能（`rst`），用于重置所有内部状态和输出。\n\n- 变量定义\n  - 输入变量：包括四个32位无符号整数（`in0`, `in1`, `in2`, `in3`）、时钟信号（`clk`）、步数（`steps`）、重复次数（`rep`）和复位信号（`rst`）。\n  - 输出变量：包括四个布尔值（`Q0`, `Q1`, `Q2`, `Q3`）、当前步数计数器（`cnt`）和运行状态（`run`）。\n  - 内部变量：包括四个32位无符号整数（`r0`, `r1`, `r2`, `r3`）和一个重复计数器（`rx`）。\n\n- 主逻辑部分\n  -- REGION 主逻辑\n     - 如果时钟信号（`clk`）为真且复位信号（`rst`）为假，则功能块开始运行。\n     - 首先，检查运行状态（`run`），如果重复次数（`rep`）为0或重复计数器（`rx`）小于等于重复次数，则功能块继续运行。\n     - 如果当前步数计数器（`cnt`）等于步数（`steps`），则重置计数器为0。\n     - 如果当前步数计数器（`cnt`）为0，则将输入值（`in0`, `in1`, `in2`, `in3`）加载到内部寄存器（`r0`, `r1`, `r2`, `r3`）。\n     - 如果当前步数计数器（`cnt`）小于步数（`steps`），则输出内部寄存器的最低位（`r0.0`, `r1.0`, `r2.0`, `r3.0`），并将寄存器右移一位。\n     - 增加步数计数器（`cnt`），如果步数计数器等于步数且重复次数不为0，则增加重复计数器（`rx`）。\n     - 如果重复计数器（`rx`）大于重复次数且重复次数不为0，则停止运行。\n  -- REGION 复位逻辑\n     - 如果复位信号（`rst`）为真，则重置所有输出和内部变量，包括运行状态（`run`）、输出信号（`Q0`, `Q1`, `Q2`, `Q3`）、内部寄存器（`r0`, `r1`, `r2`, `r3`）、步数计数器（`cnt`）和重复计数器（`rx`）。", "name": "GEN_BIT"}