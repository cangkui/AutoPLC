{"variables": [], "instructions": [], "planning": "- 概述\n  这是一个名为 `PARITY` 的函数，用于计算输入 `DWORD` 类型的变量 `in` 的奇偶校验位。奇偶校验位用于检测数据在传输过程中是否发生了错误。该函数通过逐位异或操作来计算奇偶校验位。\n\n- 变量定义\n  代码中定义了以下几类变量：\n  - 输入变量：`in`，类型为 `DWORD`，表示需要计算奇偶校验位的数据。\n  - 局部变量：`PARITY`，类型为 `BOOL`，用于存储最终的奇偶校验位结果。\n\n- 主逻辑部分\n  -- REGION 主逻辑：\n     - 初始化：`PARITY` 初始值为 `FALSE`（默认值）。\n     - 循环处理：使用 `WHILE` 循环逐位处理 `in` 的每一位。\n       1. 通过 `in.0`, `in.1`, `in.2`, `in.3` 分别获取 `in` 的最低 4 位。\n       2. 将这些位与 `PARITY` 进行异或操作，结果存储回 `PARITY`。\n       3. 使用 `SHR` 函数将 `in` 右移 4 位，继续处理下一个 4 位。\n     - 结束条件：当 `in` 的值为 0 时，循环结束。\n     - 返回值：`PARITY` 作为函数的输出，表示输入 `in` 的奇偶校验位。\n\n- 算法流程\n  1. 初始化 `PARITY` 为 `FALSE`。\n  2. 进入 `WHILE` 循环，检查 `in` 是否大于 0。\n  3. 对 `in` 的最低 4 位进行异或操作，更新 `PARITY`。\n  4. 将 `in` 右移 4 位，继续处理下一个 4 位。\n  5. 重复步骤 2-4，直到 `in` 的值为 0。\n  6. 返回 `PARITY` 作为结果。\n\n- 输出结果\n  函数返回一个 `BOOL` 类型的值 `PARITY`，表示输入 `in` 的奇偶校验位。如果 `PARITY` 为 `TRUE`，则表示 `in` 的二进制表示中有奇数个 `1`；如果 `PARITY` 为 `FALSE`，则表示 `in` 的二进制表示中有偶数个 `1`。", "name": "PARITY"}