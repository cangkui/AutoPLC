{"variables": [], "instructions": [], "planning": "- 概述\n该函数名为 `HTML_DECODE`，用于解码包含 HTML 实体编码的字符串。它将 HTML 实体（如 `&amp;`、`&#x20;` 等）转换为对应的字符，并返回解码后的字符串。\n\n- 变量定义\n代码中定义了以下几类变量：\n  - 输入变量：`IN`，类型为 `STRING`，表示需要解码的字符串。\n  - 局部变量：\n    - `pos`：类型为 `INT`，用于存储当前找到的 HTML 实体起始位置（`&` 的位置）。\n    - `end`：类型为 `INT`，用于存储 HTML 实体的结束位置（`;` 的位置）。\n    - `tmp`：类型为 `STRING(10)`，用于临时存储提取的 HTML 实体部分。\n    - `code`：类型为 `STRING(1)`，用于存储解码后的字符。\n\n- 主逻辑部分\n  -- REGION 初始化\n    函数首先将输入字符串 `IN` 赋值给输出变量 `HTML_DECODE`，作为初始值。\n  \n  -- REGION 查找 HTML 实体\n    使用 `FIND` 函数查找字符串中第一个 `&` 的位置，并将其存储在 `pos` 中。如果找到 `&`（即 `pos > 0`），则进入循环处理。\n\n  -- REGION 处理 HTML 实体\n    循环中，根据 `&` 的位置，提取 HTML 实体的部分内容到 `tmp` 中，并进一步处理：\n    - 如果 `tmp` 以 `#x` 或 `#X` 开头，表示是十六进制编码的 HTML 实体（如 `&#x20;`）：\n      1. 提取十六进制值部分。\n      2. 使用 `OSCAT_BASIC.HEX_TO_DWORD` 将十六进制值转换为 DWORD 类型。\n      3. 使用 `OSCAT_BASIC.CHR_TO_STRING` 将 DWORD 转换为对应的字符。\n      4. 使用 `REPLACE` 函数将 HTML 实体替换为解码后的字符。\n    - 如果 `tmp` 以 `#` 开头，表示是十进制编码的 HTML 实体（如 `&#32;`）：\n      1. 提取十进制值部分。\n      2. 使用 `STRING_TO_INT` 将字符串转换为整数。\n      3. 使用 `OSCAT_BASIC.CHR_TO_STRING` 将整数转换为对应的字符。\n      4. 使用 `REPLACE` 函数将 HTML 实体替换为解码后的字符。\n    - 否则，表示是命名实体（如 `&amp;`）：\n      1. 提取实体名称部分。\n      2. 使用 `OSCAT_BASIC.CHARCODE` 将实体名称转换为对应的字符。\n      3. 使用 `REPLACE` 函数将 HTML 实体替换为解码后的字符。\n\n  -- REGION 继续查找下一个 HTML 实体\n    使用 `OSCAT_BASIC.FINDP` 函数查找下一个 `&` 的位置，并更新 `pos`。如果找到，则继续循环处理；否则，退出循环。\n\n  -- REGION 返回解码后的字符串\n    循环结束后，返回解码后的字符串 `HTML_DECODE`。\n\n- 总结\n该函数通过查找并解码 HTML 实体，将编码字符串转换为可读的字符。它支持三种类型的 HTML 实体：十六进制编码、十进制编码和命名实体。通过循环处理所有实体，最终返回完全解码的字符串。", "name": "HTML_DECODE"}