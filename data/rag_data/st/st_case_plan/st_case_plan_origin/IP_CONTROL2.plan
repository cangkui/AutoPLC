{"variables": [], "instructions": [], "planning": "- 概述\n该功能块名为“IP_CONTROL2”，用于管理和控制基于TCP/UDP的网络通信。它处理连接、发送和接收数据，并监控超时和错误状态。功能块通过状态机来管理网络连接的生命周期，并提供了对连接状态的实时反馈。\n\n- 变量定义\n代码中定义了以下几类变量：\n - 输入/输出变量：IP_C（IP控制管理结构）、S_BUF（外部发送缓冲区）、R_BUF（外部接收缓冲区）\n - 输入变量：IP（IP地址）、PORT（端口号）、TIME_OUT（连接/发送/接收的超时时间）\n - 内部变量：用于跟踪连接、发送和接收的时间、状态、缓冲区位置等\n - 常量：用于定义状态机的状态和错误代码\n\n- - 主逻辑部分\n-- REGION 初始化\n   此区域处理功能块的初始化逻辑。首先，获取当前的系统时间（`tx := OSCAT_BASIC.T_PLC_MS()`）。然后，检查IP_C结构中的端口（`IP_C.C_PORT`）是否已设置，如果没有，则使用输入参数`PORT`进行初始化。接着，检查IP_C结构中的IP地址（`IP_C.C_IP`）是否已设置，并且连接模式（`IP_C.C_MODE`）小于4，如果没有，则使用输入参数`IP`进行初始化。之后，检查是否有新的连接参数（IP、端口或模式变化），通过比较当前连接参数（`c_ip`, `c_mode`, `c_port`）与IP_C结构中的参数（`IP_C.C_IP`, `IP_C.C_MODE`, `IP_C.C_PORT`）。如果有变化，则设置`new_connection`为真。最后，设置连接使能标志`c_enable`，如果IP_C结构中的`C_ENABLE`为真且没有新的连接参数，则使能连接。\n\n   如果功能块使能（`IP_C.C_ENABLE`为真）、没有错误（`IP_C.ERROR`为0），并且当前状态为“STOP”，则初始化连接参数。这包括设置当前IP地址（`c_ip`）、连接模式（`c_mode`）和端口号（`c_port`）。然后，根据连接模式设置状态机的初始状态：\n   - 如果连接模式为UDP（`C_MODE.0`为真），则进入`UDP_INIT`状态。\n   - 如果连接模式为TCP（`C_MODE`为0），则进入`TC_INIT`状态。\n   - 否则，进入`TS_INIT`状态（TCP服务器模式）。\n\n   此外，初始化接收缓冲区和发送缓冲区的大小，并设置错误超时时间（`error_time`）为`TIME_OUT`和200ms中的较大值。\n\n-- REGION 超时重置\n   此区域处理超时重置逻辑。如果IP_C结构中的`TIME_RESET`标志为真，则重置连接时间（`c_time`）、发送时间（`s_time`）和接收时间（`r_time`）为当前时间（`tx`），并清除连接、发送和接收的状态和错误代码（`c_status`, `s_status`, `r_status`）。\n\n-- REGION 状态机\n   此区域实现了功能块的状态机，用于管理网络连接的生命周期。状态机根据当前状态执行不同的逻辑：\n   - **UDP_INIT**：初始化UDP连接。首先，创建UDP套接字（`socket := SysSockCreate(SOCKET_AF_INET, SOCKET_DGRAM, SOCKET_IPPROTO_IP)`）。如果套接字创建失败（`socket < 0`），则设置连接错误状态（`c_status := 1`）并进入关闭状态（`C_CLOSE`）。如果成功，则设置套接字选项（`SysSockSetOption`和`SysSockIoctl`），并初始化套接字地址结构（`sockaddr`）。如果连接模式为UDP服务器（`c_mode >= 2`），则绑定套接字（`SysSockBind`）。如果绑定成功，则设置连接就绪标志（`c_ready := TRUE`）并进入等待状态（`C_WAIT`）；否则，设置连接错误状态（`c_status := 2`）并进入关闭状态（`C_CLOSE`）。\n\n   - **TC_INIT**：初始化TCP连接。首先，创建TCP套接字（`socket := SysSockCreate(SOCKET_AF_INET, SOCKET_STREAM, SOCKET_IPPROTO_IP)`）。如果套接字创建失败（`socket < 0`），则设置连接错误状态（`c_status := 1`）并进入关闭状态（`C_CLOSE`）。如果成功，则设置套接字选项（`SysSockSetOption`和`SysSockIoctl`），并初始化套接字地址结构（`sockaddr`）。然后，进入连接状态（`TC_CONNECT`）。\n\n   - **TC_CONNECT**：尝试建立TCP连接。如果连接未使能（`NOT c_enable`）或连接错误状态为255，则进入关闭状态（`C_CLOSE`）。否则，尝试连接（`SysSockConnect`）。如果连接成功，则设置连接就绪标志（`c_ready := TRUE`）并进入等待状态（`C_WAIT`）；否则，设置非阻塞模式（`c_select := SYSLIBSOCKETS_OPTION.0`）并等待连接完成。\n\n   - **TS_INIT**：初始化TCP服务器连接。首先，创建服务器套接字（`server_socket := SysSockCreate(SOCKET_AF_INET, SOCKET_STREAM, SOCKET_IPPROTO_IP)`）。如果套接字创建失败（`server_socket = SOCKET_INVALID`），则设置连接错误状态（`c_status := 1`）并进入关闭状态（`C_CLOSE`）。如果成功，则设置套接字选项（`SysSockSetOption`），并初始化套接字地址结构（`sockaddr`）。然后，绑定套接字（`SysSockBind`）并开始监听（`SysSockListen`）。如果绑定或监听失败，则设置连接错误状态（`c_status := 2`或`c_status := 3`）并进入关闭状态（`C_CLOSE`）；否则，进入打开状态（`TS_OPEN`）。\n\n   - **TS_OPEN**：等待客户端连接。首先，接受客户端连接（`socket := SysSockAccept(server_socket, ADR(sockaddr), ADR(sockaddr_size))`）。如果连接成功（`socket <> SOCKET_INVALID`），则设置连接就绪标志（`c_ready := TRUE`）并进入等待状态（`C_WAIT`）；否则，检查是否需要关闭连接（`NOT c_enable`）。\n\n   - **C_WAIT**：等待状态，监控连接是否仍然有效。如果连接未使能（`NOT c_enable`）或连接未就绪（`NOT c_ready`），则进入关闭状态（`C_CLOSE`）。\n\n   - **C_CLOSE**：关闭连接，释放套接字资源。首先，关闭客户端套接字（`SysSockClose(socket)`），然后关闭服务器套接字（`SysSockClose(server_socket)`）。最后，返回到“STOP”状态。\n\n-- REGION 连接状态反馈\n   此区域处理连接状态的反馈。如果连接已建立（`c_ready`为真），则设置IP_C结构中的连接状态为“已连接”（`IP_C.C_STATE := 254`），并重置时间（`IP_C.TIME_RESET := TRUE`）。如果连接断开（`NOT c_ready`），则设置连接状态为“未连接”（`IP_C.C_STATE := 1`），并重置相关变量（`IP_C.MAILBOX`和发送缓冲区）。\n\n-- REGION 数据接收\n   此区域处理数据接收逻辑。如果连接已建立且没有发送操作正在进行（`NOT s_active`），则从套接字接收数据并存储到接收缓冲区中。如果接收成功，则更新接收时间（`r_time := tx`）和接收计数（`IP_C.MAILBOX[1]`）；如果接收失败，则设置错误状态（`c_status := 253`）并断开连接（`c_ready := FALSE`）。\n\n-- REGION 数据发送\n   此区域处理数据发送逻辑。如果发送缓冲区中有数据（`S_BUF.SIZE > 0`）且连接已建立（`c_ready`为真），则开始发送数据。发送完成后，更新发送时间（`s_time := tx`）和发送计数；如果发送失败，则设置错误状态（`c_status := 253`）并断开连接（`c_ready := FALSE`）。\n\n-- REGION 超时监控\n   此区域监控连接、发送和接收的超时状态。如果任何操作超时（`tx - c_time > error_time`或`tx - s_time > error_time`或`tx - r_time > error_time`），则设置相应的错误状态（`c_status := 255`, `s_status := 255`, `r_status := 255`）。\n\n-- REGION 错误处理\n   此区域将连接、发送和接收的错误代码合并，并存储在IP_C结构中的ERROR字段中，供外部使用（`IP_C.ERROR := OSCAT_BASIC.DWORD_OF_BYTE(c_status, s_status, r_status, 0)`）。", "name": "IP_CONTROL2"}