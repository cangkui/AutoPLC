{"variables": [], "instructions": [], "planning": "- 概述\n该函数 `BIT_LOAD_B2` 是一个用于处理字节位操作的函数。根据输入参数 `D` 的值，函数会执行不同的位操作，最终返回一个经过处理的字节。\n\n- 变量定义\n代码中定义了以下几类变量：\n  - 输入变量：\n    - `I`：一个字节（BYTE），表示待处理的原始数据。\n    - `D`：一个布尔值（BOOL），用于决定执行哪种位操作。\n    - `P`：一个整数（INT），表示旋转的位数。\n    - `N`：一个整数（INT），表示移位的位数。\n\n- 主逻辑部分\n  - 函数的核心逻辑是根据输入参数 `D` 的值选择不同的位操作：\n    - 如果 `D` 为 `TRUE`，则执行以下操作：\n      1. `SHR(BYTE#255, 8 - N)`：将字节 `255` 向右移动 `8 - N` 位，得到一个掩码。\n      2. `ROR(I, P)`：将输入字节 `I` 向右旋转 `P` 位。\n      3. 将步骤 1 和步骤 2 的结果进行按位或操作（`OR`），得到一个新的字节。\n      4. 最后，将结果向左旋转 `P` 位（`ROL`），得到最终的输出字节。\n    - 如果 `D` 为 `FALSE`，则执行以下操作：\n      1. `SHL(BYTE#255, N)`：将字节 `255` 向左移动 `N` 位，得到一个掩码。\n      2. `ROR(I, P)`：将输入字节 `I` 向右旋转 `P` 位。\n      3. 将步骤 1 和步骤 2 的结果进行按位与操作（`AND`），得到一个新的字节。\n      4. 最后，将结果向左旋转 `P` 位（`ROL`），得到最终的输出字节。\n\n  - 输出结果\n    - 函数返回一个经过位操作处理的字节，具体结果取决于输入参数 `D` 的值以及 `P` 和 `N` 的值。", "name": "BIT_LOAD_B2"}