{"variables": [], "instructions": [], "planning": "- 概述\n这是一个名为 `ALARM_2` 的功能块，用于实现基于输入值 `X` 的双重报警逻辑。它通过比较 `X` 与四个阈值（`LO_1`、`HI_1`、`LO_2`、`HI_2`）以及考虑滞后值 `HYS`，生成四个布尔输出信号，分别表示低阈值 1、高阈值 1、低阈值 2 和高阈值 2 的报警状态。\n\n- 变量定义\n  - 输入变量：`X`（待比较的值）、`LO_1`（低阈值 1）、`HI_1`（高阈值 1）、`LO_2`（低阈值 2）、`HI_2`（高阈值 2）、`HYS`（滞后值）。\n  - 输出变量：`Q1_LO`（低阈值 1 报警状态）、`Q1_HI`（高阈值 1 报警状态）、`Q2_LO`（低阈值 2 报警状态）、`Q2_HI`（高阈值 2 报警状态）。\n  - 内部变量：`tmp`（用于存储计算过程中的临时值）。\n\n- 主逻辑部分\n  - 第一步：计算临时值 `tmp`，公式为 `tmp := X - Hys * 0.5`。这是为了引入滞后效应，防止在阈值附近频繁切换报警状态。\n  - 第二步：比较 `tmp` 与低阈值和高阈值，并更新报警状态：\n    - 如果 `tmp > LO_1`，则清除低阈值 1 报警（`Q1_LO := FALSE`）。\n    - 如果 `tmp > LO_2`，则清除低阈值 2 报警（`Q2_LO := FALSE`）。\n    - 如果 `tmp > HI_1`，则触发高阈值 1 报警（`Q1_HI := TRUE`）。\n    - 如果 `tmp > HI_2`，则触发高阈值 2 报警（`Q2_HI := TRUE`）。\n  - 第三步：更新临时值 `tmp`，公式为 `tmp := tmp + hys`。这是为了在相反方向上引入滞后效应。\n  - 第四步：再次比较 `tmp` 与低阈值和高阈值，并更新报警状态：\n    - 如果 `tmp < LO_1`，则触发低阈值 1 报警（`Q1_LO := TRUE`）。\n    - 如果 `tmp < LO_2`，则触发低阈值 2 报警（`Q2_LO := TRUE`）。\n    - 如果 `tmp < HI_1`，则清除高阈值 1 报警（`Q1_HI := FALSE`）。\n    - 如果 `tmp < HI_2`，则清除高阈值 2 报警（`Q2_HI := FALSE`）。\n\n- 总结\n该功能块通过引入滞后值 `HYS`，实现了对输入值 `X` 的双重报警逻辑。滞后值的引入可以有效避免在阈值附近频繁切换报警状态，从而提高系统的稳定性。输出信号 `Q1_LO`、`Q1_HI`、`Q2_LO` 和 `Q2_HI` 分别表示低阈值 1、高阈值 1、低阈值 2 和高阈值 2 的报警状态。", "name": "ALARM_2"}