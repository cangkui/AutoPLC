{
    "title": "INI Parser Buffer Module",
    "description": "INI_PARSER_BUF enables the analysis of elements of a INI fle \n\nstored in a Byte-Array . Before queries can be processed the user must fll \n\nthe byte array PT.BUFFER with the ini data, and the number of bytes has to \n\nbe stored in PT.SIZE. The search for elements always begins on the given \n\ndepended \"OFFSET\", and hence is very easy to look only at certain \n\npositions, or to repeat the search from a specifc section to browse not \n\nalways the entire byte array. At the initial search should start default to \n\nOFFSET 0 (but may not!). When querying sections and keys, there are \n\nvarious procedures. Either it is queried to a Section and evaluates all of \n\nthe following keys by individual queries, or to use in very large \n\ninitialization fle the classic enumeration (listing), which means it will be \n\nreport serially all the elements, and processed by the application.\n\nSection Search:\n\nTo determine the OFFSET of a specifc Section, STR must declare the name \n\nof the Section and the ofset can be set to a position that is located before \n\nof the searched section. Should only the nearest available section be \n\nfound, at STR an empty sting must be passed. The search query is started \n\nby RUN = 1. The search will take diferent time, depending on the \n\nstructure and size of the INI data, it takes an indefnite number of cycles \n\nuntil a positive or negative result is achieved. Once the search is fnished, \n\nthe INI_PARSER_BUF sets the parameters of RUN to 0. RESULT passes the \n\nresult of the search to output. Upon successful search the name of the \n\nsection is shown at parameters KEY. And then the OFFSET parameter \n\npoints to the end of the section line. Thus, immediately after that the key \n\nevaluation can be continued, without having to manually change the \n\nOFFSET. \n\nKey Search:\n\nBefore a Key is evaluated, the OFFSET must have a correct value, this can \n\nbe done by manual set of OFFSET or by a previously executed Section \n\nsearch. Before running the query at STR the name of the key must be are \n\npassed. If an empty string STR is handed over, the next key found is \n\nreturned. RUN = 2 means the query can be started. Once the search is \n\n162 Version 1.21\n\nChapter 10. File-System\n\nfnished, the INI_PARSER_BUF sets the parameters of RUN to 0. With \n\nRESULT the search results will be issued. When in a query the key \n\nidentifed a new Section, this is reported by RESULT = 11. Upon successful \n\nsearch the output of the parameter KEY is the name of the found key , and \n\nVALUE is the key value. And then the OFFSET parameter points to the end \n\nof the key line. Thus, immediately after the next Key evaluation be \n\ncontinued, without having to manually change the OFFSET. \n\nEnumeration - see next item:\n\nFor very large amount of data of an initialization fle to be evaluated, with \n\na enumeration (list) the user program can be build simple, and the \n\nevaluation be carried out more quickly because here no line must be used \n\nmore than once. Before the start OFFSET must have a reasonable value, \n\nthe default case to 0. With RUN = 3 the evaluation is started. Once a \n\nsection or a key is found, it is also issued immediately. In a section KEY \n\nprints the name of the Section and RESULT = 1. With a found KEY, KEY has \n\nthe key name and VALUE is the key value, and RESULT= 2.\n\nIf in a query, the end of the data array is reached, this will be reported by \n\nRESULT = 10. \n\nRUN: Feature List\n\nRUN Function\n\n0 No function to perform - and last function has finished\n\n1 Specific section or evaluate next found section \n\n2 evaluate specific Key or Key found next \n\n3 evaluate next found element (section or key) \n\nRESULT: Result - Feedback\n\nRESULT Description\n\n1 Section found\n\n2 Key found\n\n5 Current query is still running - call module further cyclical!\n\n10 Nothing found - reached the end of data\n\n163 Version 1.21\n\nChapter 10. File-System\n\n11 Key not found - reached the end of Section",
    "type": "FUNCTION",
    "name": "INI_PARSER_BUF",
    "input": [
        {
            "name": "RUN",
            "type": "BYTE",
            "description": "Command code for the current action. 1 for section search, 2 for key search, 3 for enumeration."
        },
        {
            "name": "OFFSET",
            "type": "UDINT",
            "description": "Current file offset for the query."
        },
        {
            "name": "STR",
            "type": "STRING(STRING_LENGTH)",
            "description": "Name of the section or key to search for."
        },
        {
            "name": "PT",
            "type": "NETWORK_BUFFER",
            "description": "Read data buffer containing the INI file data."
        }
    ],
    "output": [
        {
            "name": "RESULT",
            "type": "BYTE",
            "description": "The result of the query indicating success or failure."
        },
        {
            "name": "KEY",
            "type": "STRING(STRING_LENGTH)",
            "description": "Name of the found section or key."
        },
        {
            "name": "VALUE",
            "type": "STRING(STRING_LENGTH)",
            "description": "Value associated with the found key."
        }
    ],
    "in/out": [],
    "return_value": {
        "type": null,
        "description": null
    }
}