FUNCTION_BLOCK FILE_BLOCK
VAR_IN_OUT
    MODE : BYTE;
    FILENAME : STRING;
    FSD : FILE_SERVER_DATA;
    PT : NETWORK_BUFFER;
END_VAR

VAR_INPUT
    POS : UDINT;
END_VAR

VAR_OUTPUT
    ERROR : BYTE;
    DATA : BYTE;
END_VAR

VAR
    step : INT;
    i : INT;
    data_start : UDINT;
    data_stop : UDINT;
END_VAR
CASE step OF
0:	IF MODE > 0 THEN
		ERROR := 0;
		IF FSD.FILE_OPEN AND (FSD.FILE_SIZE = 0 OR POS >= FSD.FILE_SIZE) THEN
			ERROR := 255;
			MODE := 0;
		ELSIF POS < data_start OR POS > data_stop OR NOT FSD.FILE_OPEN THEN (* Daten lesen notwendig *)
			FSD.FILENAME := FILENAME;
			FSD.MODE := 1; (* open + read *)
			FSD.OFFSET := POS;
			PT.SIZE := 65535; (* maximale anzahl lesen *);
			data_start := 0;
			data_stop := 0;
			step := 10;
		ELSE (* Daten sind im Buffer vorhanden *)
			i := UDINT_TO_INT(POS - data_start); (* index berechnen *)
			DATA := PT.BUFFER[i];
			MODE := 0;
			(* ---------------------- Debug-Message ----------------------------*)
			(*IF _debug_enable THEN
				LOG_CL.NEW_MSG := 'FB: Pos: ~1 Byte: ~2 >~3<';
				LOG_CL.PRINTF[1] := UDINT_TO_STRING(POS);
				LOG_CL.PRINTF[2] := BYTE_TO_STRING(DATA);
				LOG_CL.PRINTF[3] := CHR_TO_STRING(DATA);
				LOG_MSG();
			END_IF;*)
			(* -----------------------------------------------------------------*)
		END_IF;
	END_IF;

10:	IF FSD.MODE = 0 THEN (* Befehl beendet *)
		IF FSD.ERROR > 0 THEN
			ERROR := FSD.ERROR; (* Fehler ausgeben *)
			MODE := 0;
		ELSE
			data_start := POS;
			data_stop := POS + UINT_TO_UDINT(PT.SIZE) - 1;
		END_IF;
		step := 0;
	END_IF;
END_CASE;

(* revision history
ks	23. sep. 2010	rev 1.0
	original version
*)
END_FUNCTION_BLOCK
