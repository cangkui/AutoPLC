FUNCTION_BLOCK IP2GEO
VAR_IN_OUT
    IP_C : IP_C; // IP_Control Verwaltungsstruktur
    S_BUF : NETWORK_BUFFER;
    R_BUF : NETWORK_BUFFER;
    GEO : IP2GEO_DATA;
END_VAR

VAR_INPUT
    IP : DWORD;
    ACTIVATE : BOOL;
END_VAR

VAR_OUTPUT
    BUSY : BOOL;
    DONE : BOOL;
    ERROR_C : DWORD;
    ERROR_T : BYTE;
END_VAR

VAR
    CTRL : XML_CONTROL;
    XML_READER : XML_READER;
    URL_DATA : url;
    DNS_CLIENT : DNS_CLIENT;
    HTTP_GET : HTTP_GET;
    last_state : BOOL;
    value_int : INT;
    value_real : REAL;
    v_real : REAL;
    state : INT;
END_VAR
CASE state OF

00:
	IF ACTIVATE AND NOT last_state THEN
		state := 20;
		DONE := FALSE;
		BUSY := TRUE;
		ERROR_C := DWORD#0;
		ERROR_T := BYTE#0;
	END_IF;

20: (* URL for DNS UND HTTP-GET *)
	(* Example: http://ipinfodb.com/ip_query.php?ip=10.10.10.10 *)
	(* Example: http://ipinfodb.com/ip_query.php?timezone=true&IP=*)
	URL_DATA:=STRING_TO_URL(STR:='http://ipinfodb.com/ip_query.php?timezone=true&IP=',DEFAULT_PROTOCOL:='',DEFAULT_PATH:='');

	IF IP > DWORD#0 THEN
		URL_DATA.QUERY := CONCAT(URL_DATA.QUERY,IP4_TO_STRING(IP4:=IP));
	END_IF;

	state := 40;

40:
	IF DNS_CLIENT.DONE THEN
		state := 60;
	ELSIF (DNS_CLIENT.ERROR > DWORD#00) THEN
		(* Fehlerbehandlung *)
		ERROR_C := DNS_CLIENT.ERROR;
		ERROR_T := BYTE#01;
		state := 100;
	END_IF;

60:
	IF HTTP_GET.DONE THEN
		state := 80;
		CTRL.START_POS := HTTP_GET.BODY_START;
		CTRL.STOP_POS := HTTP_GET.BODY_STOP;
		CTRL.COMMAND := WORD#2#10000000_00011000; (* ONLY TEXT AND ATTRIBUTE *)
		CTRL.WATCHDOG := T#1ms;

	ELSIF (HTTP_GET.ERROR > DWORD#00) THEN
		(* Fehlerbehandlung *)
		ERROR_C := HTTP_GET.ERROR;
		ERROR_T := BYTE#02;
		state := 100;
	END_IF;

80:
	(* XML Daten seriell lesen *)
	XML_READER(CTRL:=CTRL,BUF:=R_BUF.BUFFER);
	IF CTRL.TYP < 98 THEN (* nur auswerten wenn kein Watchdog durchlauf *)
		(* automatische konvertierung in real und int ausf端hren *)
		value_int := 0;
		value_real := 0.0;
		IF LEN(CTRL.VALUE) <= 20 THEN
			v_real :=OSCAT_BASIC.FLOAT_TO_REAL(FLT:=CTRL.VALUE);
			IF OSCAT_BASIC.CHK_REAL(v_real) = 0 THEN (* !!! pr端ft auf g端ltigen REAL Wert, ansonsten st端rzt Twincat ab !!!!  *)
				value_real := v_real;
				value_int := REAL_TO_INT(value_real);
			END_IF;
		END_IF;

		CASE UINT_TO_INT(CTRL.COUNT) OF

		07: GEO.IP4 := IP4_DECODE(STR:=CTRL.VALUE); (* IP-Adresse *)
		10: GEO.STATE := 'OK' = CTRL.VALUE; (* STATUS *)
		13: GEO.COUNTRY_CODE := CTRL.VALUE; (* Country-Code *)
		16: GEO.COUNTRY_NAME := CTRL.VALUE; (* Country-Name *)
		19: GEO.REGION_CODE := CTRL.VALUE; (* Region-Code *)
		22: GEO.REGION_NAME := CTRL.VALUE; (* Region-Name *)
		25: GEO.CITY := CTRL.VALUE; (* City *)
		31: GEO.GEO_LATITUDE := value_real; (* Latitude *)
		34: GEO.GEO_LONGITUDE := value_real; (* Longitude *)
		37: GEO.TIME_ZONE_NAME := CTRL.VALUE; (* TimeZone Name *)
		40: GEO.GMT_OFFSET := value_int; (* GMT OFFSET in Sekunden *)
		43: GEO.IS_DST := value_int > 0; (* Sommerzeit aktiv *)
		END_CASE;

	ELSIF CTRL.TYP = 99 THEN (* EXIT - letztes Element gelesen *)
		DONE := TRUE;
		state := 100;
	END_IF;

100:
	(* UNLOCK HTTP DATA *)
	IF (NOT HTTP_GET.DONE) THEN
		state := 0;
		BUSY := FALSE;
		DONE := ERROR_T = BYTE#0;
	END_IF;

END_CASE;

(* ---------------- DNS --------------- *)
DNS_CLIENT(	IP_C:=IP_C,
			S_BUF:=S_BUF,
			R_BUF:=R_BUF,
			DOMAIN:=URL_DATA.DOMAIN,
			IP4_DNS:=DWORD#00,
			ACTIVATE:=state=40 (* DNS Start *)
			);

(* nicht oder nicht direkt verwendete Parameter *)
(* 	DWORD :=DNS_CLIENT.IP4;
	BOOL  :=DNS_CLIENT.DONE;
	BYTE  :=DNS_CLIENT.ERROR; *)
(* -------------------------------------*)

(* ------------- HTTP_GET --------------- *)
HTTP_GET(	IP_C:=IP_C,
			S_BUF:=S_BUF,
			R_BUF:=R_BUF,
			IP4:=DNS_CLIENT.IP4,
			GET:=state=60,
			MODE:=BYTE#2, (* HTTP 1.1 mit persistenter Verbindung *)
			UNLOCK_BUF:=state=100,
			URL_DATA:=URL_DATA
			);

(* nicht oder nicht direkt verwendete Parameter *)
(*	STRING := HTTP_GET.HTTP_STATUS;
	UINT :=HTTP_GET.HEADER_START;
	UINT :=HTTP_GET.HEADER_STOP;
	UINT :=HTTP_GET.BODY_START;
	UINT :=HTTP_GET.BODY_STOP;
	BOOL :=HTTP_GET.DONE;
	BYTE :=HTTP_GET.ERROR;
*)
(* -------------------------------------*)

last_state := ACTIVATE;

(* revision history
ks	14. aug. 2009	rev 1.0
	original version

ks	07. oct. 2010	rev 1.1
	new url , ip2geo fields , REAL_CHECK
*)
END_FUNCTION_BLOCK
