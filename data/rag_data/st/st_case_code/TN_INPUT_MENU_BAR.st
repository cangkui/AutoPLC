FUNCTION_BLOCK TN_INPUT_MENU_BAR
VAR
    FB_TN_INPUT_MENU_POPUP : TN_INPUT_MENU_POPUP;
    us_TN_MENU_POPUP : us_TN_MENU_POPUP;
    FB_TN_SC_WRITE_C : TN_SC_WRITE_C;
    in_ROW : INT;
    in_COL : INT;
    in_TITLE_Length : INT;
    st_MENU_BAR : STRING[OSCAT_BASIC.STRING_LENGTH];
    st_MENU_TITLE : STRING;
    in_Count : INT;
    in_Index : INT;
    by_New_KeyCode : BYTE;
    in_Scroll_Offset : INT;
    by_ATTR : BYTE;
    bo_Reset_Position : BOOL;
END_VAR

VAR_IN_OUT
    Xus_TN_MENU : us_TN_MENU;
    Xus_TN_SCREEN : us_TN_SCREEN;
END_VAR
(* sicherstellen das rechteck immer innerhalb screen positioniert wird *)

IF (Xus_TN_MENU.in_State = INT#00) AND (Xus_TN_MENU.bo_Create = TRUE) THEN
	Xus_TN_MENU.in_State := INT#01;
	Xus_TN_MENU.bo_Create := FALSE;
	Xus_TN_MENU.in_Menu_Selected := INT#00;
	Xus_TN_MENU.bo_Update := TRUE;
	bo_Reset_Position := TRUE;

	(* Menu-Bar - Hauptmenue *)
	st_MENU_BAR := ELEMENT_GET(SEP:=BYTE#37,POS:=0,ELEMENT:=Xus_TN_MENU.st_MENU_TEXT);

	(* Menu-Bar - Anzahl der Elemente bestimmen *)
	Xus_TN_MENU.in_Menu_E_Count := ELEMENT_COUNT(SEP:=BYTE#35,ELEMENT:=st_MENU_BAR);

END_IF;

(* Keycode ablegen *)
by_New_KeyCode := Xus_TN_SCREEN.by_Input_Exten_Code;

(* Popup-Menu Tastensteuerung (nur Cursor oben + unten zulassen *)
IF (by_New_KeyCode = BYTE#65) OR (by_New_KeyCode = BYTE#66) THEN
	us_TN_MENU_POPUP.by_Input_Exten_Code := by_New_KeyCode;
ELSE
	us_TN_MENU_POPUP.by_Input_Exten_Code := BYTE#00;
END_IF;

(* Escape *)
IF (by_New_KeyCode = BYTE#27) THEN
	(* Menu war inaktiv -> Escape -> Menu aktivieren *)
	IF (Xus_TN_MENU.in_State = INT#01) AND (Xus_TN_SCREEN.bo_Modal_Dialog = FALSE) THEN
		Xus_TN_MENU.in_State := INT#02;
		Xus_TN_MENU.bo_Update := TRUE;
		Xus_TN_MENU.in_Menu_Selected := INT#00;

		Xus_TN_SCREEN.bo_Menue_Bar_Dialog := TRUE;

		(* Menu war aktiv -> Escape -> Menu deaktivieren *)
	ELSIF (Xus_TN_MENU.in_State = INT#02) THEN
		us_TN_MENU_POPUP.bo_Destroy := TRUE;
		Xus_TN_MENU.bo_Update := TRUE;
		Xus_TN_MENU.in_State := INT#01;
		bo_Reset_Position := TRUE;

		Xus_TN_SCREEN.bo_Menue_Bar_Dialog := FALSE;
	END_IF;
END_IF;

(* Menu aktiv *)
IF (Xus_TN_MENU.in_State = INT#02) THEN

	(* Return *)
	IF (by_New_KeyCode = BYTE#13)  THEN
		us_TN_MENU_POPUP.bo_Destroy := TRUE;
		Xus_TN_MENU.bo_Update := TRUE;
		Xus_TN_MENU.in_State := INT#01;
		bo_Reset_Position := TRUE;
		Xus_TN_MENU.in_Menu_Selected := (Xus_TN_MENU.in_Cur_Menu_Item * INT#10) + Xus_TN_MENU.in_Cur_Sub_Item;
		Xus_TN_SCREEN.by_Input_Exten_Code := BYTE#00;

		Xus_TN_SCREEN.bo_Menue_Bar_Dialog := FALSE;

		(* Destroy-Befehl -> Popup-Menu beenden *)
	ELSIF (Xus_TN_MENU.bo_Destroy = TRUE) THEN
		us_TN_MENU_POPUP.bo_Destroy := TRUE;
		Xus_TN_MENU.bo_Update := TRUE;
		Xus_TN_MENU.in_State := INT#01;
		bo_Reset_Position := TRUE;
		Xus_TN_MENU.in_Menu_Selected := INT#00;
		Xus_TN_SCREEN.by_Input_Exten_Code := BYTE#00;

		Xus_TN_SCREEN.bo_Menue_Bar_Dialog := FALSE;

	END_IF;

	IF (by_New_KeyCode = BYTE#67) THEN (* Cursor rechts *)
		in_Scroll_Offset := INT#1;
		Xus_TN_MENU.bo_Update := TRUE;
		Xus_TN_SCREEN.by_Input_Exten_Code := BYTE#00;

	ELSIF (by_New_KeyCode = BYTE#68) THEN (* Cursor links *)
		in_Scroll_Offset := -1;
		Xus_TN_MENU.bo_Update := TRUE;
		Xus_TN_SCREEN.by_Input_Exten_Code := BYTE#00;
	END_IF;
END_IF;

IF bo_Reset_Position = TRUE THEN
	bo_Reset_Position := FALSE;
	Xus_TN_MENU.in_X_SM_old := -1;
	Xus_TN_MENU.in_Y_SM_old := -1;
	Xus_TN_MENU.in_X_SM_new := -1;
	Xus_TN_MENU.in_Y_SM_new := -1;
END_IF;

(* POPUP-Menu updaten *)
IF (Xus_TN_MENU.in_State > INT#00) AND (Xus_TN_MENU.bo_Update = TRUE) THEN

	Xus_TN_MENU.bo_Update := FALSE; 

	in_ROW := Xus_TN_MENU.in_Y;
	in_COL := Xus_TN_MENU.in_X;

	(* Scrolloffset *)
	IF in_Scroll_Offset <> INT#00 THEN
		Xus_TN_MENU.in_Cur_Menu_Item := OSCAT_BASIC.INC2(Xus_TN_MENU.in_Cur_Menu_Item,in_Scroll_Offset,1,Xus_TN_MENU.in_Menu_E_Count);
		in_Scroll_Offset := INT#00;
	ELSE
		(* Item = 0 und kein Scrolloffset *)
		IF (Xus_TN_MENU.in_Cur_Menu_Item = INT#00) THEN
			Xus_TN_MENU.in_Cur_Menu_Item := INT#01;
		END_IF;
	END_IF;

	(* alle Menutext zeichnen *)
	FOR in_Count := INT#01 TO Xus_TN_MENU.in_Menu_E_Count DO;

		(* Zeichenfarbe bestimmen *)
		IF (in_Count = Xus_TN_MENU.in_Cur_Menu_Item) AND (Xus_TN_MENU.in_State > INT#01 ) THEN
			by_ATTR := Xus_TN_MENU.by_Attr_mF;

			Xus_TN_MENU.in_Y_SM_new := in_ROW + INT#01;
			Xus_TN_MENU.in_X_SM_new := in_COL;

		ELSE
			by_ATTR := Xus_TN_MENU.by_Attr_oF;
		END_IF;

		st_MENU_TITLE := ELEMENT_GET(SEP:=BYTE#35,POS:=in_Count - 1,ELEMENT:=st_MENU_BAR);

		in_TITLE_Length := LEN(st_MENU_TITLE) + INT#02;

		FB_TN_SC_WRITE_C(	Iin_Y := in_ROW,
							Iin_X := in_COL,
							Iby_ATTR := by_ATTR,
							Iin_LENGTH := in_TITLE_Length,
							Iin_OPTION := INT#02,
							Ist_STRING := st_MENU_TITLE,
							Xus_TN_SCREEN := Xus_TN_SCREEN);

		in_COL := in_COL + in_TITLE_Length;

	END_FOR;
END_IF;

IF Xus_TN_MENU.in_X_SM_new <> Xus_TN_MENU.in_X_SM_old THEN

	(* SubMenu ist aktiv -> beenden                                     *)
	IF us_TN_MENU_POPUP.bo_Activ = TRUE THEN
		us_TN_MENU_POPUP.bo_Destroy := TRUE;

		(* Sub-Menu bearbeiten *)
		FB_TN_INPUT_MENU_POPUP(	Xus_TN_MENU_POPUP := us_TN_MENU_POPUP,
								Xus_TN_SCREEN := Xus_TN_SCREEN);
	END_IF;

	IF us_TN_MENU_POPUP.bo_Activ = FALSE THEN
		(* Popup-Menu zu aktuellen Menu parametrieren und ausf√ºhren         *)
		in_Index := Xus_TN_MENU.in_Cur_Menu_Item;

		us_TN_MENU_POPUP.in_Y := Xus_TN_MENU.in_Y_SM_new;
		us_TN_MENU_POPUP.in_X := Xus_TN_MENU.in_X_SM_new;
		us_TN_MENU_POPUP.by_Attr_mF := Xus_TN_MENU.by_Attr_mF;
		us_TN_MENU_POPUP.by_Attr_oF := Xus_TN_MENU.by_Attr_oF;
		us_TN_MENU_POPUP.st_Menu_Text := ELEMENT_GET(SEP:=BYTE#37,POS:=in_Index,ELEMENT:=Xus_TN_MENU.st_MENU_TEXT);
		us_TN_MENU_POPUP.bo_Create := TRUE;

		Xus_TN_MENU.in_X_SM_old := Xus_TN_MENU.in_X_SM_new;
		Xus_TN_MENU.in_Y_SM_old := Xus_TN_MENU.in_Y_SM_new;

	END_IF;
END_IF;

(* Popup-Menu zyklisch aufrufen *)
FB_TN_INPUT_MENU_POPUP(	Xus_TN_MENU_POPUP := us_TN_MENU_POPUP,
						Xus_TN_SCREEN := Xus_TN_SCREEN);

(* aktuelles Item vom Popup-Menu kopieren *)
Xus_TN_MENU.in_Cur_Sub_Item := us_TN_MENU_POPUP.in_Cur_Item;

(* Destroy-Befehl *)
IF (Xus_TN_MENU.in_State = INT#01) THEN
	IF (Xus_TN_MENU.bo_Destroy = TRUE) THEN
		Xus_TN_MENU.in_State := INT#00;
		Xus_TN_MENU.bo_Destroy := FALSE;
		Xus_TN_MENU.in_Cur_Menu_Item := INT#00;
		Xus_TN_MENU.in_Cur_Sub_Item := INT#00;
	END_IF;
END_IF;

(* revision history
ks	06. apr. 2011	rev 1.1
	list_len und list_get durch element_count und element_get ersetzt

ks	10. mai. 2010	rev 1.0
	original version
*)
END_FUNCTION_BLOCK
