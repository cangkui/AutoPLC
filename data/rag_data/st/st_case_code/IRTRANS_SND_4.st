FUNCTION_BLOCK IRTRANS_SND_4
VAR_INPUT
    DEV_CODE : STRING;
    KEY_CODE_0 : STRING;
    KEY_CODE_1 : STRING;
    KEY_CODE_2 : STRING;
    KEY_CODE_3 : STRING;
    IN_0 : BOOL;
    IN_1 : BOOL;
    IN_2 : BOOL;
    IN_3 : BOOL;
    T_REPEAT : TIME;
END_VAR

VAR_IN_OUT
    IP_C : IP_C; // IP_Control Verwaltungsstruktur
    S_BUF : NETWORK_BUFFER_SHORT;
END_VAR_IN_OUT

VAR_OUTPUT
    KEY : BYTE;
END_VAR_OUTPUT

VAR
    skey : STRING;
    size : INT;
    str : STRING;
    t : TON;
    k : BYTE;
    lk : BYTE;
    d : BOOL;
END_VAR
d := IP_C.C_STATE > 127 AND (IP_C.MAILBOX[1] > 0 OR IP_C.C_MODE <> 5);
IF NOT d THEN RETURN; END_IF;

t(IN:= lk = k , PT:=T_REPEAT);

IF S_BUF.SIZE = 0 THEN
	IF IN_0 THEN
		skey := KEY_CODE_0; k := 1;
	ELSIF IN_1 THEN
		skey := KEY_CODE_1; k := 2;
	ELSIF IN_2 THEN
		skey := KEY_CODE_2; k := 3;
	ELSIF IN_3 THEN
		skey := KEY_CODE_3; k := 4;
	ELSE
		lk := 0;
		KEY := 0;
		RETURN; (* beenden wenn kein Key aktiv *)
	END_IF;

	IF lk <> k OR T.Q THEN (* anderer Key oder repeat wartezeit abgelaufen *)
		str := CONCAT('snd ',dev_code);
		str := CONCAT(str,',');
		str := CONCAT(str,skey);
		size := LEN(str);
		OSCAT_BASIC._STRING_TO_BUFFER(STR:=str, POS:=0, PT:=ADR(S_BUF.BUFFER), SIZE:=size);
		S_BUF.SIZE := size; (* Sendel√§nge eintragen *)
		KEY := k;
		lk := k; (* letzten Key speichern *)
		t(IN:=FALSE); (* Reset Time *)
	END_IF;
END_IF;

(* revision history
hm	6. dec 2009		rev 1.0
	original version
*)
END_FUNCTION_BLOCK
