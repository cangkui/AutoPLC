### 算法流程描述

#### 1. **状态机设计**
- 采用**有限状态机(FSM)**模型，将整个瓶装流程划分为多个状态，每个状态对应一个生产步骤。
- 定义状态常量（如`STATE_WAITING_FOR_BOTTLE`、`STATE_CLEANING`等），通过整数变量`currentState`跟踪当前状态。

#### 2. **状态转移逻辑**
- **初始状态（等待瓶子）**：  
  - 所有输出设备（泵、阀门、封盖机、包装机）关闭，完成指示灯熄灭。  
  - 当`bottleSensor`检测到瓶子时，跳转到**清洗状态**。

- **清洗状态**：  
  - 启动清洗泵（`Pump_Motor = TRUE`）。  
  - 等待操作员按下`cleaningConfirmButton`确认清洗完成，跳转到**灌装状态**。

- **灌装状态**：  
  - 关闭清洗泵，打开灌装阀门（`Filling_Valve = TRUE`）。  
  - 等待操作员按下`fillingConfirmButton`确认灌装完成，跳转到**封盖状态**。

- **封盖状态**：  
  - 关闭灌装阀门，启动封盖机（`Capping_Machine = TRUE`）。  
  - 等待操作员按下`cappingConfirmButton`确认封盖完成，跳转到**包装状态**。

- **包装状态**：  
  - 关闭封盖机，启动包装机（`Packing_Machine = TRUE`）。  
  - 等待操作员按下`packingConfirmButton`确认包装完成，跳转到**完成状态**。

- **完成状态**：  
  - 关闭所有设备，点亮完成指示灯（`Completion_Light = TRUE`）。  
  - 等待操作员按下`finishedButton`确认取走瓶子，跳转回**初始状态**。

#### 3. **边缘检测与循环控制**
- 使用`REPEAT-UNTIL`循环确保每次状态转移后立即重新评估条件，避免状态阻塞。  
- 通过`tempExitStateLoop`变量控制循环退出，确保每次仅处理一个状态转移。

#### 4. **输出控制**
- 每个状态中直接设置输出设备的状态（如`Pump_Motor`、`Filling_Valve`等），确保设备动作与流程步骤严格同步。

#### 5. **异常处理（隐含需求）**
- 默认所有状态转移需操作员确认，避免自动跳转导致误操作。  
- 若某步骤未完成（如未按下确认按钮），状态机保持当前状态，设备持续运行。

### 关键设计点
1. **状态驱动**：明确的状态划分和转移条件，逻辑清晰易维护。  
2. **操作员介入**：每个关键步骤需人工确认，提高安全性。  
3. **输出隔离**：每个状态独立控制输出，避免设备冲突。  
4. **循环优化**：通过`tempExitStateLoop`确保高效的状态处理，减少PLC扫描周期占用。

### 扩展性建议
- 可增加超时检测（如某步骤长时间未完成则报警）。  
- 若需支持并行流程（如多瓶处理），需引入队列或并行状态机设计。