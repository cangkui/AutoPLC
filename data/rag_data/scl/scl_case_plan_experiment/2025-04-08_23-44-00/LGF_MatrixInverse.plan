### 矩阵求逆功能的算法流程描述

#### 1. 功能概述
这个函数用于计算一个方阵的逆矩阵。输入是一个二维实数数组（矩阵），输出是它的逆矩阵。函数还包含错误检测和状态码返回功能。

#### 2. 主要处理步骤

**2.1 矩阵维度检查**
- 获取输入矩阵和结果矩阵的行列边界
- 计算输入矩阵的行数和列数
- 检查是否为方阵（行数=列数）
- 检查输入矩阵和结果矩阵的维度是否匹配

**2.2 错误处理**
- 如果不是方阵，设置错误标志和状态码后返回
- 如果矩阵维度不匹配，设置相应错误标志和状态码后返回

**2.3 矩阵求逆计算**
- 初始化结果矩阵
- 使用高斯-约旦消元法计算逆矩阵：
  - 遍历主对角线元素（pivot元素）
  - 检查主对角线元素是否为0（避免除零错误）
  - 计算pivot元素的倒数
  - 处理pivot列的其他元素
  - 处理非pivot行和非pivot列的元素
  - 处理pivot行的其他元素

**2.4 结果返回**
- 计算成功时清除错误标志
- 设置成功状态码

#### 3. 关键算法逻辑

**3.1 维度检查**
- 使用LOWER_BOUND和UPPER_BOUND获取矩阵边界
- 计算实际行数和列数时考虑数组下标从0或1开始的情况

**3.2 逆矩阵计算**
- 采用原地计算方式（直接在结果矩阵上操作）
- 使用负值初始化结果矩阵
- 通过多次迭代逐步将矩阵转换为单位矩阵，同时结果矩阵变为逆矩阵
- 使用PRECISION常量处理浮点数精度问题

**3.3 错误处理**
- 提供详细的错误状态码：
  - 非方阵错误
  - 算法不可行（主对角线元素为零）
  - 矩阵维度不匹配错误

#### 4. 注意事项

1. 输入矩阵必须是方阵
2. 结果矩阵必须与输入矩阵维度完全一致
3. 算法对主对角线元素为零的矩阵无法处理
4. 使用浮点数比较时要考虑精度问题（使用PRECISION常量）
5. 函数不返回值，通过输出参数返回结果和状态

这个算法流程描述涵盖了矩阵求逆功能的主要处理步骤和关键逻辑，可以作为实现类似功能的指导框架。实际实现时需要根据具体编程语言和平台特性进行调整。