### 算法流程描述（Word 拆分为 2 Bytes）

#### 1. **功能概述**
该函数的作用是将一个 **16位 Word 变量** 拆分为 **2 个 8位 Byte 变量**：
- **byte1**（高字节，MSB）
- **byte0**（低字节，LSB）

#### 2. **输入/输出定义**
- **输入**：
  - `word`（Word 类型）：待拆分的 16 位数据。
- **输出**：
  - `byte1`（Byte 类型）：高 8 位（MSB）。
  - `byte0`（Byte 类型）：低 8 位（LSB）。

#### 3. **核心逻辑**
1. **提取低字节（byte0）**：
   - 直接使用 **AND 掩码（0xFF）** 截取 `word` 的低 8 位。
   - 示例：`byte0 = word & 0xFF`。

2. **提取高字节（byte1）**：
   - 先对 `word` 进行 **右移 8 位**（`SHR` 指令），将高 8 位移至低 8 位。
   - 再用 **AND 掩码（0xFF）** 确保只保留低 8 位。
   - 示例：`byte1 = (word >> 8) & 0xFF`。

#### 4. **优化与注意事项**
- **无错误处理**：由于输入是 Word 类型，输出是 Byte 类型，且拆分操作不会失败，因此无需额外错误检测。
- **ENO 处理**：函数执行成功时，`ENO` 应设为 `TRUE`（但本函数未使用返回值，仅用于兼容性）。
- **掩码常量**：使用 `MASK` 常量（`16#FF`）提高代码可读性。

#### 5. **适用场景**
- 适用于 **S7-1200 / S7-1500 PLC**（TIA Portal 环境）。
- 典型应用：解析通信协议中的多字节数据（如 Modbus、CAN 报文）。

#### 6. **代码生成指导**
- 优先使用 **位操作（AND、SHR）** 而非类型转换，确保跨平台兼容性。
- 若目标平台不支持 `SHR` 指令，可用除法替代（`word / 256` 提取高字节）。