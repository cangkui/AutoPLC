### 算法流程描述

#### 1. **功能概述**
该函数实现了一个高级的CRC-32校验计算功能，支持以下特性：
- 可配置的初始值（`initValue`）
- 可配置的生成多项式（`mask`）
- 可配置的最终异或值（`finalXorValue`）
- 输入字节的位反转（`reflectInput`）
- 计算结果的位反转（`reflectResult`）
- 可指定计算的数据长度（`noOfElements`）

#### 2. **输入输出定义**
- **输入参数**：
  - `initValue`：CRC计算的初始值（32位）
  - `mask`：生成多项式（32位）
  - `finalXorValue`：最终异或值（32位）
  - `reflectInput`：是否反转输入字节的位顺序
  - `reflectResult`：是否反转计算结果的位顺序
  - `noOfElements`：指定计算的数据长度（0表示使用整个数组）
- **输出参数**：
  - `error`：错误标志（TRUE表示出错）
  - `status`：状态码（16#0000表示成功，16#8400表示数据长度错误）
- **输入输出参数**：
  - `array`：待计算的数据流（字节数组）
- **返回值**：
  - 计算得到的CRC值（32位）

#### 3. **算法流程**
1. **初始化**：
   - 设置初始CRC值为`initValue`。
   - 计算输入数组的上下限（`tempLowerLimit`和`tempUpperLimit`）。
   - 检查`noOfElements`是否合法：
     - 如果`noOfElements`大于0且超过数组长度，则报错并返回。
     - 否则，调整`tempUpperLimit`以匹配`noOfElements`。

2. **CRC计算**：
   - 遍历数组中的每个字节：
     - 如果`reflectInput`为TRUE，反转当前字节的位顺序。
     - 将当前字节左移24位后与CRC值异或。
     - 对CRC值进行8次迭代（每次处理1位）：
       - 检查最高位是否为1：
         - 如果是，左移1位后与`mask`异或。
         - 否则，仅左移1位。

3. **结果处理**：
   - 如果`reflectResult`为TRUE，反转CRC值的位顺序。
   - 将CRC值与`finalXorValue`异或，得到最终结果。
   - 设置状态码和错误标志。

#### 4. **关键逻辑**
- **位反转**：
  - 输入字节和CRC值的位反转通过逐位赋值实现。
- **CRC迭代**：
  - 每次迭代处理1位，共8次迭代（每个字节）。
  - 通过检查最高位决定是否与`mask`异或。
- **错误处理**：
  - 仅检查`noOfElements`是否超过数组长度，其他错误未处理。

#### 5. **注意事项**
- 该函数未处理数组越界以外的错误（如无效输入参数）。
- 位反转操作通过硬编码实现，适用于32位CRC值。
- 生成多项式（`mask`）和最终异或值（`finalXorValue`）需由调用方正确配置。