### 算法流程描述（Boolean信号边沿检测功能块）

#### 1. 功能概述
该功能块用于检测输入布尔信号(`trigger`)在指定监控时间(`monitorTime`)内的边沿变化情况，并输出以下状态：
- `single`：监控时间内仅检测到1次边沿且信号未保持高电平
- `double`：监控时间内检测到2次边沿
- `long`：检测到1次边沿且信号保持高电平至监控时间结束
- `severalEdges`：监控时间内检测到多次(>2)边沿
- `noOfEdges`：实际检测到的边沿数量

#### 2. 核心变量设计
**输入变量：**
- `trigger`：待检测的布尔信号
- `monitorTime`：监控时间（默认1秒）

**输出变量：**
- 五种检测状态输出（均为只读）
- 边沿计数输出

**内部状态变量：**
- `statTriggerPrevious`：存储前一个周期的信号状态（用于边沿检测）
- `statTriggerCounter`：边沿计数器
- `statTimeElapsedFlag`：监控时间结束标志
- `instTimer`：IEC定时器实例

**临时变量：**
- 用于暂存各输出状态的中间值

#### 3. 主要处理逻辑

**初始化阶段：**
1. 执行边沿检测：`当前信号为真 AND 前次信号为假`
2. 更新信号历史状态

**主处理逻辑：**
1. **边沿触发处理：**
   - 检测到有效边沿时：
     - 启动/重置监控定时器
     - 边沿计数器+1

2. **定时器超时处理：**
   - 当监控时间结束时：
     a) 若信号已复位且超时标志为真：
        - 重置所有输出状态
        - 清零计数器
        - 复位定时器
        
     b) 若检测到边沿：
        - 根据计数器值设置对应输出：
          * 计数=1且信号保持→`long`
          * 计数=1→`single`
          * 计数=2→`double`
          * 计数>2→`severalEdges`
        - 更新实际边沿数输出
        - 设置超时标志

**输出更新：**
- 将临时变量值赋给对应输出
- 强制ENO为TRUE（不用于错误处理）

#### 4. 关键设计要点
1. **边沿检测机制**：通过比较当前信号值与历史值实现
2. **状态保持逻辑**：使用`statTimeElapsedFlag`确保输出至少保持一个周期
3. **条件优先级**：`long`状态需要同时满足边沿计数和信号保持条件
4. **资源清理**：在信号复位时自动清除所有状态

#### 5. 典型应用场景
- 按钮操作模式识别（单击/双击/长按）
- 脉冲信号特征分析
- 设备状态变化频率监测

该设计通过组合定时器和边沿计数实现了多状态检测，输出信号具有明确的互斥性，且考虑了信号保持等特殊情况的处理。