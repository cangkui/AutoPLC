### 算法流程描述

#### 1. **功能概述**
该功能块用于计算一个无符号整数数组的箱线图（Boxplot）统计信息，包括四分位数、中位数、极值、异常值比例以及偏度等。通过输入参数`execute`的上升沿触发计算，`rangeOutlier`参数用于控制异常值的检测范围。

#### 2. **输入输出定义**
- **输入参数**：
  - `execute`：布尔类型，上升沿触发计算。
  - `rangeOutlier`：实数类型，异常值检测范围参数（默认1.5）。
  - `values`：无符号整数数组，待计算的数据序列。
  
- **输出参数**：
  - 统计信息：包括`min`（最小值）、`max`（最大值）、`q25`（第一四分位数）、`median`（中位数）、`q75`（第三四分位数）、`outlierMin`（低异常值比例）、`outlierMax`（高异常值比例）、`skewness`（偏度）。
  - 状态信息：`error`（错误标志）、`status`（状态码）、`subfunctionStatus`（子功能状态码）。

#### 3. **算法流程**
1. **触发条件检测**：
   - 检测`execute`的上升沿，触发计算。
   - 如果`execute`为假，重置状态为未调用（`STATUS_NO_CALL`）。

2. **输入验证**：
   - 检查`rangeOutlier`是否合法（必须大于1.0或等于0.0）。
   - 检查数组边界是否合法（下限不能为负）。

3. **数据预处理**：
   - 获取数组长度和边界。
   - 调用排序功能块（如`LGF_ShellSort_UDInt`）对数组进行排序。

4. **统计计算**：
   - **中位数（Median）**：
     - 如果数组长度为偶数，取中间两个数的平均值。
     - 如果数组长度为奇数，取中间值。
   - **四分位数（Q25和Q75）**：
     - 使用线性插值法计算四分位数。
   - **异常值检测**：
     - 计算四分位距（IQR = Q75 - Q25）。
     - 根据`rangeOutlier`参数计算异常值边界（Q25 - k*IQR 和 Q75 + k*IQR）。
     - 遍历数组，统计超出边界的异常值比例。
   - **偏度（Skewness）**：
     - 使用公式：`(Q25 + Q75 - 2*Median) / (Q75 - Q25)`。

5. **输出更新**：
   - 根据`rangeOutlier`是否为0，选择是否使用异常值修正后的极值（`min`和`max`）。
   - 更新所有统计信息和状态码。

#### 4. **状态与错误处理**
- **状态码**：
  - `STATUS_NO_CALL`：未调用状态。
  - `STATUS_FIRST_CALL`：首次调用状态。
  - `STATUS_EXECUTION_FINISHED`：计算完成。
  - 错误码：如`ERR_RANGE_NOT_OK`（范围参数非法）、`ERR_NEG_ARR_BOUND`（数组边界非法）、`ERR_SHELL_SORT`（排序失败）。
- **错误标志**：
  - 通过`error`输出布尔值表示是否发生错误。

#### 5. **注意事项**
- **排序依赖**：需要调用外部排序功能块（如Shell排序），确保其正确性和效率。
- **边界条件**：处理空数组或单元素数组时需特殊处理。
- **性能优化**：排序是主要性能瓶颈，应选择高效排序算法。

### 调整建议
- **输入验证**：可以增加对数组长度的检查（如长度小于3时无法计算四分位数）。
- **异常值检测**：如果`rangeOutlier`为0，可以跳过异常值检测逻辑以提升性能。
- **状态管理**：可以细化状态码，区分不同阶段的执行状态（如排序中、计算中等）。