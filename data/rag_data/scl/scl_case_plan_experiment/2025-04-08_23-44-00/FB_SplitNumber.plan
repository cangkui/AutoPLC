### 算法流程描述

#### 1. 输入验证
- **目的**：确保输入数字在有效范围内（0 ≤ InputNumber < 10000）
- **逻辑**：
  - 检查InputNumber是否小于0或大于等于10000
  - 如果超出范围：
    - 设置error为TRUE
    - 设置status为错误代码16#8001
    - 直接返回，不执行后续处理
  - 如果有效：
    - 设置error为FALSE
    - 设置status为成功代码16#0000

#### 2. 数字分离
- **目的**：将输入数字分解为千、百、十、个位
- **逻辑**：
  - 千位 = InputNumber / 1000（整数除法）
  - 百位 = (InputNumber MOD 1000) / 100
  - 十位 = (InputNumber MOD 100) / 10
  - 个位 = InputNumber MOD 10

#### 3. 查找最小非零数字
- **目的**：找出所有非零数字中的最小值
- **逻辑**：
  - 初始化临时最小值变量为255（最大可能值）
  - 依次检查每个数字位：
    - 如果数字不为0且小于当前最小值，则更新最小值
  - 特殊处理：
    - 如果InputNumber为0，直接设置最小值为0

#### 4. 输出处理
- **目的**：将计算结果写入输出变量
- **逻辑**：
  - 将临时最小值赋给Min输出
  - 其他输出变量（Thousands/Hundreds/Tens/Ones）已在数字分离步骤直接赋值

#### 设计要点
1. **错误处理优先**：在开始任何计算前先验证输入有效性
2. **数学运算**：使用整数除法和取模运算实现数字分离
3. **最小值查找**：采用遍历比较法，注意处理全零的特殊情况
4. **类型安全**：所有数字位输出使用Byte类型（0-255范围足够）

#### 可扩展性考虑
- 如需处理更大范围的数字，只需调整输入验证和分离逻辑中的除数
- 错误代码可扩展为枚举类型以提高可读性
- 可添加输入变化检测以避免重复计算相同输入