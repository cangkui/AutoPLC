这个需求是要实现一个名为"LGF_SimpleSmoothingFC"的函数，用于计算数组值的线性平滑平均值。以下是实现这个功能的思维逻辑：

1. 输入输出分析：
- 输入：values数组(待平滑处理的原始值数组)
- 输出：smoothedValues数组(平滑处理后的值数组)
- 状态输出：error(错误标志)和status(状态码)

2. 主要处理逻辑：
- 首先检查输入输出数组的边界和大小是否匹配
- 验证数组元素数量是否满足最小要求(至少3个元素)
- 如果检查失败，设置相应的错误状态并返回
- 如果检查通过，执行平滑计算：
  - 采用三点滑动平均算法：y(n) = (y(n-1)+y(n)+y(n+1))/3
  - 对数组中间元素进行平滑处理(首尾元素保持不变)
- 最后设置成功状态标志

3. 错误处理机制：
- 定义了两个错误状态码：
  - 数组大小不一致错误(ERR_ARRAY_DIFFERENT)
  - 元素数量不足错误(ERR_NOT_ENOUGH_VALUES)
- 在检测到错误时立即返回并设置相应状态

4. 边界处理：
- 使用临时变量存储数组边界信息
- 计算实际元素数量时考虑数组索引偏移
- 平滑处理时跳过数组首尾元素

5. 性能考虑：
- 使用FOR循环处理数组中间元素
- 避免不必要的计算和内存操作
- 使用临时变量减少重复计算

这个实现的关键点在于：
1) 严格的输入验证
2) 三点滑动平均算法
3) 清晰的错误状态报告机制
4) 高效的数组处理方式

对于类似的需求，可以借鉴这种结构化的处理方式，特别是输入验证和错误处理的模式。