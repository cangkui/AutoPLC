### 算法流程描述：国际日期字符串转DTL转换器

#### 1. 功能概述
该函数用于将符合国际标准格式（ISO 8601）的日期时间字符串转换为DTL（Date and Time Long）数据类型。主要处理格式如：`22-01-2019 14:07:57.696417000`。

#### 2. 输入输出定义
- **输入**：
  - `date`：字符串类型，表示待转换的日期时间字符串
- **输出**：
  - `error`：布尔类型，表示是否发生错误
  - `status`：字类型，表示具体的错误状态码
- **返回值**：
  - DTL类型，转换后的日期时间

#### 3. 主要处理逻辑
1. **输入验证**：
   - 检查输入字符串是否为空。若为空，则设置错误标志和状态码，并返回初始值（1970-01-01）。

2. **字符串解析**：
   - 按照ISO 8601格式，将字符串分解为年、月、日、时、分、秒、纳秒等部分。
   - 使用`MID`函数从固定位置截取各部分的子字符串。

3. **数值转换与验证**：
   - 使用`STRG_VAL`函数将子字符串转换为数值。
   - 对每个部分进行范围验证（如年份在1970-2262之间，月份在1-12之间等）。
   - 若某部分数值超出范围，则设置错误标志和对应的状态码，并返回初始值。

4. **特殊处理**：
   - **纳秒部分**：检查并替换空格为'0'，确保格式正确。
   - **星期修正**：通过`+ t#0ms`操作修正DTL中的星期字段。

5. **输出处理**：
   - 若所有部分均验证通过，则返回转换后的DTL值，并设置无错误状态。
   - 否则返回初始值，并设置对应的错误状态。

#### 4. 错误处理
- 定义了一系列错误状态码（如`ERR_FORMAT_YEAR`、`ERR_FORMAT_MONTH`等），用于标识具体是哪一部分的格式错误。
- 错误发生时，立即终止处理并返回。

#### 5. 常量定义
- 定义了各字段的截取位置、长度、有效范围等常量，便于维护和修改。

#### 6. 注意事项
- 输入字符串必须严格符合ISO 8601格式，否则可能导致解析失败。
- 错误处理通过`error`和`status`输出，而非ENO机制。

#### 7. 扩展性
- 可通过修改常量定义来适应不同的日期时间格式。
- 错误状态码可进一步扩展以支持更多错误类型。

该算法流程清晰地将字符串解析、数值转换、错误处理等步骤分离，确保了代码的可读性和可维护性。对于类似的需求（如其他格式的日期时间转换），可参考此流程进行调整。