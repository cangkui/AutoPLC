### 算法流程描述

#### 1. 变量定义
- **输入变量**:
  - `requestIn`: 入库请求信号（布尔型）
  - `requestOut`: 出库请求信号（布尔型）
- **输出变量**:
  - `productNum`: 当前库存工件数量（整型）
  - `libFreeNum`: 货架空闲位置数量（整型）
  - `error`: 错误状态（布尔型）
  - `status`: 状态码（字型）
- **输入/输出变量**:
  - `library`: 货架占用状态数组（布尔型数组，索引1-9）
- **内部变量**:
  - `STATUS_OK`: 正常状态码（16#0000）
  - `STATUS_ALL_OCCUPIED`: 货架已满状态码（16#8001）
  - `STATUS_ALL_EMPTY`: 货架为空状态码（16#8002）
  - `tempIndex`: 临时循环索引（整型）
  - `tempError`: 临时错误状态（布尔型）
  - `tempStatus`: 临时状态码（字型）

#### 2. 主逻辑流程
1. **初始化计算**:
   - 遍历货架数组`library`，统计当前库存工件数量`productNum`和空闲位置数量`libFreeNum`。
   - 初始化错误状态`error`为`FALSE`，状态码`status`为`STATUS_OK`。

2. **入库逻辑**:
   - 当`requestIn`为`TRUE`时：
     - 从货架最高层（第9层）向最低层（第1层）遍历，查找第一个空闲位置。
     - 如果找到空闲位置，标记该位置为占用，更新`productNum`和`libFreeNum`，并返回。
     - 如果所有位置均被占用，设置`error`为`TRUE`，状态码`status`为`STATUS_ALL_OCCUPIED`。

3. **出库逻辑**:
   - 当`requestOut`为`TRUE`时：
     - 从货架最低层（第1层）向最高层（第9层）遍历，查找第一个占用位置。
     - 如果找到占用位置，标记该位置为空闲，更新`productNum`和`libFreeNum`，并返回。
     - 如果所有位置均为空闲，设置`error`为`TRUE`，状态码`status`为`STATUS_ALL_EMPTY`。

#### 3. 输出更新
- 在每次操作后，`productNum`和`libFreeNum`会自动更新。
- 错误状态`error`和状态码`status`会根据操作结果自动设置。

### 逻辑调整说明
1. **优先级调整**:
   - 入库时优先使用高层（编号大的位置），出库时优先使用低层（编号小的位置），符合“先进后出”的堆栈逻辑。
2. **错误处理**:
   - 入库时货架已满或出库时货架为空，会设置相应的错误状态和状态码。
3. **性能优化**:
   - 使用临时变量`tempIndex`进行循环遍历，避免直接操作全局变量。
   - 在每次操作后立即返回，减少不必要的计算。

### 注意事项
- 确保`library`数组的索引范围始终在1到9之间。
- 状态码使用常量定义，便于维护和扩展。
- 错误状态和状态码的设置应清晰明确，便于后续调试和故障排查。