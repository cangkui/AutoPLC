### 算法流程描述

#### 1. 模式判断
- **输入参数**：`button1`（模式选择按钮）
  - 当`button1=0`时，进入**手动模式**
  - 当`button1=1`时，进入**自动模式**

#### 2. 手动模式逻辑
- **输入参数**：`button2`和`button3`（手动控制按钮）
  - **条件1**：`button2=0`且`button3=0`
    - 所有灯熄灭（`greenLight=0`, `redLight=0`, `yellowLight=0`）
  - **条件2**：`button2=1`且`button3=0`
    - `greenLight`常亮
    - `redLight`以0.5Hz频率闪烁（1秒亮，1秒灭）
  - **条件3**：`button2=0`且`button3=1`
    - `redLight`常亮
    - `yellowLight`以1Hz频率闪烁（1秒亮，1秒灭）
  - **条件4**：`button2=1`且`button3=1`
    - `yellowLight`常亮
    - `greenLight`以1Hz频率闪烁（1秒亮，1秒灭）

#### 3. 自动模式逻辑
- **状态循环**：
  - **状态0**（初始状态）：
    - `greenLight`亮，其他灯灭
    - 持续1秒后切换到**状态1**
  - **状态1**：
    - `redLight`亮，其他灯灭
    - 持续1秒后切换到**状态2**
  - **状态2**：
    - `yellowLight`亮，其他灯灭
    - 持续1秒后回到**状态0**

#### 4. 定时器管理
- **手动模式**：
  - 使用两个定时器（`ManModeTimer1`和`ManModeTimer2`）交替触发，实现1秒周期
  - 定时器输出用于控制闪烁逻辑
- **自动模式**：
  - 使用一个定时器（`AutoModeTimer`）控制每个状态的持续时间（1秒）
  - 定时器触发后切换到下一个状态，并重置定时器

#### 5. 状态切换
- **手动模式**：
  - 直接根据`button2`和`button3`的组合设置灯的状态
- **自动模式**：
  - 使用`CycleStep`变量记录当前状态（0、1、2）
  - 通过`CASE`语句实现状态机逻辑

#### 6. 输出控制
- 根据当前模式和状态，直接设置`greenLight`、`redLight`、`yellowLight`的输出值
- 闪烁逻辑通过定时器的输出（`.Q`）实现

### 关键点说明
1. **模式分离**：手动和自动模式完全独立，通过`button1`的值选择。
2. **闪烁实现**：手动模式下，闪烁频率通过定时器的交替触发实现。
3. **状态机设计**：自动模式下，使用`CycleStep`和`CASE`语句实现简单的状态机。
4. **定时器复用**：手动模式的两个定时器可以复用，自动模式的定时器单独使用。

这种设计清晰地将功能分为手动和自动两部分，逻辑简单且易于维护。闪烁和状态切换都通过定时器实现，保证了时间的准确性。