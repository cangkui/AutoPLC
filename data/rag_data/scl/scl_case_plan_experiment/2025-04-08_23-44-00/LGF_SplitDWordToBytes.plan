### 算法流程描述（DWord拆分为4个Byte）

#### 1. 功能理解
- **核心功能**：将一个32位的DWord数据拆分为4个独立的8位Byte数据
- **输入输出关系**：
  - 输入：1个DWord（32位）
  - 输出：4个Byte（byte3为最高有效字节，byte0为最低有效字节）

#### 2. 关键处理逻辑
- **字节提取原理**：
  - 采用位掩码（MASK = 16#FF）和移位操作组合实现
  - 每个字节通过以下方式获取：
    1. byte0（LSB）：原始DWord与MASK进行AND操作
    2. byte1：DWord右移8位后与MASK进行AND操作
    3. byte2：DWord右移16位后与MASK进行AND操作  
    4. byte3（MSB）：DWord右移24位后与MASK进行AND操作

- **移位操作特性**：
  - 使用SHR函数进行逻辑右移（高位补零）
  - 每次移位使目标字节对齐到最低8位

#### 3. 异常处理
- 无需特殊错误处理：
  - 输入输出均为原始数据类型，无越界风险
  - 移位操作在PLC中为原子操作，不会产生异常

#### 4. 优化建议
- 常量MASK定义为16#FF（二进制11111111）：
  - 硬编码方式比运行时计算更高效
  - 统一的掩码值确保各字节提取逻辑一致性

#### 5. 执行流程
1. 接收输入DWord
2. 并行执行四个字节的提取：
   - byte0 = DWord & 0xFF
   - byte1 = (DWord >> 8) & 0xFF
   - byte2 = (DWord >> 16) & 0xFF  
   - byte3 = (DWord >> 24) & 0xFF
3. 设置ENO为TRUE表示成功执行

#### 6. 典型应用场景
- 协议解析（如Modbus长数据拆分）
- 数据打包/解包处理
- 与第三方设备通信时的数据格式转换

> 注：该实现方式具有平台无关性，适用于所有支持标准移位操作的PLC系统。移位次数采用硬编码而非循环结构，既保证执行效率又便于代码维护。