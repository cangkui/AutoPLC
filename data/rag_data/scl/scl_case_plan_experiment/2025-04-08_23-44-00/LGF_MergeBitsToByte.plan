### 算法流程描述：8位布尔值合并为字节（8-Bit to Byte Merger）

#### **功能概述**
该函数将8个独立的布尔输入（`bit7`到`bit0`）合并为一个字节（`Byte`）变量，其中：
- `bit7` 是最高有效位（MSB）
- `bit0` 是最低有效位（LSB）

#### **输入变量**
- `bit7` 到 `bit0`：8个布尔值，分别对应字节的每一位（`bit7` = 第7位，`bit0` = 第0位）。

#### **输出变量**
- 返回值：一个字节（`Byte`），由输入的8个布尔值按位组合而成。

#### **算法逻辑**
1. **初始化临时字节变量**
   - 定义一个临时字节变量 `tempByte`，用于存储合并后的结果。

2. **按位赋值**
   - 将输入的布尔值分别赋值给 `tempByte` 的对应位：
     - `bit7` → `tempByte.%X7`（最高位）
     - `bit6` → `tempByte.%X6`
     - ...
     - `bit0` → `tempByte.%X0`（最低位）

3. **返回结果**
   - 将 `tempByte` 的值作为函数的返回值。

4. **错误处理**
   - 由于该函数仅涉及位操作，无需额外的错误处理，因此 `ENO`（使能输出）始终设为 `TRUE`。

#### **关键点**
- **位序匹配**：确保输入的布尔值按正确的顺序（`bit7`=MSB，`bit0`=LSB）映射到字节的对应位。
- **直接位操作**：使用 `%X` 位访问语法（如 `tempByte.%X7`）直接设置字节的每一位，避免复杂的移位或逻辑运算。
- **无动态计算**：该函数仅执行静态位合并，不涉及循环或条件判断，因此执行效率高。

#### **适用场景**
- 适用于需要将多个离散的布尔信号（如开关状态、标志位）打包成一个字节进行传输或存储的场景。
- 例如：PLC 与外部设备通信时，将多个数字输入信号编码为单字节数据帧。

#### **扩展性**
- 如果需要合并更多位（如16位），可以扩展输入参数并使用 `WORD` 或 `DWORD` 类型。
- 如果输入位数可变，可改为使用数组输入（如 `ARRAY [0..7] OF BOOL`），但需调整位映射逻辑。