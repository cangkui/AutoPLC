### 算法流程描述

#### 1. 功能概述
该函数用于检查一个给定值是否在指定的范围内，并返回相应的状态和错误信息。

#### 2. 输入参数
- `value`：需要检查的值（LReal 类型）。
- `lowLimit`：范围的下限（LReal 类型）。
- `highLimit`：范围的上限（LReal 类型）。

#### 3. 输出参数
- `overHighLimit`：布尔值，如果 `value` 超过上限则为 TRUE。
- `belowLowLimit`：布尔值，如果 `value` 低于下限则为 TRUE。
- `error`：布尔值，如果执行过程中发生错误则为 TRUE。
- `status`：状态码，用于指示函数执行的状态或错误类型。

#### 4. 返回值
- 返回值为布尔值，如果 `value` 在范围内则为 TRUE，否则为 FALSE。

#### 5. 状态码
- `16#0000`：无错误。
- `16#8401`：上限低于下限的错误。

#### 6. 算法流程
1. **初始化与范围检查**：
   - 检查 `highLimit` 是否小于 `lowLimit`。如果是，则设置错误标志和状态码，并立即返回 FALSE。
   
2. **范围评估**：
   - 检查 `value` 是否超过 `highLimit`，结果暂存到临时变量 `tempValueOverHighLimit`。
   - 检查 `value` 是否低于 `lowLimit`，结果暂存到临时变量 `tempValueUnderLowLimit`。

3. **输出结果**：
   - 计算返回值：如果 `value` 既不高于上限也不低于下限，则返回 TRUE。
   - 设置 `overHighLimit` 和 `belowLowLimit` 输出参数。
   - 清除错误标志并设置状态码为无错误。

#### 7. 错误处理
- 如果 `highLimit` 小于 `lowLimit`，则视为输入参数错误，设置 `error` 为 TRUE 并返回相应的状态码。

#### 8. 注意事项
- 该函数不依赖 ENO 机制，错误处理通过 `error` 和 `status` 输出参数完成。
- 临时变量用于存储中间结果，避免重复计算。

#### 9. 适用场景
- 适用于需要动态检查数值范围的场景，如参数校验、报警阈值检查等。
- 适用于 S7-1200 / S7-1500 PLC，使用 TIA Portal 编程环境。