### 算法流程描述（适用于类似的生产线控制需求）

#### 1. 状态机设计思维
- **核心思想**：将生产过程分解为离散的状态，每个状态对应一个工艺步骤
- **状态定义原则**：
  - 每个工艺步骤对应一个独立状态（如清洗、灌装、封盖等）
  - 每个等待确认的步骤可单独设状态（可选）
  - 完成状态需要显式定义

#### 2. 状态转移逻辑
- **触发条件**：
  - 传感器信号（如`bottleSensor`）触发生产启动
  - 操作员确认按钮（如`*ConfirmButton`）触发工序切换
- **转移规则**：
  - 严格顺序执行（清洗→灌装→封盖→包装）
  - 每个状态必须收到确认信号才能进入下一状态
  - 最终完成状态需要复位信号返回初始状态

#### 3. 输出控制策略
- **输出规则**：
  - 每个状态激活对应的执行机构（如`Pump_Motor`）
  - 非当前工序的执行机构必须强制关闭
  - 完成指示灯只在最终状态激活

#### 4. 异常处理考虑
- **隐含要求**：
  - 状态机应保持当前状态直到收到确认信号
  - 所有输出在状态切换时应立即更新
  - 使用`REPEAT-UNTIL`结构确保单次循环处理

#### 5. 代码结构建议
```plaintext
1. 定义状态常量（推荐使用枚举或常量）
2. 主循环结构：
   a. 默认设置所有输出为OFF
   b. CASE语句处理当前状态：
      i. 设置本状态专属输出为ON
      ii. 检测转移条件
      iii. 满足条件时更新状态
3. 使用临时变量控制循环执行
```

#### 6. 扩展性建议
- 可增加状态超时监控
- 可添加急停信号处理
- 可扩展为并行工序分支（如需）
- 可增加产量计数功能

> 该模式适用于需要严格顺序控制且依赖人工确认的离散制造流程，如食品灌装、药品包装等场景。通过状态机的明确划分，可有效降低流程控制的复杂度。