### 算法流程描述

#### 1. **模式切换逻辑**
- **手动模式 (`Mode = FALSE`)**
  - 重置状态机到初始状态 (`STATE_A`)
  - 电机控制采用直接按钮控制：
    - 正转 (`MotorForward`) 由 `ForwardButton` 触发，且与 `ReverseButton` 互锁
    - 反转 (`MotorReverse`) 由 `ReverseButton` 触发，且与 `ForwardButton` 互锁
- **自动模式 (`Mode = TRUE`)**
  - 使用状态机 (`currentState`) 控制生产流程：
    - **STATE_A**（工作站A）：
      - 检测到产品 (`SensorA`) 且操作员按下完成按钮 (`ButtonA`) 后，切换到 **STATE_B**，启动电机正转
    - **STATE_B**（工作站B）：
      - 检测到产品 (`SensorB`) 且操作员按下完成按钮 (`ButtonB`) 后，切换到 **STATE_C**，启动电机正转
    - **STATE_C**（工作站C）：
      - 检测到产品 (`SensorC`) 且操作员按下完成按钮 (`ButtonC`) 后，切换到 **STATE_D**，点亮完成指示灯
    - **STATE_D**（完成状态）：
      - 检测到产品离开 (`SensorC = FALSE`) 后，重置状态机到 **STATE_A**，熄灭完成指示灯

#### 2. **状态机设计**
- **状态定义**：
  - `STATE_A`：初始状态，等待工作站A处理
  - `STATE_B`：产品运输到工作站B
  - `STATE_C`：产品运输到工作站C
  - `STATE_D`：产品处理完成，等待取走
- **状态转移条件**：
  - 每个状态的转移均依赖传感器信号和操作员按钮的联合触发
  - 完成状态 (`STATE_D`) 的退出条件仅为传感器信号 (`SensorC`)

#### 3. **输出控制**
- **电机控制**：
  - 自动模式下，仅在状态转移时短暂启动电机正转
  - 手动模式下，直接响应按钮信号（带互锁）
- **完成指示灯**：
  - 仅在 `STATE_D` 且 `SensorC` 为真时点亮

#### 4. **安全与互锁**
- 手动模式下，正反转按钮互锁，防止同时触发
- 自动模式下，反转功能禁用（`MotorReverse` 恒为 `FALSE`）

### 代码调整建议
1. **状态机初始化**：
   - 建议在手动模式切换时增加状态机复位逻辑（当前代码已实现）
2. **电机控制优化**：
   - 自动模式下的电机正转信号 (`tempMotorForward`) 可能需要增加延时或保持逻辑，确保运输完成
3. **完成指示灯逻辑**：
   - 当前逻辑在 `STATE_D` 中直接根据 `SensorC` 控制指示灯，符合需求
4. **输入验证**：
   - 可增加对传感器和按钮信号的防抖处理（如需要）

### 通用设计原则
- **状态机清晰划分**：将流程分解为离散状态，明确转移条件
- **模式隔离**：手动和自动模式的逻辑完全独立，避免相互干扰
- **输出暂存变量**：使用 `temp` 变量暂存输出值，最后统一写入，避免中间状态抖动
- **互锁机制**：对可能冲突的操作（如正反转）强制互锁

这种设计可扩展至类似的多工位控制系统，只需调整状态定义和转移条件即可。