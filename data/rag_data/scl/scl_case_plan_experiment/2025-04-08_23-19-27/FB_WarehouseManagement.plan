### 算法流程描述

#### 1. 变量定义
- **输入变量**：`requestIn`（入库请求）、`requestOut`（出库请求）
- **输出变量**：`productNum`（当前库存数量）、`libFreeNum`（空闲仓位数量）、`error`（错误标志）、`status`（状态码）
- **输入/输出变量**：`library`（仓位状态数组，1~9）
- **内部变量**：`statLastItemIndex`（最后操作的仓位索引）
- **常量**：定义状态码（`STATUS_OK`、`STATUS_ALL_OCCUPIED`、`STATUS_ALL_EMPTY`）

#### 2. 主逻辑流程
1. **初始化与状态计算**：
   - 遍历`library`数组，统计当前库存数量（`productNum`）和空闲仓位数量（`libFreeNum`）。
   - 默认无错误（`error := FALSE`），状态码为`STATUS_OK`。

2. **入库逻辑（`requestIn`触发）**：
   - **从高到低遍历仓位**（9→1），找到第一个空闲仓位（`library[i] = FALSE`）。
   - 若找到空闲仓位：
     - 标记为占用（`library[i] := TRUE`）。
     - 更新库存和空闲数量（`productNum += 1`，`libFreeNum -= 1`）。
     - 直接返回（`RETURN`），避免后续错误处理。
   - 若未找到空闲仓位：
     - 设置错误标志（`error := TRUE`）和状态码（`STATUS_ALL_OCCUPIED`）。

3. **出库逻辑（`requestOut`触发）**：
   - **从低到高遍历仓位**（1→9），找到第一个占用仓位（`library[i] = TRUE`）。
   - 若找到占用仓位：
     - 标记为空闲（`library[i] := FALSE`）。
     - 更新库存和空闲数量（`productNum -= 1`，`libFreeNum += 1`）。
     - 直接返回（`RETURN`）。
   - 若未找到占用仓位：
     - 设置错误标志（`error := TRUE`）和状态码（`STATUS_ALL_EMPTY`）。

#### 3. 设计要点
- **优先级策略**：
  - 入库时优先占用高编号仓位（后进先出，减少机械臂移动）。
  - 出库时优先释放低编号仓位（先进先出，避免长期积压）。
- **错误处理**：
  - 明确区分“满仓”和“空仓”错误，通过状态码提供详细信息。
- **性能优化**：
  - 使用`RETURN`提前退出循环，减少不必要的遍历。
  - 每次操作后实时更新库存和空闲数量，确保数据一致性。

#### 4. 可扩展性
- **仓位数量调整**：修改数组大小（如1..12）和初始`libFreeNum`即可支持更多仓位。
- **状态码扩展**：通过新增常量支持更多错误类型（如无效仓位操作）。
- **多任务支持**：可增加互锁逻辑（如`busy`标志）避免并发操作冲突。

### 代码调整建议
- **边缘检测**：当前代码未处理脉冲信号（如`requestIn`持续为`TRUE`可能导致重复操作），可增加`lastRequestIn`变量实现上升沿检测。
- **输出区域**：`Writing TO outputs`区域可显式写入输出变量（如`#productNum := productNum`），但当前逻辑已隐含赋值，非必须。