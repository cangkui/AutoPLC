### 算法流程描述（适用于类似的状态循环控制需求）

#### 1. 状态机设计思维
- **核心思想**：将需求中的循环触发逻辑抽象为有限状态机（5种状态）
- **状态定义**：
  - State 1: 绿灯亮
  - State 2: 红灯亮  
  - State 3: 黄灯亮
  - State 4: 全亮
  - State 5: 全灭
- **循环机制**：状态到达最大值后复位（State 5→State 1）

#### 2. 输入处理逻辑
- **边缘检测**：通过`当前按钮状态 AND NOT 上次按钮状态`检测上升沿
- **防抖处理**：隐含在状态变更只响应有效边沿的设计中

#### 3. 状态转换规则
```mermaid
graph TD
    A[初始状态0] -->|首次触发| B(State1: 绿灯)
    B -->|触发| C(State2: 红灯)
    C -->|触发| D(State3: 黄灯)
    D -->|触发| E(State4: 全亮)
    E -->|触发| F(State5: 全灭)
    F -->|触发| B
```

#### 4. 输出控制模式
- **查表法**：使用CASE语句直接映射状态到输出组合
- **输出模式**：
  - 每个状态对应确定的输出组合
  - 无过渡状态（直接切换）

#### 5. 扩展性设计
- **状态扩展**：修改lightState上限值和CASE分支即可增加新状态
- **输出扩展**：新增输出变量时只需在CASE中补充对应逻辑
- **触发条件**：可替换为其他触发信号（如定时器、传感器等）

#### 6. 典型应用场景
- 工业设备状态指示灯控制
- 交通信号灯模拟系统
- 多模式设备的状态切换（如清洗/消毒/待机模式）
- 任何需要循环切换输出组合的控制系统

这种设计模式的关键在于将离散的状态变化抽象为数字化的状态机，通过简单的算术运算实现循环控制，适用于大多数需要顺序切换输出的应用场景。