

### 调整后的算法流程描述

#### **模式切换逻辑**
- **模式变量处理**：基于`Mode`输入切换控制逻辑分支
  - 手动模式(`Mode=FALSE`)：
    1. 复位自动流程状态到初始位置(`STATE_A`)
    2. 实现电机手动控制互锁：
       - 前进优先：`MotorForward = ForwardButton ∧ ¬ReverseButton`
       - 后退优先：`MotorReverse = ReverseButton ∧ ¬ForwardButton`
  - 自动模式(`Mode=TRUE`)：激活状态机流程控制

#### **自动模式状态机**（需调整原有状态定义）
| 状态           | 编码 | 执行动作                                                                 | 转移条件                                                                 |
|----------------|------|--------------------------------------------------------------------------|--------------------------------------------------------------------------|
| **等待A站**    | 0    | 保持电机停止                                                            | 当`SensorA`检测到物料 **且** `ButtonA`按下 → 跳转状态1，启动正转         |
| **运输到B站**  | 1    | 持续正转直到`SensorB`激活 → **立即停止电机**                            | 停止后检测`ButtonB`按下 → 跳转状态2，启动正转                             |
| **运输到C站**  | 2    | 持续正转直到`SensorC`激活 → **立即停止电机**                            | 停止后检测`ButtonC`按下 → 跳转状态3，点亮完成灯                          |
| **完成保持**   | 3    | 维持`CompletionLight`亮起                                               | 当`SensorC`检测消失（物料取走） → 复位到状态0，熄灭完成灯                |

#### **关键逻辑优化点**
1. **电机停止时机改进**：
   - 在`SensorB/SensorC`触发时立即切断正转输出（原代码在状态跳转后才启动，存在持续运转风险）
   - 新增状态内停止控制：
     ```scala
     CASE #currentState OF
         1:  // 运输到B站状态
             IF #SensorB THEN
                 #tempMotorForward := FALSE; // 立即停止
                 IF #ButtonB THEN ... // 转移逻辑
             END_IF
     END_CASE
     ```
     
2. **信号边缘检测**：
   - 为所有按钮(`ButtonA/B/C`)增加上升沿检测（原代码缺少，可能导致长按重复触发）
   ```scala
   VAR
       lastButtonA : Bool;
   END_VAR
   
   buttonA_Rising := #ButtonA AND NOT lastButtonA;
   ```

3. **安全互锁增强**：
   ```scala
   // 手动模式互锁升级（防止同时按下）
   #tempMotorForward := #ForwardButton AND NOT #ReverseButton AND NOT bothButtons;
   #tempMotorReverse := #ReverseButton AND NOT #ForwardButton AND NOT bothButtons;
   bothButtons := #ForwardButton AND #ReverseButton; // 新增互锁变量
   ```

#### **变量定义调整建议**
| 变量类型      | 名称                 | 作用描述                                                                 |
|---------------|----------------------|--------------------------------------------------------------------------|
| **新增VAR**   | `lastButtonA/B/C`    | 按钮信号历史状态（用于边缘检测）                                         |
| **新增CONST** | `MOTOR_STOP_DELAY`   | 电机停止延时（可选，用于过冲保护）                                       |
| **优化VAR**   | `currentState`       | 扩展状态描述注释（增加状态机流程图关联标记）                             |

#### **异常处理补充**
```scala
// 在Validation区域增加：
IF #MotorForward AND #MotorReverse THEN
    #MotorForward := FALSE;
    #MotorReverse := FALSE;
    // 可扩展报警输出
END_IF
```