

### 调整后的算法流程描述

#### **核心逻辑结构**
1. **数据存储结构**  
   - 使用`library[1..9]`布尔数组表示货架层状态（TRUE=占用，FALSE=空闲）
   - 通过`productNum`和`libFreeNum`实时统计库存与空闲数量

#### **主流程步骤**
```plaintext
┌───────────────────────────────────────┐
│           每个扫描周期执行            │
└───────────────────────────────────────┘
                │
                ▼
┌───────────────────────────────┐
│   Calculate区域：状态统计      │
│ 1. 遍历library数组            │
│ 2. 计算productNum/libFreeNum  │
│ 3. 重置error/status为初始状态  │
└───────────────────────────────┘
                │
                ▼
┌───────────────────────────────┐
│   Main Logic区域：请求处理      │
├───────────────┬───────────────┤
│ 存储请求处理   │ 取出请求处理    │
│ (requestIn)   │ (requestOut)  │
└───────────────┴───────────────┘
```

---

#### **详细子流程**

**A. 存储请求处理**  
```plaintext
          ┌───────────────┐
          │  requestIn=1? │
          └──────┬────────┘
                 ├─是─→ 执行存储逻辑
                 │
                 ├─否─→ 跳过存储处理
                 │
                 ▼
       ┌─────────────────────┐
       │ 逆序遍历9→1层       │
       │ 查找第一个FALSE位置  │
       └───────┬───────┬─────┘
               │       │
               ▼       ▼
       找到空闲层?   未找到
           │           │
           ▼           ▼
    设置对应层为TRUE  设置错误状态
          │          (error=1)
          ▼           status=8001
  更新library数组状态
```

**B. 取出请求处理**  
```plaintext
          ┌───────────────┐
          │ requestOut=1? │
          └──────┬────────┘
                 ├─是─→ 执行取出逻辑
                 │
                 ├─否─→ 跳过取出处理
                 │
                 ▼
       ┌─────────────────────┐
       │ 顺序遍历1→9层       │
       │ 查找第一个TRUE位置  │
       └───────┬───────┬─────┘
               │       │
               ▼       ▼
       找到占用层?   未找到
           │           │
           ▼           ▼
    设置对应层为FALSE 设置错误状态
          │          (error=1)
          ▼           status=8002
  更新library数组状态
```

---

### **关键调整点说明** (对比原始代码)

| 调整项                  | 原始代码处理                          | 调整后逻辑                          |
|-----------------------|-----------------------------------|-----------------------------------|
| 数量统计方式             | 在存储/取出时手动增减productNum/libFreeNum | 完全通过Calculate区域统一计算，确保数据一致性       |
| 错误状态重置机制           | 无显式重置逻辑                        | 在Calculate区域初始化error=FALSE/status=OK |
| 遍历方向                | 正确实现逆序/顺序遍历                   | 保持代码原有逻辑，与需求一致                   |
| RETURN语句使用          | 找到位置后立即退出                     | 保留快速退出机制，避免无效循环                 |

---

### **数据流验证要点**
1. **边界条件测试**  
   - 全空货架时触发存储 → 应占用第9层
   - 全满货架时触发存储 → 应报8001错误
   - 全空时触发取出 → 应报8002错误

2. **数量同步验证**  
   - 执行存储后productNum应=Calculate区域统计值
   - 操作前后libFreeNum必须满足`9 - productNum`

3. **状态保持性**  
   - 无操作请求时library状态保持不变
   - 错误状态仅在当前周期有效（下一扫描周期自动复位）

---

该流程描述完整覆盖了自然语言需求，同时修正了原始代码中手动更新统计量的潜在问题，确保系统状态始终通过权威的Calculate区域进行统一计算。