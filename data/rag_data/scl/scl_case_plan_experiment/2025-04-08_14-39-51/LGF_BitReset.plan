

```markdown
算法流程描述（基于需求及代码调整）：

1. 输入处理：
   - 接收DWORD类型输入`value`和USInt类型`bitNo`
   - 对`bitNo`进行范围处理：`bitNo % 32`（确保位号在0-31范围内）

2. 位掩码生成：
   - 创建32位全1掩码（BINARY_ONES = 16#FFFFFFFF）
   - 生成目标位掩码：
     a. 将数值1（TRUE_BOOL_BIT）左移`bitNo`位
     b. 将左移后的值与全1掩码进行异或运算 → 生成目标位的复位掩码

3. 位复位操作：
   - 执行位与操作：原数值 AND 复位掩码 → 将指定位强制置0
   - 示例：当bitNo=3时：
     - 复位掩码 = FFFFFFFF ^ 00000008 = FFFFFFF7
     - value AND FFFFFFF7 → 第3位（0起始）被清零

4. 结果处理：
   - 直接返回位操作后的结果
   - 设置ENO = TRUE（无错误处理机制）

调整说明：
- 增加位号取模运算替代显式范围检查（代码采用MOD 32方式）
- 使用预定义常量优化位运算（BINARY_ONES/TRUE_BOOL_BIT）
- 省略错误处理逻辑（需求未明确要求）
- 采用单行位运算替代多步位操作（代码优化形式）
```

注：此流程描述通过位运算特性实现高效复位，核心逻辑是通过掩码生成与位与操作组合实现指定位的清零，同时利用DWORD类型的32位特性自动处理高位数据。