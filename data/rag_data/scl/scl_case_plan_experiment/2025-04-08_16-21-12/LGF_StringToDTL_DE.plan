### 算法流程描述：德国传统日期字符串转DTL转换器（LGF_StringToDTL_DE）

#### **1. 功能概述**
该函数用于将德国传统格式的日期时间字符串（如 `22-01-2019 14:07:57.696417000`）转换为西门子PLC中的 `DTL` 数据类型。支持完整的日期时间字段（年、月、日、时、分、秒、纳秒），并包含严格的格式校验和错误处理。

---

#### **2. 输入输出定义**
- **输入**  
  - `date`（String）：待转换的日期时间字符串，格式为 `DD-MM-YYYY HH:MM:SS.NNNNNNNNN`。
- **输出**  
  - `error`（Bool）：转换是否出错（`TRUE`表示错误）。
  - `status`（Word）：错误状态码（如 `16#8201` 表示年份格式错误）。
- **返回值**  
  - `DTL`：转换后的日期时间值，若出错则返回默认值 `DTL#1970-01-01-00:00:00.0`。

---

#### **3. 核心处理逻辑**
1. **空输入检查**  
   - 若输入字符串为空，直接返回默认值，状态码设为 `STATUS_NO_CURRENT_JOBS`（`16#7000`）。

2. **字符串解析与转换**  
   - **字段提取**：使用 `MID` 函数按固定位置截取字符串中的年、月、日等字段。  
     - 示例：年份从第7字符开始截取4位（`2019`）。
   - **字符串转数值**：通过 `STRG_VAL` 将截取的字符串转为数值，并存储到临时 `DTL` 变量的对应字段。

3. **格式校验**  
   - 对每个字段进行范围校验，例如：
     - 年份：`1970` ≤ `YEAR` ≤ `2262`。
     - 月份：`1` ≤ `MONTH` ≤ `12`。
     - 纳秒：`0` ≤ `NANOSECOND` ≤ `999999999`。
   - 若校验失败，设置 `error` 和 `status`，返回默认值。

4. **纳秒处理**  
   - 若纳秒部分不足9位（如 `1.5`），自动补零为 `1.500000000`。

5. **修正工作日字段**  
   - 通过 `#tempDateAndTime := #tempDateAndTime + t#0ms` 强制更新 `DTL` 的星期字段。

6. **输出结果**  
   - 若所有校验通过，返回转换后的 `DTL` 值，状态码设为 `STATUS_FINISHED_NO_ERROR`（`16#0000`）。

---

#### **4. 错误处理机制**
- **错误码定义**  
  - 每个字段均有专属错误码（如 `ERR_FORMAT_YEAR`），直接关联到校验失败的位置。
- **快速失败**：任一字段校验失败后立即终止处理，避免无效计算。

---

#### **5. 代码优化点**
- **常量集中管理**  
  所有格式参数（如截取位置、字段长度）通过常量定义，便于维护。
- **模块化分区**  
  使用 `REGION` 将年、月、日等逻辑分块，增强可读性。
- **性能考虑**  
  - 避免冗余计算（如直接复用临时 `DTL` 变量）。
  - 使用 `RETURN` 提前退出错误分支。

---

#### **6. 示例流程**
**输入字符串**：`"22-01-2019 14:07:57.696417000"`  
1. 截取年份 `2019` → 校验通过。  
2. 截取月份 `01` → 校验通过。  
3. 截取日 `22` → 校验通过。  
4. 截取纳秒 `696417000` → 补零后校验通过。  
5. 返回 `DTL#2019-01-22-14:07:57.696417000`，状态码 `16#0000`。

**输入字符串**：`"32-13-2025"`  
1. 截取月份 `13` → 触发 `ERR_FORMAT_MONTH`（`16#8202`），立即返回错误。