

### 算法流程描述（SCL实现逻辑）

#### 核心检测原理
通过构造一个具有典型位模式的16位字（0x0001），将其最高有效位移至字节边界，通过检测首个字节的存储值判断内存排列顺序。

#### 流程步骤
1. **构造位模式**：
   - 定义常量0x0001作为检测基准
   - 使用位左移操作(SHL)将第1位移动到最高位（15位位移），生成0x8000

2. **内存访问检测**：
   - 将生成的16位值存入临时变量
   - 访问该变量的最低内存地址字节（通过%B0访问器）

3. **结果判定**：
   - 若首字节为0x00 → 高位字节存储在低地址 → 小端模式（返回TRUE）
   - 若首字节为0x80 → 低位字节存储在低地址 → 大端模式（返回FALSE）

#### 优化要点
- 使用预定义常量避免硬编码
- 通过位操作直接生成检测模式
- 利用SCL的直接位访问特性简化检测逻辑

#### 注意事项
- 16位数据类型是关键检测位宽
- 位移量必须确保跨字节边界（15位移位保证最高位进入第二个字节）
- 字节访问顺序依赖编译器的内存布局实现

> 该实现通过构造跨字节的位模式，利用小端系统低地址存储低位字节的特性，直接检测内存布局特征，无需依赖任何系统API或硬件特定功能。