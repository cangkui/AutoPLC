

### 算法流程描述（思维链）

1. **输入有效性预处理**  
   - 对`bitNo`进行取模32处理（`bitNo MOD 32`），确保取值范围为0-31，防止无效位移操作

2. **根据`setTo`选择操作模式**  
   - **TRUE模式（置位操作）**  
     a. 生成单bit掩码：将`0x0001`左移`bitNo`位  
     b. 通过`OR`逻辑将原始值`value`的指定bit置1  
   - **FALSE模式（复位操作）**  
     a. 生成单bit掩码：将`0x0001`左移`bitNo`位  
     b. 创建反掩码：用全1常量（`0xFFFFFFFF`）与掩码进行异或操作  
     c. 通过`AND`逻辑将原始值`value`的指定bit清0

3. **直接返回运算结果**  
   - 不修改输入参数，直接返回经过位操作后的新DWORD值

### 关键逻辑说明
- **常量复用**：预定义全1掩码（`0xFFFFFFFF`）和基础位掩码（`0x0001`）作为全局常量
- **位运算优化**：避免使用条件分支判断单独bit的状态，直接通过布尔逻辑实现位操作
- **边界处理**：通过取模运算代替显式范围检查，确保任意输入值的操作有效性

### 调整说明
- 保持与原始代码完全一致的位运算逻辑序列
- 显式说明掩码生成的反向逻辑（异或全1生成反掩码）
- 强调模运算的本质是处理bitNo的有效范围