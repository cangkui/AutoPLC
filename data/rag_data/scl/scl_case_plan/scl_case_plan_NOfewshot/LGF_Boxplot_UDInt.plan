

以下是基于需求和代码的算法流程描述：

1. **执行边沿检测与初始化**
   - 检测execute信号的上升沿
   - 获取输入数组的上下边界（自动处理数组维度）
   - 初始化所有统计变量为初始值（0值或空值）
   - 检查数组下界是否为负值（错误处理）

2. **参数有效性验证**
   - 检查rangeOutlier参数是否合法（必须>1.0或=0）
   - 参数无效时设置ERR_RANGE_NOT_OK错误

3. **数据预处理**
   - 调用LGF_ShellSort_UDInt功能块进行数组排序
   - 处理排序错误（错误传播机制）
   - 获取排序后的min/max值（数组首尾元素）

4. **统计量核心计算**
   - 中位数计算：
     * 偶数长度数组：中间两元素的平均值
     * 奇数长度数组：中间元素值
   - 四分位数计算：
     * Q25：使用(n+3)/4公式进行线性插值
     * Q75：使用(3n+1)/4公式反向计算

5. **离群值处理**
   - 当rangeOutlier≠0时：
     * 计算四分位距（IQR = Q75 - Q25）
     * 确定上下离群边界：
       Q25 - k*IQR 和 Q75 + k*IQR
     * 双向遍历数组：
       - 正向遍历找第一个不小于下限的值（新min）
       - 反向遍历找第一个不大于上限的值（新max）
     * 计算离群值占比百分比

6. **偏度计算**
   - 使用公式：(Q75 + Q25 - 2*Median) / (Q75 - Q25)
   - 处理可能的除零异常（代码中隐含通过排序保证Q75>Q25）

7. **结果输出与状态管理**
   - 根据rangeOutlier选择输出原始或调整后的min/max
   - 统一输出统计量到接口变量
   - 状态机管理：
     * 首次调用状态（STATUS_FIRST_CALL）
     * 完成状态（STATUS_EXECUTION_FINISHED）
     * 错误状态传播机制

**关键调整点**：
- 采用双指针法进行离群值检测优化遍历效率
- 使用线性插值法处理非整数四分位位置
- 通过常数定义提高可维护性（如分位数系数）
- 隐式处理浮点转换（通过UDINT_TO_LREAL类型转换）
- 错误状态位通过高位比特位标识（%X15提取错误标志）

此流程保持了与原始代码的高度一致性，同时抽象出可重用的计算模式，适用于不同数值类型的箱线图算法实现。