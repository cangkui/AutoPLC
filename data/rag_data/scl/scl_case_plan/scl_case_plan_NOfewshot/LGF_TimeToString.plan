

以下是为该函数生成的算法流程描述，结合自然语言需求和代码实现逻辑：

1. **初始化处理**
   - 清空临时结果字符串

2. **时间分解计算**
   - 将输入的Time类型转换为总毫秒数（DINT格式）
   - 通过连续取模和除法运算分解出：
     * 天数（取模每日毫秒数后的商）
     * 剩余毫秒数（取模结果）
     * 小时数（取模每小时毫秒数后的商）
     * 剩余毫秒数（继续取模）
     * 分钟数（取模每分钟毫秒数后的商）
     * 剩余毫秒数（继续取模）
     * 秒数（取模每秒毫秒数后的商）
     * 最终毫秒数（取模结果）

3. **逆向字符串构建**（关键特征）
   - 从最小时间单位开始处理，逐步向前拼接：
     1. 毫秒部分：格式化为"XMS"（若>0）
     2. 秒部分：格式化为"XS"并前置（若>0）
     3. 分钟部分：格式化为"XM"并前置（若>0）
     4. 小时部分：格式化为"XH"并前置（若>0）
     5. 天数部分：格式化为"XD"并前置（若>0）

4. **字符串优化处理**
   - 使用DELETE函数移除DINT转字符串时产生的符号位（首字符）
   - 自动跳过零值时间单位的显示

5. **输出处理**
   - 将最终组合字符串赋值给函数返回值
   - 同时填充各独立时间单位的字符串输出参数

注：该算法通过逆向拼接策略（从毫秒到天）实现时间单位正序排列，避免了传统正向拼接时的字符串重组开销，这是代码中值得注意的优化点。所有中间变量均使用基本数据类型操作，确保在PLC环境中的高效执行。