

### 算法流程描述（调整后）

#### 核心逻辑层级
1. **优先级顺序**：复位（reset）> 置位（set）> 触发（trigger）
2. **处理顺序**：按 `复位最后处理` 实现优先级覆盖机制

#### 详细流程
1. **触发信号处理**
   - 检测 `trigger` 的上升沿（当前值为真且上一周期为假）
   - 若检测到上升沿：反转 `statOut` 状态（取反操作）

2. **置位信号处理**
   - 检测 `set` 的上升沿
   - 若检测到上升沿：强制 `statOut` 为 TRUE

3. **复位信号处理**
   - 检测 `reset` 的上升沿
   - 若检测到上升沿：强制 `statOut` 为 FALSE（覆盖前两步操作）

4. **状态暂存**
   - 将当前输入值（trigger/set/reset）存入对应 `*Old` 变量
   - 为下一周期的边沿检测提供历史状态

5. **输出更新**
   - 将内部状态 `statOut` 映射到输出管脚 `out`

### 流程特征说明
1. **复位信号优先**：  
   虽然代码中复位逻辑写在最下方，但通过执行顺序的覆盖机制实现复位优先级最高。当多个信号同时触发时，复位操作会覆盖置位和触发操作的结果。

2. **边沿检测策略**：  
   通过对比当前值与上一周期值（`*Old`变量）实现上升沿检测，确保每个信号仅在其上升沿瞬间触发一次动作。

3. **状态保持特性**：  
   输出状态 `statOut` 在无触发事件时保持前次值，符合继电器/触发器类设备的行为特性。