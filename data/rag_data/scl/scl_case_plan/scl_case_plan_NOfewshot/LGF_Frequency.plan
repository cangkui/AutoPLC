

### 算法流程描述（思维链）

1. **输入有效性校验**  
   - 若`frequency ≤ 0`或`pulsePauseRatio ≤ 0`：  
     - 强制`clock`输出`FALSE`，`countdown`置零  
     - 跳过所有定时逻辑（直接进入输出阶段）

2. **动态参数更新检测**  
   - 当`frequency`或`pulsePauseRatio`发生改变时：  
     - 重置两个定时器（确保新周期立即生效）  
     - 计算脉冲占空比：  
       - `脉冲占比 = pulsePauseRatio / (1 + pulsePauseRatio)`  
       - `暂停占比 = 1 - 脉冲占比`  
     - 根据频率换算时间：  
       - 总周期时间 = 1000ms / frequency  
       - `脉冲时间 = 总周期时间 × 脉冲占比`（转换为`Time`类型）  
       - `暂停时间 = 总周期时间 × 暂停占比`（转换为`Time`类型）  
     - 保存当前参数值用于后续变化检测

3. **定时器互锁控制**  
   - **脉冲阶段定时器(instTofTimePulse)**：  
     - 启动条件：暂停定时器未激活（`NOT instTofTimePause.Q`）  
     - 运行期间`clock`保持`TRUE`  
     - 计时结束后触发暂停阶段  
   - **暂停阶段定时器(instTofTimePause)**：  
     - 启动条件：脉冲定时器已结束（`instTofTimePulse.Q`变为`TRUE`）  
     - 运行期间`clock`保持`FALSE`  
     - 计时结束后触发新脉冲周期  

4. **剩余时间计算**  
   - 若处于脉冲阶段：  
     - `countdown = 脉冲时间 - 已运行时间`  
   - 若处于暂停阶段：  
     - `countdown = 暂停时间 - 已运行时间`  

5. **输出同步**  
   - 实时映射`clock`状态到输出引脚  
   - 动态更新`countdown`值  

### 关键控制逻辑图示
```
[新周期开始]  
   ↓  
+--------------+   定时结束    +--------------+
| 脉冲定时器   | ------------> | 暂停定时器   |
| (TRUE 输出)  | <------------ | (FALSE 输出) |
+--------------+   定时结束    +--------------+
```  
该闭环控制确保输出信号在脉冲/暂停状态间无限循环切换。