

### 思维链总结（Shell Sort算法流程）

#### 1. 输入验证与初始化
- **数组边界计算**  
  通过LOWER_BOUND和UPPER_BOUND获取数组实际索引范围  
  计算元素总数 `n = upper - lower + 1`  
- **错误条件判断**  
  ❌ `n > 1000` → 置ERR_TOO_MANY_ELEMENTS  
  ❌ `n <= 0` → 置ERR_NO_ARRAY  
- **索引偏移计算**  
  创建临时数组的索引映射关系 `offset = -lower + 1`

#### 2. 数据预处理
- **数组复制**  
  将输入数组元素完整复制到固定大小的临时数组（`tempArray[1..1000]`）  
  保留原始数组的索引映射关系

#### 3. 希尔排序核心逻辑
- **动态间隙生成**  
  初始化间隙gap=1 → 按`gap = 3*gap +1`动态扩展 → 直到gap超过n  
  反向缩减间隙：每次循环将gap缩小3倍（gap /= 3）直到gap=1
- **分组插入排序**  
  **外层循环**：按当前gap值遍历所有子序列  
  **内层循环**：对每个子序列执行插入排序  
  **排序方向控制**：  
  ```python
  if 降序: 前元素 < 当前值时交换
  if 升序: 前元素 > 当前值时交换
  ```
- **移位优化**  
  在元素交换时采用后移策略而非直接交换，减少赋值操作次数

#### 4. 结果回写
- **数组更新**  
  将排序后的临时数组元素按原始索引映射写回输入数组  
  保证原数组变量的内存地址不变性

#### 5. 状态返回
- 成功时设置`error=false`和`STATUS_NO_ERROR`
- 全程无显式错误处理（通过状态码机制）

### 关键设计特征
1. **内存优化**  
   使用固定大小临时数组（1000元素）避免动态内存分配  
   通过索引偏移支持任意起始索引的输入数组

2. **性能优化**  
   采用Knuth建议的3倍间隙序列 (1,4,13,40...)  
   插入排序部分采用while循环减少比较次数

3. **接口兼容性**  
   支持BOOL型sortDirection参数（TRUE=降序，FALSE=升序）  
   保持原数组变量地址不变，符合PLC编程惯例

4. **安全机制**  
   严格限制最大处理元素数（MAX_ARRAY_ELEMENTS=1000）  
   空数组检测防止无效操作