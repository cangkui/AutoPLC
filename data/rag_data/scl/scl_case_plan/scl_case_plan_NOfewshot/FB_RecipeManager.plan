

### 算法流程思维链

#### 操作优先级处理
```text
采用ELSIF结构确保四类操作互斥执行，优先级顺序为：添加 > 删除 > 修改 > 查询
```

#### 公共逻辑
```text
1. 初始化阶段
   - 复位所有输出标志位（error/status/recipeAdded等）
   - 错误状态默认置为无错误（STATUS_OK）

2. 数组遍历逻辑
   - 使用1..10的索引循环
   - 采用提前退出机制（EXIT指令）
   - 维护found标志位记录操作结果
```

#### 添加配方（addRecipe）
```text
┌── 双目标搜索：既找空位又查重
│   FOR 1..10:
│   ├── 发现空位（recipeID=0）→ 记录首个空位索引
│   └── 发现重复ID → 标记冲突
├── 决策树：
│   ├── 存在重复 → 置错误码16#8002
│   ├── 无空位 → 置错误码16#8003
│   └── 正常添加 → 填入首个空位，置成功标志
```

#### 删除配方（deleteRecipe）
```text
┌── 精确匹配搜索
│   FOR 1..10:
│   └── 匹配成功 → 置recipeID为0
├── 异常处理：
│   └── 未找到 → 置错误码16#8004
```

#### 修改配方（modifyRecipe）
```text
┌── 覆盖式更新
│   FOR 1..10:
│   └── 匹配成功 → 全字段覆盖
├── 异常处理：
│   └── 未找到 → 置错误码16#8005
```

#### 查询配方（queryRecipe）
```text
┌── 精确检索
│   FOR 1..10:
│   └── 匹配成功 → 复制结构体到输出
├── 异常处理：
│   └── 未找到 → 置错误码16#8001
```

#### 错误处理机制
```text
统一错误处理框架：
1. 任意操作未达预期 → error=TRUE
2. 特定status码对应不同错误类型
3. 成功操作 → 保持error=FALSE且status=OK
```

#### 关键设计亮点
```text
1. 空位管理策略：采用墓碑标记（recipeID=0）实现逻辑删除
2. 存储优化：添加操作优先使用低索引空位，提升存储密度
3. 状态隔离：每次扫描前复位临时变量（freeIndex/found），避免状态残留
```

该流程完整覆盖需求文档中的5个控制要求，错误码映射关系与需求说明完全一致，通过结构化遍历和状态标志位管理实现可靠的配方管理功能。