

### 算法流程思维链总结

#### **核心逻辑**
通过三次多项式对5个连续采集值进行加权平滑处理，输出`smoothedValue`。需要严格管理输入值的存储顺序和计算触发条件。

---

#### **关键流程**
1. **功能块激活检测**
   - **触发条件**：检测`enable`信号的上升沿（首次激活或重新激活）。
   - **动作**：
     - 清空历史值数组`statValues`，填充零值。
     - 重置计数器`statCount`为0。
     - 更新状态为`STATUS_FIRST_CALL`（首次调用）。

2. **输入值插入逻辑**
   - **触发条件**：`enable`已激活且`insert`信号出现上升沿。
   - **数据存储**：
     - 采用**FIFO队列模式**：新值`value`存入`statValues[4]`，旧值依次左移（索引0←1←2←3←4）。
     - 计数器`statCount`递增，直到超过`MINIMUM_NUMBER_OF_VALUES`（=4）。

3. **平滑值计算条件**
   - **允许计算条件**：`statCount > 4`（即已存储5个有效值）。
   - **计算公式**：
     ```math
     smoothedValue = (1/35) * [ -3*y(n-2) + 12*y(n-1) +17*y(n) +12*y(n+1) -3*y(n+2) ]
     ```
     对应代码实现：
     ```scala
     #statSmoothedValue := 0.028571 * (-3*#statValues[0] + 12*#statValues[1] +17*#statValues[2] +12*#statValues[3] -3*#statValues[4])
     ```
   - **状态更新**：设置为`STATUS_SUBSEQUENT_CALL`。

4. **异常状态处理**
   - **数值不足错误**：当`statCount ≤4`时，设置状态为`STATUS_NOT_ENOUGH_VALUES`。
   - **禁用状态**：若`enable`未激活，状态为`STATUS_NO_CALL`，输出归零。

---

#### **状态机逻辑**
| 当前状态               | 触发条件                      | 动作                                 |
|------------------------|-----------------------------|--------------------------------------|
| STATUS_NO_CALL         | `enable`上升沿              | 初始化数据 → STATUS_FIRST_CALL       |
| STATUS_FIRST_CALL      | `insert`上升沿且数据不足     | 存储数据 → STATUS_NOT_ENOUGH_VALUES  |
| STATUS_SUBSEQUENT_CALL | `insert`上升沿且数据充足     | 计算新平滑值 → 保持状态               |
| 任何状态               | `enable`=false              | 强制跳转 → STATUS_NO_CALL            |

---

#### **输出生成规则**
- **error信号**：直接映射状态字的第15位（`#statStatus.%X15`），用于快速错误标识。
- **smoothedValue**：仅当`statCount>4`时更新，否则保持前值或零。

---

### 代码调整建议
1. **常量命名优化**  
   将`MINIMUM_NUMBER_OF_VALUES`重命名为`MIN_INSERTED_VALUES`，更明确其含义为“触发计算所需的最小插入值数量”。

2. **数组索引注释**  
   增加注释说明`statValues`各索引对应的时序关系：
   ```scala
   // statValues[0] → y(n-2)
   // statValues[1] → y(n-1)
   // statValues[2] → y(n)
   // statValues[3] → y(n+1)
   // statValues[4] → y(n+2)
   ```

3. **错误位说明**  
   补充文档说明`error`=true对应状态码范围（如`status ≥ 16#8000`时第15位为1），增强可维护性。