

### 算法流程描述

1. **上升沿检测机制**  
   - 持续监测控制按钮信号（`controlButton`）  
   - 当检测到**由0到1的跳变**时，判定为有效触发，执行状态切换

2. **状态循环控制**  
   - 维护一个循环计数器（范围1-5），初始值为1  
   - 每次有效触发时计数器递增  
   - 当计数器超过5时，自动重置为1，形成循环序列

3. **状态-灯光映射逻辑**  
   | 状态值 | 绿灯 | 红灯 | 黄灯 | 描述            |
   |--------|------|------|------|---------------|
   | 1      | ✅   | ❌   | ❌   | 仅绿灯亮        |
   | 2      | ❌   | ✅   | ❌   | 仅红灯亮        |
   | 3      | ❌   | ❌   | ✅   | 仅黄灯亮        |
   | 4      | ✅   | ✅   | ✅   | 全亮模式        |
   | 5      | ❌   | ❌   | ❌   | 全灭模式        |

4. **特殊循环处理**  
   - 第5次触发后进入全灭状态  
   - 第6次触发时直接跳转到状态1（绿灯亮），开始新循环

---

### 与示例代码的差异说明  
- **初始状态优化**：建议将计数器初始值设为1而非0，避免首次触发前出现未定义状态  
- **循环逻辑简化**：将`lightState >5`的判断改为`=5`更直观（当计数器到5时，下次触发直接归1）  
- **可读性提升**：增加状态常量定义（例如`STATE_GREEN=1`）增强代码可维护性