

根据需求和代码逻辑，算法流程描述如下：

1. 有效位号计算：
   - 对输入的bitNo进行32取模运算（确保0 ≤ 有效位号 ≤ 31）

2. 掩码生成：
   - 将二进制数值1左移有效位号位数
   - 示例：当bitNo=5时，生成掩码2#00000000_00000000_00000000_00100000

3. 位切换操作：
   - 将原始value与生成的掩码进行异或运算(XOR)
   - 异或运算特性：同位置数值不同时结果为1，相同则为0
   - 实现效果：指定位状态取反（0变1，1变0）

4. 结果输出：
   - 将异或运算结果作为新的DWORD值返回
   - 状态标志ENO固定为True（未实现错误处理）

注：位号范围处理采用自动循环机制（MOD 32），当输入bitNo≥32时自动折返到有效范围，例如bitNo=35实际操作位置3。