

### 算法流程描述

1. **初始化索引**  
   - 获取数组起始索引（`LOWER_BOUND`）作为初始处理位置 `tempSwapIndex`。
   - 获取数组最大索引（`UPPER_BOUND`）作为循环终止条件 `tempUpperIndex`。

2. **循环处理所有元素**  
   - **循环条件**：当 `tempSwapIndex` **小于** `tempUpperIndex` 时继续迭代。
   - **字节交换逻辑**：
     - 将当前元素的4字节值整体读入临时变量。
     - 按 **B3→B0、B2→B1、B1→B2、B0→B3** 顺序重写字节（即完全逆序）。
   - **索引递增**：每次循环后索引增加1，指向下一元素。

3. **终止条件**  
   - 循环在 `tempSwapIndex` 达到 `tempUpperIndex` 时自动终止，确保所有有效元素被处理。

### 关键逻辑说明

1. **端序无关性**  
   无论当前系统采用大端序（Big-Endian）或小端序（Little-Endian），强制将每个DWord的字节序完全逆序，确保结果与原始端序相反。

2. **边界处理优化**  
   通过预存 `UPPER_BOUND` 避免每次循环调用系统函数，提升执行效率。

3. **字节级操作**  
   直接通过 `%B0`~`%B3` 访问DWord的单个字节，实现精确的字节位置交换。