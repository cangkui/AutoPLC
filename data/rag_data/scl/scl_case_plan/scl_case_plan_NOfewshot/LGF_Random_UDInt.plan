

### 算法流程总结

#### 核心逻辑
1. **系统时间获取与校验**
   - 调用`RD_SYS_T`获取高精度系统时间（含纳秒）
   - **错误优先处理**：若时间获取失败，立即终止执行并返回错误状态
   - 错误标志、主状态码、子状态码需**同步设置**

2. **随机数生成策略**
   - **基于时间熵源**：取系统时间的`NANOSECOND`字段作为随机种子
   - **字节级混淆**：将32位纳秒值的字节顺序倒置（B3←B0, B2←B1, B1←B2, B0←B3）
   - 类型转换保证UDInt范围合法性

#### 关键流程
```python
流程开始
│
├─ 系统时间获取
│   ├─ 调用RD_SYS_T(#tempTime)
│   └─ 捕获返回状态码#tempTimeStatus
│
├─ 错误校验分支
│   ├─ [if #tempTimeStatus ≠ 0]
│   │   ├─ 置error=True
│   │   ├─ status=0x8600(ERR_RD_SYS_T)
│   │   ├─ subfunctionStatus=实际错误码
│   │   └─ 返回默认值0
│   │
│   └─ [else]
│       │
│       ├─ 数据转换
│       │   ├─ 将纳秒字段转为DWORD类型
│       │   └─ 执行字节倒序存储
│       │
│       ├─ 状态标记
│       │   ├─ error=False
│       │   ├─ status=0x0000(成功)
│       │   └─ subStatus=0x0000
│       │
│       └─ 返回处理后的随机值
│
流程结束
```

#### 特别说明
1. **伪随机性来源**：依赖系统时间纳秒级的自然变化，非加密安全随机数
2. **字节操作特性**：通过%B0-%B3直接操作DWORD变量的内存布局
3. **错误传播机制**：层级式状态码设计（主状态码+子状态码）
4. **兼容性处理**：返回值通过#LGF_Random_UDInt输出，符合SCL函数规范