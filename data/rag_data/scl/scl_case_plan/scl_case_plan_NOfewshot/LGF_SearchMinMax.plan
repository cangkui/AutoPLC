

以下是根据需求和代码提炼的算法流程思维链：

1. 初始化阶段
   - 复位所有错误标志和状态码
   - 准备临时变量存储中间计算结果

2. 输入验证流程
   → 验证输入是否为数组？ 
     ├─ 否 → 设置ERR_NO_ARRAY错误并返回
     └─ 是 → 检查数组元素类型与输出变量一致性？
             ├─ 不一致 → 设置ERR_NOT_EQUAL_TYPES错误并返回
             └─ 一致 → 计算数组最大索引（长度-1）

3. 核心搜索逻辑（根据元素类型分支）
   → CASE语句匹配元素类型：
     ├─ 整型系列（Int/UInt/DInt等）:
     │   ├─ 用首元素初始化min/max临时变量
     │   ├─ 从第二个元素开始遍历：
     │   │   ├─ 读取当前元素
     │   │   ├─ 比较更新最小值及索引
     │   │   └─ 比较更新最大值及索引
     ├─ 浮点型（Real/LReal）:
     │   └─ 处理逻辑同整型，但初始化时需注意NaN处理
     └─ 不支持的类型 → 设置ERR_WRONG_TYPE错误

4. 数据转移处理
   → 对找到的极值索引：
   ├─ 使用MOVE_BLK_VARIANT复制元素到输出变量
   └─ 检查块移动操作结果？
       └─ 失败 → 设置ERR_MOVE_BLK_VARIANT错误

5. 输出处理
   - 将临时索引转换为DInt输出
   - 同步更新ENO信号

6. 错误处理机制
   - 三级状态反馈：
     ├─ error: 布尔型总错误标志
     ├─ status: 主状态码（16#xxxx）
     └─ subfunctionStatus: 底层函数返回码

注：该算法通过类型分支处理实现了对多种数据类型的支持，而不仅限于需求说明中的DInt类型。实际实现中通过：
- 类型特定的临时变量（tempMinInt/tempMaxReal等）
- 通用索引处理逻辑
- 统一的Variant操作接口
实现了代码的类型扩展能力。