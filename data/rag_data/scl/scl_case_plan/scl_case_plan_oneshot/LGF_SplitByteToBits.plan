# 算法流程描述：Byte到8位拆分器

## 功能概述
这个函数`LGF_SplitByteToBits`用于将一个字节(Byte)变量拆分为8个独立的布尔(Bool)/位(Bit)变量，从最高有效位(MSB)到最低有效位(LSB)依次为bit7到bit0。

## 设计思路

1. **输入输出定义**：
   - 输入：一个字节(Byte)变量
   - 输出：8个布尔变量(bit7-bit0)，分别对应字节的8个位

2. **核心算法**：
   - 使用位掩码(MASK)和位移操作来提取每一位
   - 定义一个常量MASK(值为0x01)用于位提取
   - 对每个位采用以下处理方式：
     - 对bit0(LSB)：直接使用MASK进行AND操作
     - 对其他位：先右移相应位数，再使用MASK进行AND操作

3. **实现步骤**：
   - 初始化一个常量MASK(0x01)
   - 对输入字节进行位操作：
     - bit0 = byte AND MASK
     - bit1 = (byte >> 1) AND MASK
     - bit2 = (byte >> 2) AND MASK
     - ...
     - bit7 = (byte >> 7) AND MASK
   - 设置ENO为TRUE表示无错误

4. **优化考虑**：
   - 使用SHR(右移)函数代替直接位操作，提高可读性
   - 不需要错误处理，因为所有输入都是有效的

## 代码调整建议

1. **可读性优化**：
   - 可以添加注释说明每个位对应的位置
   - 可以考虑使用循环结构来简化重复代码(但SCL中循环可能不如直接写清晰)

2. **性能考虑**：
   - 当前实现已经是最优方式，位操作在PLC中执行效率很高
   - 不需要额外的变量存储中间结果

3. **扩展性**：
   - 如果需要处理多个字节，可以考虑扩展为函数块
   - 如果需要反向操作(8位合并为字节)，可以创建对应的合并函数

这个实现简洁高效，完全满足需求，且没有不必要的复杂性。