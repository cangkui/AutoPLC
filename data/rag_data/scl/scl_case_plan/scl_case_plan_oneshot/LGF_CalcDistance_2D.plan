### 算法流程描述（2D距离计算函数）

#### 1. **功能概述**
- 该函数用于计算二维平面上两点之间的欧几里得距离。
- 输入：两个点的坐标 `(x1, y1)` 和 `(x2, y2)`（均为 `LReal` 类型，即双精度浮点数）。
- 输出：返回两点之间的距离（`LReal` 类型）。

#### 2. **数学原理**
- 基于欧几里得距离公式：
  \[
  \text{Distance} = \sqrt{(x2 - x1)^2 + (y2 - y1)^2}
  \]
- 实现步骤：
  1. 计算横坐标差值：`dx = x2 - x1`
  2. 计算纵坐标差值：`dy = y2 - y1`
  3. 平方和：`dx² + dy²`
  4. 开平方根：`SQRT(dx² + dy²)`

#### 3. **代码逻辑分解**
- **输入验证**（隐含）：
  - 由于输入为浮点数，无需显式验证（但实际应用中可能需要检查非数值或溢出）。
- **计算过程**：
  - 直接调用 `SQR` 计算差值的平方，再用 `SQRT` 计算平方根。
  - 公式内联实现：`SQRT(SQR(#x2 - #x1) + SQR(#y2 - #y1))`。
- **输出处理**：
  - 结果直接赋值给函数返回值 `#LGF_CalcDistance_2D`。
  - 无额外状态码或错误处理（假设输入合法）。

#### 4. **优化与调整建议**
- **性能**：
  - 使用 `SQR` 和 `SQRT` 指令（硬件优化指令，适合PLC高效计算）。
- **可扩展性**：
  - 若需支持三维距离计算，可扩展输入参数（如 `z1, z2`）并修改公式。
- **错误处理**（可选增强）：
  - 添加对非数值（NaN）或极大值的检查，例如：
    ```scala
    IF NOT (IS_VALID(#x1) AND IS_VALID(#y1) AND IS_VALID(#x2) AND IS_VALID(#y2)) THEN
        // 返回错误值或触发异常
    END_IF;
    ```

#### 5. **代码流程总结**
1. **输入参数**：接收 `x1, y1, x2, y2`。
2. **计算差值**：`dx = x2 - x1`，`dy = y2 - y1`。
3. **平方和开根**：`distance = SQRT(SQR(dx) + SQR(dy))`。
4. **返回结果**：赋值给函数返回值。

#### 6. **与需求的一致性**
- 完全符合需求描述，无冗余逻辑。
- 代码简洁且直接映射数学公式，适合PLC环境高效执行。