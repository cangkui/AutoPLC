# WString到UTF-8字节流编码器算法流程描述

## 功能概述
该函数用于将WString字符串转换为UTF-8编码的字节流，并将结果存储在字节数组中。

## 主要变量
- **输入参数**:
  - `sourceString`: 待转换的WString字符串
  - `startPos`: 字节数组中开始写入的位置(数组下界会被自动加上)
  
- **输出参数**:
  - `bytesUsed`: 转换使用的字节数(1-3字节)
  
- **输入/输出参数**:
  - `encodedByteStream`: 存储UTF-8字节流的字节数组

- **返回值**:
  - 状态码(Word类型)，指示操作是否成功

## 算法流程

### 1. 初始化阶段
- 重置所有临时变量为初始值
- 计算实际写入位置: `tempArrayIndex = 数组下界 + startPos`
- 检查参数有效性:
  - 如果`startPos`超出数组范围，设置错误码`ERR_START_POS_OUTSIDE`

### 2. 主处理逻辑
- 遍历输入字符串中的每个字符:
  - **ASCII字符处理**(0x00-0x7F):
    - 直接使用1字节存储
    - 检查数组边界，如果越界则设置错误码`ERR_COUNT_EXCEEDS_BOUNDS`
  
  - **2字节UTF-8编码**(0x80-0x7FF):
    - 将字符拆分为2字节UTF-8格式
    - 检查数组边界是否足够
    - 按UTF-8规则编码:
      - 第1字节: 0xC0 + (字符高6位)
      - 第2字节: 0x80 + (字符低6位)
  
  - **3字节UTF-8编码**(0x800-0xFFFF):
    - 将字符拆分为3字节UTF-8格式
    - 检查数组边界是否足够
    - 按UTF-8规则编码:
      - 第1字节: 0xE0 + (字符高4位)
      - 第2字节: 0x80 + (字符中6位)
      - 第3字节: 0x80 + (字符低6位)

### 3. 输出阶段
- 设置输出参数`bytesUsed`:
  - 如果有错误则设为0
  - 否则设为实际使用的字节数
- 设置函数返回值:
  - 成功: `STATUS_NO_ERROR`
  - 失败: 相应的错误码

## 关键点说明
1. **边界检查**:
   - 在写入前严格检查数组边界，防止越界
   - 根据UTF-8编码长度(1-3字节)动态检查剩余空间

2. **UTF-8编码规则**:
   - 使用位操作和掩码实现UTF-8编码
   - 不同范围的字符使用不同长度的编码

3. **错误处理**:
   - 提供详细的错误码区分不同错误情况
   - 错误发生时立即终止处理

4. **性能考虑**:
   - 使用临时变量减少重复计算
   - 循环处理字符串中的每个字符

这个算法实现了完整的WString到UTF-8的转换流程，包括参数验证、编码转换和错误处理，可以安全地集成到PLC程序中。