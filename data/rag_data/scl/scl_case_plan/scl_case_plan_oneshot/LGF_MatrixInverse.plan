### **矩阵求逆函数（LGF_MatrixInverse）算法流程描述**

#### **1. 功能概述**
该函数用于计算一个方阵的逆矩阵，并返回计算状态和错误标志。输入矩阵和结果矩阵均为二维 `LReal` 数组（浮点数），支持动态大小。

#### **2. 输入/输出定义**
- **输入/输出参数**：
  - `matrix`（输入矩阵）：待求逆的方阵。
  - `matrixResult`（输出矩阵）：存储逆矩阵的结果。
- **输出参数**：
  - `error`（错误标志）：`TRUE` 表示计算失败，`FALSE` 表示成功。
  - `status`（状态码）：返回计算状态（如 `STATUS_NO_ERROR` 或错误码）。

#### **3. 算法流程**
##### **(1) 矩阵维度检查**
1. **获取矩阵的上下界**：
   - 使用 `LOWER_BOUND` 和 `UPPER_BOUND` 获取输入矩阵和结果矩阵的行列范围。
   - 计算矩阵的行数 `tempRows` 和列数 `tempColumns`。
2. **检查是否为方阵**：
   - 如果 `tempRows != tempColumns`，则设置 `error = TRUE`，`status = ERR_NOT_SQUARE_MATRIX`，并返回。
3. **检查输入矩阵和结果矩阵的维度是否匹配**：
   - 如果 `matrix` 和 `matrixResult` 的行列上下界不一致，则设置相应的错误码并返回。

##### **(2) 矩阵求逆计算**
1. **初始化结果矩阵**：
   - 将 `matrixResult` 初始化为零矩阵。
2. **计算负矩阵**：
   - 遍历输入矩阵，计算 `matrixResult[i,j] = -matrix[i,j]`。
3. **高斯-约当消元法（Gauss-Jordan Elimination）**：
   - **主对角线处理（Pivot 元素）**：
     - 遍历主对角线元素 `matrixResult[k,k]`。
     - 如果 `matrixResult[k,k] ≈ 0`（接近零，考虑浮点精度），则报错 `ERR_ALGORITHM_NOT_POSSIBLE` 并返回。
     - 计算 `Pivot = -1.0 / matrixResult[k,k]`，并更新 `matrixResult[k,k] = Pivot`。
   - **处理 Pivot 列**：
     - 遍历非 Pivot 行的元素 `matrixResult[i,k]`，计算 `matrixResult[i,k] *= Pivot`。
   - **处理非 Pivot 行和列的元素**：
     - 遍历所有非 Pivot 行 `i` 和非 Pivot 列 `j`，计算：
       ```
       matrixResult[i,j] += matrixResult[i,k] * matrixResult[k,j]
       ```
   - **处理 Pivot 行的元素**：
     - 遍历非 Pivot 列 `j`，计算 `matrixResult[k,j] *= Pivot`。
4. **计算成功**：
   - 设置 `error = FALSE`，`status = STATUS_NO_ERROR`。

#### **4. 错误处理**
| 错误码（`status`） | 描述 |
|-------------------|------|
| `16#8200` | 输入矩阵不是方阵 |
| `16#8201` | 矩阵不可逆（主对角线元素为零） |
| `16#8202` | 输入矩阵和结果矩阵的行下界不匹配 |
| `16#8203` | 输入矩阵和结果矩阵的列下界不匹配 |
| `16#8204` | 输入矩阵和结果矩阵的行上界不匹配 |
| `16#8205` | 输入矩阵和结果矩阵的列上界不匹配 |

#### **5. 优化与注意事项**
- **浮点精度处理**：
  - 使用 `PRECISION = 1.0E-10` 判断是否接近零，避免除零错误。
- **动态数组支持**：
  - 使用 `LOWER_BOUND` 和 `UPPER_BOUND` 适应不同索引范围的数组。
- **性能优化**：
  - 采用原地计算（直接修改 `matrixResult`），减少内存占用。

#### **6. 代码调整建议**
- **增加输入矩阵的奇异性检查**：
  - 在计算前，可先检查矩阵的行列式是否接近零，提前报错。
- **支持可选的 LU 分解法**：
  - 对于大矩阵，可采用 LU 分解提高计算效率。

### **总结**
该函数通过 **高斯-约当消元法** 计算矩阵的逆，并进行了严格的错误检查。适用于 PLC 环境下的矩阵运算需求，如控制系统中的状态矩阵求逆。