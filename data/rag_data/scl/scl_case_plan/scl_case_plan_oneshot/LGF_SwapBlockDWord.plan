# DWord Endianness Adjuster 算法流程描述

## 功能概述
这个函数用于调整/切换多字节数据类型(DWord)的字节序(Endianness)。它接收一个DWord数组，并将数组中每个元素的字节顺序进行反转。

## 变量定义
- **输入/输出参数**:
  - `data`: Array[*] of DWord - 需要进行字节序调整的数据数组
- **临时变量**:
  - `tempUpperIndex`: DInt - 存储数组的上界索引
  - `tempSwapIndex`: DInt - 当前处理的数组索引
  - `tempSwapValue`: DWord - 临时存储当前处理的DWord值
- **常量**:
  - `FIRST_DIMENSION`: UDInt := 1 - 表示数组的第一维度
  - `NEXT_ELEMENT`: DInt := 1 - 表示数组索引的增量

## 算法流程

1. **初始化阶段**:
   - 获取数组的起始索引(LOWER_BOUND)
   - 获取数组的结束索引(UPPER_BOUND)

2. **处理循环**:
   ```
   WHILE (当前索引 < 上界索引) DO
     a. 读取当前索引处的DWord值到临时变量
     b. 执行字节交换操作:
        - 字节0 ↔ 字节3
        - 字节1 ↔ 字节2
     c. 将交换后的值写回原数组位置
     d. 移动到下一个数组元素
   END_WHILE
   ```

3. **字节交换逻辑**:
   ```
   原始值: [B0][B1][B2][B3]
   交换后: [B3][B2][B1][B0]
   ```

## 关键点说明
- 该函数不关心原始系统或目标系统的字节序，实现了通用的字节序转换功能
- 使用系统函数LOWER_BOUND和UPPER_BOUND来获取数组边界，确保处理任意大小的数组
- 通过临时变量存储上界索引，避免在循环中重复调用UPPER_BOUND，提高效率
- 使用字节级访问(%B0-%B3)来实现精确的字节交换操作

## 调整建议
1. 可以添加输入参数验证，确保数组不为空
2. 考虑添加处理完成的状态标志或计数器
3. 对于大型数组，可以考虑添加进度指示功能