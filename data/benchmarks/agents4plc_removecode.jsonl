{"name": "agents4plc_1", "type": "easy", "description": " Use structured text (ST code) to design a PLC function block that evaluates whether the critical motor should be triggered based on the given low pressure value compared to a threshold of 36464. The program should determine the state of Motor_Critical based on this evaluation."}
{"name": "agents4plc_2", "type": "easy", "description": " Use structured text (ST) to design a PLC function block named 'CALCULATE_OUTPUT'.\nThe function block receives an integer input 'i' and produces an output 'o' based on the value of 'i'.\nThe output is determined as follows: when the input 'i' is 0, the output 'o' is 0;\nwhen the input is between 1 and 5, 'o' is the square of 'i';\nwhen 'i' is between 6 and 10, 'o' is equal to 'i' plus two times 'i';\notherwise, 'o' is assigned a value of -1.\nThe program should ensure valid bounds for 'i' and that 'o' never takes undefined or invalid values."}
{"name": "agents4plc_3", "type": "easy", "description": " Use structured text (ST code) to design a function block (FB) for a PLC program that involves two nested loops.\nThe outer loop (i) iterates from 0 to 10, and the inner loop (j) iterates from 10 to 100 with a step size of 2.\nDuring each iteration, if the flag is TRUE, the loop exits, and the count is updated\nto keep track of how many times the inner loop executed.\nEnsure that the count does not exceed the expected maximum of iterations\nand that loop variables stay within their defined bounds."}
{"name": "agents4plc_4", "type": "easy", "description": " Design a PLC program using structured text (ST code) that implements a function block for a loop counter.\nThe function block should include the following features:\n\n- The counter is incremented on each call, with the macro variable representing the current count\nand micro controlling the decrementing cycle.\n- The function block should return the current value of the counter through the output variable o.\n- On each invocation, if micro reaches zero, the macro variable should be incremented by 1, and micro should be reset to the new value of macro.\n- The program should manage the state of both macro and micro to ensure they do not go negative\nand that the output value o is always a positive integer."}
{"name": "agents4plc_5", "type": "easy", "description": " Design a PLC function block using structured text (ST code) to process multiple emergency stop signals.\nThe function block should accept multiple emergency stop input signals\nand generate corresponding emergency stop output signals by logically inverting each input.\nEnsure that each output represents the logical NOT of its respective input,\nreflecting the emergency stop activation status."}
{"name": "agents4plc_6", "type": "easy", "description": "Design a PLC function block using structured text (ST code) to manage and increment two variables, aaa and bbb, based on their comparative values. The function block should utilize the following logic:\nIf aaa is equal to bbb, increment aaa by 1.\nIf aaa is greater than bbb, increment bbb by 1.\nIf aaa is less than bbb, increment aaa by 1.\nThe output variable, OUT, should represent the difference between aaa and bbb after executing the increments.\nAdditionally, a cycle counter, CYCLE, should increment with each function block execution to track the processing cycles."}
{"name": "agents4plc_7", "type": "easy", "description": " Design a PLC function block 'constantprogram' using structured text (ST code) that:\nreceives an integer input and returns two integer outputs.\nThe first output 'o' should equal the input value, while the second output 'c' should be set to a constant value of 43."}
{"name": "agents4plc_8", "type": "easy", "description": " Design a Function Block in Structured Text (ST) named dw, which takes an integer input (i) and returns an integer output (o).\nThe function block includes an internal integer variable (ss) that increments by 1 each time the block is executed.\nIf the input i is equal to 1, the output o should be set to 1. Otherwise, o should be set to the current value of ss.\nDesign a main program (MAIN) that calls this function block with the input value 3.\nEnsure the logic of input processing, internal state management (ss),\nand output assignment is correctly implemented"}
{"name": "agents4plc_9", "type": "easy", "description": " Design a PLC function block named `LED_Control` using structured text (ST code).\nThe function block should contain two Boolean input variables (`PB1` and `PB2`) and one Boolean output variable (`LED`).\nImplement logical operations such that `LED` is assigned the value resulting\nfrom a logical AND operation between `PB1` and the negation of `PB2`.\nThe function block should represent a simple control system where `PB1` and `PB2` determine\nwhether `LED` is on or off based on the specified logic."}
{"name": "agents4plc_10", "type": "easy", "description": " Use structured text (ST code) to design a PLC program.\nThe program contains a subroutine constantprogram,\nwhich receives an integer as input and assigns the input value to variables a, b, c, d0 in sequence,\nand finally assigns the value of d0 to Output variable o.\nCall constantprogram in the main program MAIN and pass in the integer value 3."}
{"name": "agents4plc_11", "type": "easy", "description": " This function block is designed to toggle a boolean output each time a button is pressed. It ensures that the output reflects the correct toggled state based on the input button's transition from not pressed (FALSE) to pressed (TRUE). The logic captures state changes effectively in a single PLC cycle."}
{"name": "agents4plc_12", "type": "easy", "description": " This function block compares two integer input values, Value1 and Value2, and outputs the larger value as MaxValue. It ensures that the output accurately reflects the maximum of the two inputs within a single PLC cycle."}
{"name": "agents4plc_13", "type": "easy", "description": "Create a PLC function block named NOT_GATE in Structured Text (ST) that implements a boolean NOT gate. The function block should have one boolean input named 'Input' and one boolean output named 'NegatedOutput'. The output should always be the logical negation of the input."}
{"name": "agents4plc_14", "type": "easy", "description": "Create a PLC function block named AND_GATE in Structured Text (ST) that implements a simple boolean AND gate. The function block should have two boolean inputs named 'Input1' and 'Input2', and one boolean output named 'AndResult'. The output should be TRUE only when both inputs are TRUE, otherwise it should be FALSE."}
{"name": "agents4plc_15", "type": "easy", "description": " Create a PLC function block named NOT_GATE in Structured Text (ST) that implements a boolean NOT gate. The function block should have one boolean input named 'Input' and one boolean output named 'NegatedOutput'. The output should always be the logical negation of the input."}
{"name": "agents4plc_16", "type": "easy", "description": " Create a PLC function block named AND_GATE in Structured Text (ST) that implements a simple boolean AND gate. The function block should have two boolean inputs named 'Input1' and 'Input2', and one boolean output named 'AndResult'. The output should be TRUE only when both inputs are TRUE, otherwise it should be FALSE."}
{"name": "agents4plc_17", "type": "medium", "description": "Design a PLC program using structured text (ST code) that incorporates pressure sensors,\ntemperature sensors, relays, counters, error codes, and error flags as inputs.\nThe program must loop through the pressure sensor, adjust the temperature sensor\nbased on specific conditions, and update the relay status according to the value of GT1_OUT.\nEnsure that the program checks for conditions to avoid overflow and maintains the error flag state.\nReturn a Boolean value indicating the completion of the operation."}
{"name": "agents4plc_18", "type": "medium", "description": "Design a PLC program using structured text (ST code) that includes a function block named `F_CollectInput` and a main program named `MAIN`.\n\nThe main program begins by invoking the `CollectInput` function block to gather input signals (`IN1`, `IN2`, `IN3`, `IN4`, and `IN5`) into a Boolean array called `Data`. Once data collection is complete, indicated by the `Finished` flag from the function block, the program sets a `Ready` flag to signal readiness for further processing.\n\nUpon readiness, the program calculates an output signal `Out` based on complex logical conditions:\nNOT (A1 OR A2 OR A3 OR ... OR A15)  , where the A1 to A15 satisfy:\n\n```plain\nA1 = NOT (Data[7]) AND NOT (Data[3]) AND NOT (Data[2]) AND NOT (Data[1]) OR Data[5];\nA2 = Data[7] AND NOT (Data[3]) AND NOT (Data[2]) AND NOT (Data[1]) OR Data[6];\nA3 = NOT (Data[7]) AND Data[3] AND NOT (Data[2]) AND NOT (Data[1]) OR Data[12];\nA4 = Data[7] AND Data[3] AND NOT (Data[2]) AND NOT (Data[1]) OR Data[8];\nA5 = NOT (Data[7]) AND NOT (Data[3]) AND Data[2] AND NOT (Data[1]) OR Data[4];\nA6 = Data[7] AND NOT (Data[3]) AND Data[2] AND NOT (Data[1]) OR Data[9];\nA7 = NOT (Data[7]) AND Data[3] AND Data[2] AND NOT (Data[1]) OR Data[10];\nA8 = Data[7] AND Data[3] AND Data[2] AND NOT (Data[1]) OR Data[16];\nA9 = NOT (Data[7]) AND NOT (Data[3]) AND NOT (Data[2]) AND Data[1] OR Data[11];\nA10 = Data[7] AND NOT (Data[3]) AND NOT (Data[2]) AND Data[1] OR Data[14];\nA11 = NOT (Data[7]) AND Data[3] AND NOT (Data[2]) AND Data[1] OR Data[17];\nA12 = Data[7] AND Data[3] AND NOT (Data[2]) AND Data[1] OR Data[18];\nA13 = NOT (Data[7]) AND NOT (Data[3]) AND Data[2] AND Data[1] OR Data[13];\nA14 = Data[7] AND NOT (Data[3]) AND Data[2] AND Data[1] OR Data[20];\nA15 = NOT (Data[7]) AND Data[3] AND Data[2] AND Data[1] OR Data[15];\n```\n\nSystem evaluate the values stored in the `Data` array.\nThen the output readiness flag `OutReady` is set to true, indicating that the system is prepared to produce the final output.\n\nFinally, after the output is calculated, the program resets the `CollectInput` function block to prepare for the next\nround of data collection by setting the `RESET` flag to true.\n\nThe program includes a function block named `F_CollectInput`,\nwhich collects multiple input signals (`IN1`, `IN2`, `IN3`, `IN4`, and `IN5`)\ninto a Boolean array called `Data` during each cycle when triggered by a clock signal `TICK`.\nThe data collection occurs only when the `RESET` signal is not activated,\nensuring that the system captures inputs correctly.\n\nWhen the system captures data, it stores the input values in `Data`,\nupdates the index for future data collection,\nand sets the `Finished` output flag to indicate when the data array is fully populated (after 20 inputs).\nIf a reset is initiated, the index is reset, and the previous data collection is cleared,\nreadying the system for a new set of inputs."}
{"name": "agents4plc_19", "type": "medium", "description": "Instruction: \"Use Structured Text (ST) to design a Function Block (FB) that takes multiple integer inputs and performs a series of conditional operations to determine the maximum and minimum values among them. The Function Block should:\n\nInputs:\n\nAccept five integer inputs (input1, input2, input3, input4, input5).\nTrack the number of executions using a cycle counter (CYCLE), which will be incremented by 1 each time the Function Block is executed.\nIntermediate Calculations:\n\nYou should first realize  USER_MAX Function Block to determine intermediate maximum values,\nand a USER_MIN Function Block to determine intermediate minimum values.\nDetailed Calculation Process:\n\nStep 1: Calculate the intermediate maximum value (TEMP_MAX_OUT):\nUse USER_MAX to compare input2 and input3.\nSet TEMP_MAX_OUT to the larger of input2 and input3.\nStep 2: Calculate M as the maximum value between input1 and TEMP_MAX_OUT:\nUse USER_MAX to compare input1 with TEMP_MAX_OUT.\nAssign the larger value to M.\nStep 3: Calculate the intermediate minimum value (TEMP_MIN_2_OUT):\nUse USER_MIN to compare input4 and input5.\nSet TEMP_MIN_2_OUT to the smaller of input4 and input5.\nStep 4: Calculate another intermediate value (TEMP_MIN_3_OUT) using a more complex expression:\nUse USER_MIN to compare input2 and (input3 * TEMP_MIN_2_OUT + input2).\nThe multiplication and addition should be computed first: Multiply input3 by TEMP_MIN_2_OUT and then add input2.\nUse USER_MIN to find the smaller value between input2 and the result of the calculation (input3 * TEMP_MIN_2_OUT + input2).\nSet TEMP_MIN_3_OUT to this smaller value.\nStep 5: Calculate N as the minimum value between input1 and the sum of TEMP_MIN_3_OUT + input3:\nAdd TEMP_MIN_3_OUT to input3.\nUse USER_MIN to compare input1 with the result of (TEMP_MIN_3_OUT + input3).\nAssign the smaller value to N.\nOutputs:\n\nThe Function Block should provide the following outputs:\nM: The maximum value derived from comparing input1 with the intermediate maximum value (TEMP_MAX_OUT).\nN: The minimum value derived from comparing input1 with another intermediate value (TEMP_MIN_3_OUT + input3).\nUPDATED_CYCLE: This is CYCLE + 1, indicating that the Function Block has been executed once."}
{"name": "agents4plc_20", "type": "medium", "description": "Design a PLC program using structured text (ST code) that implements a function block to Calculate Fibonacci number.\nIf the output could exceed the bound of INT (at max 32767), then return the max value of 32767 based on Saturation Arithmetic ideas.\nThis program should include a main program that initializes an integer input value NN (default is 5)\nand calculates the Fibonacci sequence up to the NN-th term.\nThe final output should be the value of the NN-th Fibonacci number.\nEnsure the program handles edge cases for NN values less than or equal to 2 correctly by returning 1."}
{"name": "agents4plc_21", "type": "medium", "description": "Use structured text (ST code) to design a function block (FB) for monitoring start/stop signals and managing trigger and\nrising edge signals in a PLC program. This function block should have the following features:\n\n- 'ONS_Trig' should be set to 'TRUE' only when 'Start_Stop' changes from 'FALSE' to 'TRUE' (detecting the rising edge),\nwhere the previous state of 'Start_Stop' 'Rising_ONS'.\n- 'ON_OFF' should be updated based on XOR(ONS_Trig, ON_OFF), you can imply it with correct logic XOR syntax,\nor implement it in ST code.\n- 'Rising_ONS' should store the current value of 'Start_Stop' to help detect changes in the next PLC cycle."}
{"name": "agents4plc_22", "type": "medium", "description": "Use Structured Text (ST) to design a PLC function block named LatencyMonitor.\nThis block will monitor the latency of a specific node by updating error counts\nand tracking minimum and maximum latency values based on input conditions.\nThe function block has two input variables: `latency_xx_ms`,\nwhich represents the latency time in milliseconds, and `NODE_xx_STATUS`,\nwhich indicates the current status of the node.\n\nThe function block has four IN_OUT variables:\n`errors_xx`, which counts errors for the specific node;\n`errors_all`, which maintains a total error count;\n`min_latency_ms`, which stores the minimum observed latency;\nand `max_latency_ms`, which records the maximum observed latency.\n\nThe logic within the function block is as follows:\n1. If the `latency_xx_ms` is zero or if the `NODE_xx_STATUS` is not equal to 1, increment both `errors_xx` and `errors_all`.\n2. Check and update `min_latency_ms` from `latency_xx_ms` if `latency_xx_ms` is less than the current minimum or if the current minimum is negative.\n3. Check and update `max_latency_ms` from `latency_xx_ms` if `latency_xx_ms` is greater than the current maximum or if the current maximum is negative.\n\nEnsure that the function block efficiently updates the error counts and latency values each time it is called,\nallowing for accurate monitoring of node performance."}
{"name": "agents4plc_23", "type": "medium", "description": "Use structured text (ST code) to design a function block for controlling the LED color and motor direction based on two input button signals.\n\nThe function block should define input variables for left (PI_Button_Left)\nand right (PI_Button_Right) button presses, along with output variables for controlling the\nred LED (PI_LED_Red), green LED (PI_LED_Green), and motor direction (A_Motor_Left and A_Motor_Right).\n\nThe red LED should activate when the left signal (E_Left) is received,\nwhile the green LED should activate for the right signal (E_Right).\n\nThe motor should run to the left when the left button is not pressed (i.e., when PI_Button_Left is FALSE)\nand to the right when the right button is not pressed (i.e., when PI_Button_Right is FALSE).\n\nThe logic should ensure that the LED states and motor directions are updated accordingly based on these conditions."}
